%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: taux_loss_CH4.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Olivia Venot
%%CreationDate: 05/07/12
%%BoundingBox: 0 0 467 334
%%HiResBoundingBox: 0 0 466.1636 333.4980
%%CropBox: 0 0 466.1636 333.4980
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 6826 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD07FFA8FFFFA8FD04FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA9FFA8%FFFFFFA8FFA9FFA8FFA9FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA9FFA8FFA9FFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFA8FFA8FD06FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD05FFA9%FFFFFFA9FFFFFFA9FFFFFFA9FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA9FFFFFFA9FFFFFFA9FD04FFA9A8FFFFFF%A8FFFFFFA8FFFFA8FD07FFA8FD77FFA8FD0CFF7DFD04A8FFA8FFA8FD77FF%A8A8FFA8FFA8FFA8FFA8A8A8FFA8FD65FFA8FD0CFFA8FFA8FFFFFFA8FFFF%FFA8FFFFA87EFD04A8FD45FF7D527D7D7DA87DA87D527D7D7DA8527DFD0B%FFA8FD0CFFA8FD06FFA8FFA8FD07FFA8A8A8FD3BFFA8FFA8A8A8FD05FF27%7D27A8527D7DA8277D7DA8535252FD0BFF7DFD06FFA8FFA8FFA8FF7DA8A8%FD07FFA8FFA8FD07FF7DA8FD38FFA8FFA8FFA8FFA8FFFFFFA8A87DA87D7D%A8A87DA8A8A87DA8A87DA8FD09FFA87DFD07FFA8FD07FFA8FD09FFA8FD07%FFA8A8A8FD5BFFA8FD0CFFA8FD05FFA8FD07FFA8A8A8FD06FFA87DFD3FFF%FD077DFD28FFA8FD09FFA8FD07FFA8A8FD34FFA9FD08FF7D52A8A8A87D7D%FD14FFA8FD0CFFA8FD09FFA8FD07FFA8A8A8FD05FFA8A8A8FD31FFA8FFA8%FD07FFA8A87DA8A8A87DFD13FFA8A8FD0CFFA8FD14FFA8FD07FFA8A8FD54%FFA8FD0CFFA8FD0BFFA8FFA8FD07FFA8FFA8FD05FFA8FFA8A8A8FD35FFFD%047DA8FD15FFA8A8FD07FFA8FFFFA8A8A8FD0EFFA8FD09FFA8FFA8FD05FF%A8A9A8A8FD2AFFA8FFFFFFA9FD04FF7D7DA87DA9FD16FF7DFD06FFA8FFA8%FFA8FF7DA9FD0EFFA8FFA8FFA8FD07FFA8FFA8FD05FFFD05A8FD27FFA8FF%FFFFA8FFFFFF7DFFA8FFA8FD15FFA87DFD07FFA8FD23FFA8FD07FFA8A8A8%FD2FFFA8FF7DFD17FFA8FD0CFFA8FD17FFA8FD07FFA8FD09FFA8A8A8FD2B%FF7D52A8A87DFD16FFA8FD25FFA8FD13FFA8FD29FFA97D7DFF52A8FD16FF%A8FD0CFFA8FD19FFA8FD07FFA8FD0BFF7DFD43FFA8A8FD0CFFA9FD2EFFA8%FD28FFFD05A8FD16FFA8FD0AFFA8FF84FD19FFA8FD05FFA8FFA8FD0DFF7D%FD1DFFA8FFFFFFA8FD05FF277D527D52FD15FFA8A8FD05FFA9FFA8FFFFA8%A9A8A8FD19FFA9FD15FFA8FD25FFA87D7D7D527DFD16FF7DFD06FFA8FFA8%FFFFFFA8FD19FFA8FFA8FFFFFFA8FD10FFA8A8FD27FFA8FD17FFA8A8FD07%FFA8FD23FFA8FD12FFA8FD40FFA8FD0CFFA8FFA8FD11FFA8FD09FFA8FD14%FFA8FD3FFFA8FD40FFA8FD3EFFA8FD0CFFA8FFA8FFA8FFA8FFA8FFA8FD0B%FFA8FFA8FFA8FD05FFA8FD13FFA8A8FD3CFFA8A8FD0CFFA8FD14FFA8FD0B%FFA8FD13FFA8FD3DFFA8FD08FFA8FFA8FF7DFD09FFA8FFFFFFA8FFFFFFA8%FD0FFFA8FD13FFA8A8FD3AFFA8A8FFA8FFFFFFA8FFA8FD04FFA8A8FD05FF%A8FFFFFFA8FFA8FD15FFA8FD13FFA8FD3BFF7DA8FFA8FFFFFFA8A8A8FFFF%FFA8FFA8FFA8FFFFFFA8FD07FFA8FD13FFA8FD13FF7EFD3CFFA8FD43FF7D%FD39FFFD04A8FD09FFA8FD11FFA8FD27FFA8FD1BFF7DA8A8FD1AFFA8FFA8%FD0AFFA8FD54FF7DA8A8527DFD19FFFD04A8FD09FFA8FD15FFA8FD0FFFA8%FD13FFA8A8FD19FFA853A8537D27A8FD16FFA8A8FFA8FD0AFFA8FD3AFFA8%FD1DFFA853A8FD17FFA8FFA8FD04FFA8FFA8A8A8FF7DFD17FFA8FD23FFA8%FD35FFA87DFFA8FD05FFA8FFA8FFFFA9A9FD3AFFA8A8FD35FFA8A8FFA8FD%05FFA8FFFFFFA8FD1BFFA8FD0BFFA8FD13FFA8A8FD7FFFA8FD35FFA8FD0C%FFA8FD3CFFA9A8FD34FFA8FFA8FD0AFFA8FD1EFFA8FD1DFFA8A8FD34FFA8%FFA8A8FD09FFA8FD21FFA8FD07FFA8FD13FFA8FD33FFA8A8FFA8FD0AFFA8%FD72FF7DA8FFA8FFFFFFA8FFA8FFA8FF7DA8FD22FFA8FD19FFA8A8FD32FF%A8A8FFA8FD05FFA8FFA8FD29FFA8FD17FFA8FD33FFFD04A8FD05FFA8FFFF%FFA8FD27FFA8FFFFFFA8FD13FFA8FD32FFA8FFA8FD4AFFA8A8FD31FFA8FF%A8A8FD09FFA8FD2BFFA8FD14FFA8A8FD30FFA8FFA8FD0AFFA8FD2EFFA8FD%13FF7DFD2FFFFD04A8FD07FFA8FF7DFD2FFFA8FFA8FD11FFA8A8A8FD2BFF%A8A8A9A8FD05FFA8FFA8FFFFA8A8FD31FFA8FD12FFA8A8FD2BFF7DA8FFA8%FFFFFFA8FFA8FFA8FFA8FFA8FD32FFA8A8FD11FFA8A8A8FD27FFA8A8FD45%FFA8FD11FFA8FD27FFA8FD0CFFA8FD39FFA8FFA8FD0FFFA8A8A8FD24FFA8%FD49FFA8FD11FF7DFD23FFA8FD0CFFA8FD3DFFA8FFA8FD0FFFA8A8A8FD20%FFA8FD0CFFA8FD40FFA8FD10FFA8A8FD1FFFA8FD06FFA8FFA8FFA8FF7DFD%41FFA8FFA8FFA8FD0DFFA8A8A8FD1BFFA8A8FD07FFA8FFA8FFFFA8A8FD53%FFA8A8A8FD1BFF7DFD08FFA8FFFFFFA8FD45FFA8FFFFFFA8FD0DFFA8A8FD%73FFA9FD0BFFA8A8A8FD17FFA8FD0CFFA8FD47FFA8FFA8FD05FFA8FD0AFF%A87DFD16FFA8FD0CFFA8FD5CFFA8A8A8FD13FFA8FD0CFFA8FD4DFFA8FFFF%FFA8FD0CFFA8A8FD12FFA8FD0CFFA8A9FD4FFFA9FFFFFFA8FD0BFFA8A8FD%10FF7DFD06FFA8FFA8FFA8FF7DFD51FFA8FFFFFFA8FD0BFFA8A8A8FD0DFF%A87DFD07FFA8FFA8FFFFFFA8FD63FF7DFD0DFFA8FD08FFA8FFFFFFA8FD53%FFA8FD05FFA8FD0BFFA8FD80FFA8FD0BFFA8FD0CFFA8FD57FFA8FFFFFFA8%FD0BFF7DFD0AFFA8FD75FFA8FD09FFA8FD0CFFA8FD59FFA8FD0FFF7DFD08%FFA8FD09FFA8A9FFA8A8FD69FFA8FD07FF7DFD06FFA8A9A8FFA8FF7DA8A8%FD59FFA8FD0FFF7EA8FD04FFA8A8FD09FFA8FD5FFFA8FFFFFFA8FD0BFFA8%FD12FFA8FD5FFFA8FFFFFFA8FD09FFA8A8A8FD70FFA8FD05FFA8FD09FFA8%A87DFD0CFFA8FD63FFA8FFA8FFFFFFA8FFA8FD05FFA87DFD75FFA8FFFFFF%A8FD05FFA8FD06FFA8FFA8FF7DFF7DFD13FFA8FD29FFA9FD13FFA9FD15FF%A8FFA8FD05FFA8FFA87DFD07FFA8FFA8FFFFA8A8FD13FFA8FD0BFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD1DFFA9%FFFFFFA9FFFFFFA9FFFFFFA8FFFFFFA8FFA8FFA8FFFFFF7DFD08FFA8FFFF%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8A9A8A8FD75FF%A8FD14FFA8FFA8FF7DFD0FFFA8FFA8A8A8FD11FFFD04A8FD10FFA8FFA8FF%A8FD0FFFA8FFA8FFA8A8FD10FFA8FFA8A8A8FD12FFA9FFA8FD13FFA8FFA9%FD11FFA8FFA8FD13FFA8FD13FFA8FFA8FD11FFA9FFA8FD18FFA8FD13FFA8%FD13FFA8FD13FFA8FFA8FD11FFA8FFA8FD13FFA8FDBFFFA8A9A8FFFFFFA8%FFA8A8A8FFFFFFA8FFA8FFA8FFFFFFA8FFA8A9A8FFA8FFA8FFA9FFA8FFA8%FFA8FD5AFFA9A8A8FFA8FFFFFFA8A8A8FFA8FFA8FFFFA8A8FFFFFFA8FFA8%FFA8FFFFFFA8FFA8FD05FFA8FD5CFFA8FFFFFFA8FFFFFFA8FD09FFA8FFA8%FD05FFA8FFA8FD05FFA8FD26FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2012-07-05T15:34:52+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>184</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qgrqC5MsjqZHiYRgx&#xA;I/BjxL8uJqvE/EpJrvSmKuTTEaa0uZmZrq2DVatQWdOL/aFQvei0xVL9K1PRLrTre4N+p5IvJjec&#xA;qnYE1WVh9rFUzhsrf0U4yyyDiKSevKeW3WobvircenxKiqZJmKgAsZpamnc/Firo9PiVFUyTMVAB&#xA;YzS1NO5+LFXJp8Sihkmbcmpml7kmn2u3TFVsOnoqEPJKzcmIPrS9CxKj7XYbYquTT4lFDJM25NTN&#xA;L3JNPtdumKuTT4lFDJM25NTNL3JNPtdumKuXT4gWJkmPI1AM0u2wFB8XtXFXLp8QLEyTHkagGaXb&#xA;YCg+L2riq2PT0DyFpJSrNVB60uw4gU+14gnFVw0+LmW9SahAHH1paCld/td64q4afFzLepNQgDj6&#xA;0tBSu/2u9cVcNPi5lvUmoQBx9aWgpXf7XeuKuGnxcy3qTUIA4+tLQUrv9rvXFVp09PWRhJL6YVgy&#xA;+tLuSVoftdqHFVx0+LmG9SagBHH1paGtN/tdqYq46fFzDepNQAjj60tDWm/2u1MVc2nxEqRJMOJq&#xA;QJpd9iKH4veuKubT4iVIkmHE1IE0u+xFD8XvXFVsmnoXjKyShVarj1pdxxIp9rxIOKrm0+IlSJJh&#xA;xNSBNLvsRQ/F71xVz6fEwoJJl3BqJpexBp9rv0xVz6fEwoJJl3BqJpexBp9rv0xVz6fEwoJJl3Bq&#xA;JpexBp9rv0xVbPp6NDIsckqyMpCN60uxI2P2sVXSafEyMokmUsCAwmlqK9x8WKuk0+JkZRJMpYEB&#xA;hNLUV7j4sVQesadF9QuZEa69VYn4GK5mQg8TRh+8VdsVTXFVJ7u3RnVnHNOPJB8TDnUL8Iqd6Yqs&#xA;OoW3rQxAktOxWI0IU8VLkgmgIoO2Kse8sJpt9oUEEUwjd4wGRGWbkqinSf1gdzvTv1xVMbjy7YSc&#xA;VbT7C4h5cmilt0B2qFIajD4VNB8OKrW0zSBNH6ti1jIlHE9qzwxljTkDJblDStB+8Ar4Yqr/AKIl&#xA;VlkstSuYUCfDEzrcxMSDxZjOskvf9mRa4q2LjXreVhcW0V5b1HCW1Yxy7kA8oJTx4ruSwmqey4qr&#xA;6Zq2n6nA01lL6ioxjlRlaOWNwKlJYpAskbUIPF1BxVF4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqo&#xA;XdxNAqmK1luiTQrEYgR7n1XjH3Yqhv0ne/8AVou/+CtP+q+Koy3leWFZHheBjWsUhQsKGm/BnXfr&#xA;scVeP655i/OHSNZ8y2umx3erwBpF0D6zp6ur/wChpLWK4tY7eKP0ppTvcc/V4iNKOGJKpjF54/MW&#xA;fWjDFpdxJp1kY3kuW0u4sEueel30zIBcSTtwF1BbjkCjBn9Nh3ZVCwa9+aE+sXklvPc3OivPpB0q&#xA;4itInintmfTheurCCqo8d3M/Iu1aNw4ek3JVA6p50/NnT7CO6is76a1t7vUHv9RltYhEyJZSSWsU&#xA;UMkFjdLbLMF5M0Jd2BVJGqnNV7WpJUEihI3HhgV2KpL5wuIINAuZJuHDiR+8JVakGm4K4qnWKqE1&#xA;mkr+oHaOX4eMi0qvHl0DAjo5G4xVVijWONI0FEQBVHsBQYqluk2lhPpVuTBBvGnxRUahCihDgKQw&#xA;9umKo2Z7iEhlj9WAKAyrUygjvufjFPp+dcVVwagHx+jFUKbBI+b2ZFtK5LtxUGNnIO7ptXelSCGN&#xA;PtYq0b426Vvwtuo2M4asNSWpVjxK7LU8hSpABJxVbqOlQXtHDvbXiKVhvoOInjBIYhSyupUlRVWU&#xA;qe4OKob9JXun+lDqkTTRsQg1G2RmjrxHxTxDk0NWruOSACpZa0xVNIZoZokmhdZIpAGSRCGVgehB&#xA;GxGKrsVdirsVdirsVdirsVdirsVdirsVWSyOgBWJpa9kKin/AARXFVomk9Iv6DhgaenVOR9/tcfx&#xA;xVfGzMgZkKE/stSo/wCBJH44q8lsvMX5kJqkkGptqkXq68F0/wBLTvWtv0WL6aNxcSRWjNGht4QE&#xA;+LnVkkaT03+AqmvlHVPPh8z2llrcl9cWZivkZjaLBHyg1G7jhnuZPqiRfvbVIPTWKdW/aMZVuWBX&#xA;o+KuxV2KuxVLtdjtv0dcSyxQuwiZQ01FFOJ25ENiqY4qoSXkaSNFxZpQFogH2ufKlCaD9g13xVT+&#xA;vM0tuqQO0VwTSWnwhQhcOaVoDSnxUO+Kpd5OvY7jRLehAkCisfD02AAG/Ci/fTFU8xVRmtLeZg7L&#xA;SUCglUlXA605Chp7dMVc/wBaQJ6XGWgo/qHixO3xclBH0ccVc1zEkavOPQDA19SlF/1mBKj78VWG&#xA;zUMJLaQw1qSq0MTE1NWQ/wCU1SVoT44q71r2NiJYRLGAKSQnfvXlG1Ke1GauKoJdN0qe7lubN5LK&#xA;+IIlaEtExqac5IHHpSHaivJGduhxVURvMFvJJ6wgvoOQMXohreZU32Ku0iSN035IPYYq6PzBYCPl&#xA;eh9NcVDpeL6QUghaerUwtUuKcHNcVTIGu46Yq7FXYq7FXYq7FXYq7FXYqsldkWqxtKa04rxB+fxF&#xA;RirTSyAgCFzU0JBTYbbmrYqvUkrUqVPgaV/AnFXllzrP5mz6fqN9ZPeoJdK8w3GmQNYKjpcWt+v6&#xA;JHpzQCUSzWr8RHIKsBXjyqcKvUoixiQv9sqOVdt6b4FXYq7FXYq7FUj84XsVvolwCymQoaR8RI1C&#xA;CK8KMfppiqeYqpTWsEpJdTyPH4lJVhxrSjKQR9o9MVVEVUUIooqgBQOgAxVBaHcLPpVtIsgkHpqO&#xA;SqUGyjsxJxVHYq7FXYq7FVI26rHwgIg35fAq0J9wR3798VbhaWnGYASCoqp2YCnxAdR16dvfrirc&#xA;0EUyhZFrSpVujKSCtVYbqaMRUb4qoAyWrpG8hlhkIVC9OaElju1fiXdVG1R1JNdlUS6JIjI6h0cF&#xA;WVhUEHYgg4qlkmgxRRBdKmfSmUgqtuFMOwpxMDhowp78Arf5WKqkWozx3iWN9CUllDGC5jBMEnEn&#xA;4KndJOA5FW/2LNQ0VTDFXYq7FXYq7FXYq7FWnLgfAAT3qadj7Hviq2s1fsrT/WPj/q+GKtlpFjZi&#xA;nJgKhEIJJp0BbiOvjiry+20X8wYtN8wT3ttqV/JqFokmn6ampiCaK5k1O+mESTJcxrD6NtLbLIY5&#xA;ArKvEFumFXo+jx3MWkWMd00r3KW8SzvccPWMgQBjJ6bPHzJ+1xYivQkYFReKuxV2KuxVA65cLBpV&#xA;zI0gjHpsOTKXG6nspBxVHYqhpbwpOYFjrJ8HAsQFYvzPUVIoIz2xValxeSyWzxxKLWUFnYmrBStU&#xA;7rQ17AN88VQHlKe5fRrdbqOaOcIDSYGvGgp8W6/jiqdYq7FXYq7FXYqoXaVVXRlWaM1iLGgJ7qTQ&#xA;7MNunviq5ZxKP3I5AGhY7KOn0nZv9rFVkSyNMXZuSAD4wSAzCoNFB2Ub9a1PyGKojFXYqpXVrDdQ&#xA;NDMoZGodwDRlIZWFe6sAQfHFUJpNzdBPqOoOH1CAfHKqlVmQGizKKAVIpzUfZbbpQlVMMVdirsVd&#xA;irsVdiqyUTED0mVD3LKWFPoZcVcVn9RSrqI/2lKkkn2PIU+7FXOJfSkAILkHhQU+XUnFXh+leVfz&#xA;ig0m1tLs6pJqFtZuby6/SdY7kvFFJ9WR3vpHWX1DJG0piUq3xxyqgWIlXq/km01208rWEGvNXVFR&#xA;jOpla4MatIzRRNO5LStFGVRpCfiI5d8Cp5irsVdirsVSXzbPcpo1wlrHNJOUJpCDXjQ1+L4V/HFU&#xA;6xVZJBDKrLLGrq1AysAQQDUVr4HFV4FNh0xVKtDuWk0+2f1WMZjQGOZVEgPFdxwoKfEO3friqOjv&#xA;EaMu6SREGhV0Na9qUqDX2Pt1xVUMjjpGx+XH38TiruUtR8A4+7b9uwB9+/8AYq6k5r8Sr4ChND86&#xA;iuKu9M1PJ2YdhWlK1/lA7Gn0eOKqaTWpJaECVhVeUY5b05FeXT7ziqmbSWV+chEaPtNApJDgVoWb&#xA;belK0G/Q1FKKomORJEV0NVYVGxB+kHcYquxV2KuxVB6jpyXRiuIyI7+15tZzmtFZ1oVcKV5xttyW&#xA;u9AdmAIVb07UY76OUiN4ZoJGhuIJBRkdaH5EMpDKw2IIOKovFXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYqgdckaPSrllEhPpsP3Khm+yezAimKqsV6ZHC/V5UUmgkYLTpUVAYutR/MoxVTuryWKWRKpF&#xA;GBGRPJUqvMvUuKrt8AA36nFVWE3cghlLBFb4nipQhWU/CSa1IanhiqUeUZLqPQ7eO4tXjkCBgB0P&#xA;wggAsE3+Yp74qnDyM8JD2rsGBDRH0zUVpQ1fj03xVZIt4FiNsiRqlB6DMFXjToeKNQjoKGnzxVsy&#xA;3QkPqFIYo6s7sOSlB4NyXiQOtVxVU9GRmDGZitDVF4hTWvenIdezYq4WsHIsV5MabuS5FCCKcq03&#xA;AO3fFVXFXYqpNGI3eZFJZh8ca0+IjoaH9qm36+goqvjkSRFdDVW3BxVdirsVdiqX6nZ3ZZLzTii3&#xA;0RAZZPszQ1q0LNQletVYfZbxHIFVFWd3Fd20dxFUI4rxYFXU9Crqd1ZTswPQ4qrYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYqkvm2K9n0a4htYPVcoW5M6ogABrvua/Riq+ylhbXrwRyISQS6osfIsqRD4&#xA;mUc/h/yj3p+ziqb4q7FUv8vyeppFs3Hj8Cinqet+yP2qn7sVTDFXYq7FVIwFUVbcrCFJPEKCprua&#xA;gU8a7HFVyzKZWiIKuBUVGxHiD0OKr8VdirsVUXZLehCUSR/jYdmboae56/fiqtirsVdirsVSi5W3&#xA;0i9fUR8FpfPGl8BUhZmKxRTU6CtQkh8OJ2CnFU3xV2KuxV2KuxV2KsV17zTdWXmqz0cXllpkEsKT&#xA;pJfoXa+dpGRrSzpNAFlQIGYkP9taL1xVjnkD84X1s6faa5ZGy1XVp4ILG3hQEUfR4NSkmkPqyhY2&#xA;aR/S35ceIZeQeir03FXYq7FXYq7FUv8AMEnp6Rctx5fAwp6no/sn9qo+7FVlndI2o3B9b1I5mX0E&#xA;DFqAIoI4czx+JWr8A+eKo65M4jUw/a9SMNtX4C4D/wDC1xVA2qX891HNLM6RwljJEyFAzOCCgoVD&#xA;KlAVajVr1xVT8rWl7aaRbwXJif4FYSR8h1A24tX9eKpvirsVdirsVadQylTWjAg0JB38CKEYqp1k&#xA;hEa0aZSeLSGhYVOxIAFR4n+3FVXFXYq1IiyIyOKo4KsPEHY4qshm9QyKV4tE5Vh9AII+YIxVUxV2&#xA;KuxVZNDFPDJDKoeKVSkiHoVYUI+7FUFos909vLb3YP1myla3eQ7+oqgNHLX/AC42Ut4NUdsVTDFX&#xA;Yq7FXYq7FXYqlep+VfLmqanYarqGnQXOpaXJ6theOgMsTAMBxfrx+MniduVGpyAIVTTFXYq7FXYq&#xA;7FUn802l9d6RcQWxiT4Cxkk5HoDUcVA+/liqOgvxLf3FpRQ0FOjEsQyq1SONB9qn2sVRWKuxVLPL&#xA;ciyaNbMojA4KP3KlV+yOzAGuKpnirsVdirsVdirsVUTF6KyPBHydjyMfLiCa/ER1AJ6+56+OKqqu&#xA;Dt0egJQkVAPStPlireKqTGNLharR5hx59vgqwX/hmOKquKuxV2KuxVLnWSHzBG4KiC8tmjkBAB9W&#xA;Bw0dCBvySWStT+yKd8VTHFXYq7FXYq7FXYq7FXYq7FXYq7FXYqlnmSRY9GuWYRkcGH75Sy/ZPZQT&#xA;XFVtpIP07cxEKXWMVfk1SeMdfgLFRXbcL2xVMLlJWjURMVYSRk0oKqHBYb/5NcVQtlbXBk9S5DK0&#xA;bVUswbk5DB2Xc0jbkKLt06DFUP5WtGtdIt41uxdxcFIfioapA2qp47fLFU3xV2KuxV2KuxV2KuxV&#xA;a0UbSLIVBkSoV+4B6iuKqYM8SMZD6oBHHgtG417iu5A3269hiq5kSZI23FCsiGhVh9BFRUbHFW4Z&#xA;UmiWRPssKiuxHiCOxHfFV+KuxV2KoDWreeS2jnty/wBYspVuY0j3aQJUSRcSVUmSJnQcjQEg9sVR&#xA;kE8NxBHPA6ywyqHikQgqysKggjqCMVX4q7FXYq7FXYq7FXYq7FXYq7FXYqk/mm0a60i4ja7W0h4E&#xA;l+KlqgHarHjv8sVVLSGb9PXsxFIqBVJVwSSkfRioUrt2Y7198VTTFVrSxK6Rs6rJJX00JALU3NB3&#xA;piqXeW7hp9GtpGkMh4KOTKEOyjspIxVM8VdirsVdirsVdirsVdirsVWPDG7o7D40NVYEg/Kopt7d&#xA;MVUPTuIWuJUVZCw5JGpKVIrsa8vip37+GKr7a8juBsrxv3jlUo3UjoevTtiqvirsVdiqUvaXWlLJ&#xA;LpVv9Zt3cyS6cHEbBnJaR4GchAWO/Biqk78hvVVG2mo2l0zpE9Jo/wC9gcFJE3K1ZGo1CVND0PUV&#xA;GKonFXYq7FXYq7FXYq7FXYq7FXYqlnmS4aDRrmRZDGeDDkqhzup7MQMVRNjp8dnzETsUkPIoQgHK&#xA;gWvwqprRe5xVVuYDMiqCQVkjfqR9hwxG3sMVQtlppil9SYLyQ1j4M1GYghpXGw5uGoetPHFVHy1Y&#xA;w2mlW6QSTNEY1PCapIJAJNXAf8cVTXFXYq7FXYq7FXYq7FXYq7FXYq7FVO4tre5iMVxEk0Z6o6hh&#xA;4dDiqlHayxSl0uJHi4kLbSFWUHrXmVMn3scVahvJ/jW6t2hZd1MfKZWFaVBVR9xGKoiORZEV0NVY&#xA;VFQQfpB3GKrsVQt5plhePHJcQq80PL0Jx8MsfMUYxyLR0qOvE4qh0i1y1nYiZNQszTjE6iK5Tf4j&#xA;6gPpyCnQFFPixxVWsNWtL2qKHhuFJD2s6GKUFacqK32lHIfGlVPYnFUZirsVdirsVdirsVdirsVS&#xA;rzLYw3elXCTyzLCI2PCGoJIBINUUv+NMVTXFXFgBUmg2G/idhiqj9ctvUWMSBmd2iHH4vjVSxUkb&#xA;AgDocVQHleb1dEtnq5+ACsjc22A70GKprirsVdirsVdirsVdirsVdirsVdirsVdiriK7HpiqF/Rt&#xA;qJEdAUEe6opoo/1R+x0340r3riropbkXJWVSoavBQOaVA7SKBxG24cdehxVVSccAZVMJLBQrld2P&#xA;QAgkGuKquKoe+0+zvoDBdRCRD0NSrKeoZHUhkYHcMpBGKoIw6vpyRraV1G1UqrQzyUuEjApVJWB9&#xA;U+0hBPd8VRlpqNnds6QyfvogDLA4KSoGrxLxuFdQ1DSo37YqicVdirsVdirsVdiqVeaJvS0S5erj&#xA;4CKxtwbcHvQ4qmuKqdxbpOiq4+w6SKaVoUYMP1YqoW2nRwuJH4yvGAkLFQCirXvv8R5Hkdq+GKof&#xA;y9YWlppduttAbZDGp9Ll8NSoJPEMy74qmeKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVD/U&#xA;0BKqf9Heolt2AZCGFDQH7Py+z7d8VWCelyiszQD7Cwuq8H2JBRx+1t0r0H2e+Kq3r8Vdp19FE6yM&#xA;y8CPGtf1gYqqgggEGoPQ4qhbzS7G7kSaWMC5iBWC6T4Zow1OXCQfEAabjoe+KoVZ9XsRIb1RfWqk&#xA;sk9shEyoATSSEFvUIp1i3YnZBiqNsb+zv7Zbm0lEsLEjkKghlNGVlNCrKdmUioOxxVXxV2KuxV2K&#xA;pZ5hsLS70y4FzA1yojb91y+GoBIPEsq7YqmeKrJZoogpkYKGZUWvdmNAMVUF1K2aaOFObNIzKCEb&#xA;iOIJqWIpQ8TxPftiqX+T545tAtnjj9NeIHGjr0A7SfFiqdYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FVAW8qS84pmCs1Xjf41368SSGU/TQeGKrOURnSFXa3dCeMdAFkXqQKgg/7HcYqr&#xA;eqyu4kThGo5CWo4kd69wR/mcVVMVQOoaRb3Z9VJJLO8HHje2xCS0TlxVqhlkQc2+CRWXetK4qoya&#xA;je2EgXUITLaEOx1GAfBGFqQJ4yS6/D+2tV614bYqmaOkiK6MHRwGVlNQQdwQRireKuxVJfOE8cOg&#xA;XLyR+ovEjjR26g9o/ixVOsVWyRrIoVugZW+lWDD8Riqnb2scFeJJqFVeVPhRa8VFANhU9d/fFULo&#xA;UcI063kW3SFzEgPFSpI4j+ZUP4YqmGKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;tOiOKOoYAhgCK7qag/QRXFVIGdJuLVkicmjCgKd6HpUeB+/xxVyo0DRRQxj6ueQbj+wftDYn7PUb&#xA;dNu3RVWxV2KpVNYtp0k19psRf1WMt5Yoa+saGrQqzpHHKWNSej/tb0YKo+0u4Lu3S4gJMbitGVkY&#xA;H+VkYBlYd1YVGKq2KpdrsUH6OuJWt0mkETKOSljTif5Vc/hiqY4qpzTpCqswJDOqDiK7uwUV9t8V&#xA;Qyan6l1DDHBIUl5Ey0+FVAJRzSo4vxIFSD7YqgPJ12J9Etw4EcwUVi/dhgKCh4xkjFU8xV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVQSEwOTGaQEEtFQnifFKePdfu91VsDxRw&#xA;x/VV9S2LFfgNeArSgU9lIpT9nwxVE4q7FUrvrC8hu/0lprfvQrfW7GihLqiAJ8RK8JV4qFfpx+Fh&#xA;9kqqi7HUbO+SRrd+TQyGGeMgq8ci7lHU0KmhBFeoII2IOKpZ5wvBBolwqBZJihIh/ds3EgivGQgY&#xA;qnmKtOiuKMKgEGnupqPxGKrIbeGHl6a05ddyaAdAK9FHYDbFULoczTaVbOxBPpqKrSmyj+VpB+OK&#xA;o7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqp+ggd5YwFlcULb0J7FlB&#xA;FaU+eKqEUdyryfukjeQV9VWLx8h3aM8KE+30nFWo9QDxfAouJ1/vYoWXkvXdlkKFfkdwdsVRBuLc&#xA;TCAyoJmFViLDkR7L17Yqhr/TfrBM9vK1pfBeMd0gr8hIh+GRd+jdKniVO+KpXrmp6zp2j3D3Vqty&#xA;BGVa4tOPdTydoJpI2UeCpJI3tirIcVUrn1+C+iSG9SPlQA1TmOQ3/wAnFUBbQ6hNeRTy3EqJb8hJ&#xA;AVCo7uKFRSlUTbi2/ffFVDy1cXcOjwRajHKl0gAZeEslAAKfFwGKplHqETIrNHMrEAlTDLUE9vs4&#xA;q6PUImRWaOZWIBKmGWoJ7fZxV0eoRMis0cysQCVMMtQT2+zirk1CJhUxzKakUMMvQEgH7Pfriq2G&#xA;/UoTIkobk4A9GX7IYhf2f5aYquTUImFTHMpqRQwy9ASAfs9+uKuTUImFTHMpqRQwy9ASAfs9+uKu&#xA;XUIiWBjmAU0B9GXcUBr9n3pirl1CIlgY5gFNAfRl3FAa/Z96Yqtjv1Lyh0lChgIz6Mu68VP8v81c&#xA;VXDUIuZX05uIAIb0ZaEmtR9ntTFXDUIuZX05uIAIb0ZaEmtR9ntTFXDUIuZX05uIAIb0ZaEmtR9n&#xA;tTFXDUIuZX05uIAIb0ZaEmtR9ntTFVpv19dAEl9IqxY+jL9oFeP7PhXFVx1CLmF9ObiQSW9GWgIp&#xA;QfZ71xVx1CLmF9ObiQSW9GWgIpQfZ71xVzahECoEcxDGhPoy7ChNfs+1MVc2oRAqBHMQxoT6Muwo&#xA;TX7PtTFVsl+oeIIkpUsRIfRl2Xix/l/mpiq5tQiBUCOYhjQn0ZdhQmv2famKufUIlFRHMxqBQQy9&#xA;CQCfs9uuKufUIlFRHMxqBQQy9CQCfs9uuKufUIlFRHMxqBQQy9CQCfs9uuKqdzdwmJnSF3njVjDy&#xA;gkNGptSq4qpySrGzzQvdV3cwGKR1Y9aDmhZa9KBgMVUpr0W3rtBZzcHFQ1vG/PlQksY3QID7ipOK&#xA;oDzVeaiNDmg0xbi5vipoGgnUuprVeccYVT26YqyXFXYqgrp71ZXAZlt6R/HGnJ1+3zoKPyJIUfZ2&#xA;riraW1681rcPcMnAMZ7egKkuoHEEEbK2+9fniqMxV2KuxVSuTOEUw05c05bV+AsA34Yqg7WO+luo&#xA;5pZnVIgecRUqC7ijIKcQVQiqtQ1r1xVMcVdirsVUrszi1mNuQJwjekSOQ50+HaorviqCnj1Ce8aN&#xA;J3hiRw4YJtxUJ8IO1eRLV3PTp4qplirsVdirThyjBCFcg8WIqAexpUVxVL4TqE0wSYvGoVHNF4iq&#xA;+m/2h/M3NSK9O3iqi7OCSC2SKSUzOtaytWpqSe5Y/jiqtirsVdiqXF9QLrHIW+JiBwXirKZWDcmA&#xA;JTjFQp8QqfHFURYWtxbpIs1w1xybkpYEFRQCm5bFUTirsVdiqX3kmookxirX1f3PBKnh6IIBrXYy&#xA;7E7bffiq+ysLi3meSS6eZWBojcqCrVFOTN0Gw7+/SiqNxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KqN1E8iLwLBldD8LFfh5DlWhFfhriqChuNdKASWyK7Dr8ICkKftASP1elKV2riqvePqQtY/q6Az&#xA;OKSUC/CSvUcnUUB9z8jiqnHcaqLF5J4FW6DqqRp8QKkqKj49+p6kYqsgl8wPOFkihhh/d8nI5Egx&#xA;VegEmxEu3y8cVVNMk1c1S/jVQqR8XWlWYr8daM3Q+334qp20mrGFFVQvwR0klUt8RKepyrIr1Hx0&#xA;HH6e2Kom3/STKpnaJCKc1VCaggE0PPam47+OKoXnrEdufQgJkMpKpMVakZHQt6p3B+fyHZVGTR3p&#xA;X4ZR/eRkBF4ngHBYEsWrVfCmKt2nPjJUkp6jekWJJ49+vblWntTFVfFXYq7FXYq7FXYq7FXYq7FX&#xA;/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>215.998702</stDim:w>
            <stDim:h>142.998507</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>MyriadPro-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Myriad Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.037;PS 2.000;hotconv 1.0.51;makeotf.lib2.0.18671</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Groupe de nuances par défaut</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -333.498 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 333.498 li
466.164 333.498 li
466.164 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.5 lw
0 lc
0 lj
2.5 ml
[] 0 dsh
true sadj
43.7212 215.599 mo
47.9443 215.599 li
43.7212 217.157 mo
47.9443 217.157 li
43.7212 218.518 mo
47.9443 218.518 li
43.7212 219.765 mo
47.9443 219.765 li
43.7212 228.496 mo
47.9443 228.496 li
43.7212 233.088 mo
47.9443 233.088 li
43.7212 236.376 mo
47.9443 236.376 li
43.7212 238.956 mo
47.9443 238.956 li
43.7212 241.082 mo
47.9443 241.082 li
43.7212 242.867 mo
47.9443 242.867 li
43.7212 244.427 mo
47.9443 244.427 li
43.7212 245.815 mo
47.9443 245.815 li
43.7212 247.034 mo
47.9443 247.034 li
43.7212 255.766 mo
47.9443 255.766 li
43.7212 260.357 mo
47.9443 260.357 li
43.7212 263.674 mo
47.9443 263.674 li
43.7212 266.253 mo
47.9443 266.253 li
43.7212 268.351 mo
47.9443 268.351 li
43.7212 270.165 mo
47.9443 270.165 li
43.7212 271.725 mo
47.9443 271.725 li
43.7212 273.085 mo
47.9443 273.085 li
43.7212 274.332 mo
47.9443 274.332 li
43.7212 283.063 mo
47.9443 283.063 li
43.7212 287.655 mo
47.9443 287.655 li
43.7212 290.943 mo
47.9443 290.943 li
43.7212 293.522 mo
47.9443 293.522 li
43.7212 295.648 mo
47.9443 295.648 li
43.7212 297.435 mo
47.9443 297.435 li
43.7212 298.993 mo
47.9443 298.993 li
43.7212 300.383 mo
47.9443 300.383 li
43.7212 301.63 mo
47.9443 301.63 li
39.3555 .25 mo
37.2861 .25 li
37.0879 2.09229 li
37.2861 1.89404 li
37.9102 1.66699 li
38.5337 1.66699 li
39.1289 1.89404 li
39.5542 2.29102 li
39.7524 2.91455 li
39.7524 3.31152 li
39.5542 3.93506 li
39.1289 4.35986 li
38.5337 4.55859 li
37.9102 4.55859 li
37.2861 4.35986 li
37.0879 4.1333 li
36.8896 3.73633 li
31.7588 2.71582 mo
35.4438 2.71582 li
27.1665 2.63086 mo
26.1743 2.97119 li
25.5225 3.96338 li
25.1821 5.60742 li
25.1821 6.59961 li
25.5225 8.27197 li
26.1743 9.26416 li
27.1665 9.57568 li
27.8467 9.57568 li
28.8389 9.26416 li
29.4912 8.27197 li
29.8311 6.59961 li
29.8311 5.60742 li
29.4912 3.96338 li
28.8389 2.97119 li
27.8467 2.63086 li
27.1665 2.63086 li
19.5415 3.96338 mo
20.2217 3.62305 li
21.2139 2.63086 li
21.2139 9.57568 li
43.7212 2.60254 mo
52.168 2.60254 li
38.9302 24.543 mo
38.9302 28.8516 li
38.9302 24.543 mo
36.8896 27.4058 li
39.9507 27.4058 li
31.7588 27.0088 mo
35.4438 27.0088 li
27.1665 26.9238 mo
26.1743 27.2642 li
25.5225 28.2563 li
25.1821 29.9004 li
25.1821 30.8926 li
25.5225 32.5649 li
26.1743 33.5571 li
27.1665 33.8687 li
27.8467 33.8687 li
28.8389 33.5571 li
29.4912 32.5649 li
29.8311 30.8926 li
29.8311 29.9004 li
29.4912 28.2563 li
28.8389 27.2642 li
27.8467 26.9238 li
27.1665 26.9238 li
19.5415 28.2563 mo
20.2217 27.916 li
21.2139 26.9238 li
21.2139 33.8687 li
43.7212 29.8721 mo
52.168 29.8721 li
37.2861 51.812 mo
39.5542 51.812 li
38.335 53.4561 li
38.9307 53.4561 li
39.3555 53.6548 li
39.5542 53.8813 li
39.7524 54.4766 li
39.7524 54.9019 li
39.5542 55.5254 li
39.1289 55.9224 li
38.5337 56.1206 li
37.9102 56.1206 li
37.2861 55.9224 li
37.0879 55.7241 li
36.8896 55.2988 li
31.7588 54.2783 mo
35.4438 54.2783 li
27.1665 54.1934 mo
26.1743 54.5332 li
25.5225 55.5254 li
25.1821 57.1978 li
25.1821 58.1899 li
25.5225 59.834 li
26.1743 60.8262 li
27.1665 61.1665 li
27.8467 61.1665 li
28.8389 60.8262 li
29.4912 59.834 li
29.8311 58.1899 li
29.8311 57.1978 li
29.4912 55.5254 li
28.8389 54.5332 li
27.8467 54.1934 li
27.1665 54.1934 li
19.5415 55.5254 mo
20.2217 55.2139 li
21.2139 54.1934 li
21.2139 61.1665 li
43.7212 57.1694 mo
52.168 57.1694 li
37.0879 80.1304 mo
37.0879 79.9316 li
37.2861 79.5068 li
37.5132 79.3081 li
37.9102 79.1099 li
38.7319 79.1099 li
39.1289 79.3081 li
39.3555 79.5068 li
39.5542 79.9316 li
39.5542 80.3286 li
39.3555 80.7539 li
38.9302 81.3491 li
36.8896 83.4185 li
39.7524 83.4185 li
31.7588 81.5762 mo
35.4438 81.5762 li
27.1665 81.4907 mo
26.1743 81.8311 li
25.5225 82.8232 li
25.1821 84.4673 li
25.1821 85.4595 li
25.5225 87.1318 li
26.1743 88.124 li
27.1665 88.4355 li
27.8467 88.4355 li
28.8389 88.124 li
29.4912 87.1318 li
29.8311 85.4595 li
29.8311 84.4673 li
29.4912 82.8232 li
28.8389 81.8311 li
27.8467 81.4907 li
27.1665 81.4907 li
19.5415 82.8232 mo
20.2217 82.4829 li
21.2139 81.4907 li
21.2139 88.436 li
43.7212 84.4673 mo
52.168 84.4673 li
37.5132 107.201 mo
37.9102 107.003 li
38.5337 106.379 li
38.5337 110.688 li
31.7588 108.845 mo
35.4438 108.845 li
27.1665 108.789 mo
26.1743 109.101 li
25.5225 110.092 li
25.1821 111.765 li
25.1821 112.757 li
25.5225 114.401 li
26.1743 115.393 li
27.1665 115.733 li
27.8467 115.733 li
28.8389 115.393 li
29.4912 114.401 li
29.8311 112.757 li
29.8311 111.765 li
29.4912 110.092 li
28.8389 109.101 li
27.8467 108.789 li
27.1665 108.789 li
19.5415 110.093 mo
20.2217 109.781 li
21.2139 108.789 li
21.2139 115.733 li
43.7212 111.737 mo
52.168 111.737 li
38.1084 133.677 mo
37.5132 133.875 li
37.0879 134.499 li
36.8896 135.52 li
36.8896 136.143 li
37.0879 137.164 li
37.5132 137.787 li
38.1084 137.985 li
38.5337 137.985 li
39.1289 137.787 li
39.5542 137.164 li
39.7524 136.143 li
39.7524 135.52 li
39.5542 134.499 li
39.1289 133.875 li
38.5337 133.677 li
38.1084 133.677 li
32.4956 136.058 mo
31.5034 136.398 li
30.8516 137.39 li
30.5117 139.034 li
30.5117 140.026 li
30.8516 141.699 li
31.5034 142.691 li
32.4956 143.003 li
33.1763 143.003 li
34.168 142.691 li
34.8203 141.699 li
35.1602 140.026 li
35.1602 139.034 li
34.8203 137.39 li
34.168 136.398 li
33.1763 136.058 li
32.4956 136.058 li
24.8706 137.39 mo
25.5508 137.05 li
26.543 136.058 li
26.543 143.003 li
43.7212 139.034 mo
52.168 139.034 li
37.5132 161.768 mo
37.9102 161.57 li
38.5337 160.975 li
38.5337 165.255 li
32.4956 163.355 mo
31.5034 163.667 li
30.8516 164.659 li
30.5117 166.332 li
30.5117 167.324 li
30.8516 168.968 li
31.5034 169.96 li
32.4956 170.301 li
33.1763 170.301 li
34.168 169.96 li
34.8203 168.968 li
35.1602 167.324 li
35.1602 166.332 li
34.8203 164.659 li
34.168 163.667 li
33.1763 163.355 li
32.4956 163.355 li
24.8706 164.659 mo
25.5508 164.348 li
26.543 163.355 li
26.543 170.301 li
43.7212 166.304 mo
52.168 166.304 li
37.0879 189.265 mo
37.0879 189.065 li
37.2861 188.669 li
37.5132 188.442 li
37.9102 188.244 li
38.7319 188.244 li
39.1289 188.442 li
39.3555 188.669 li
39.5542 189.065 li
39.5542 189.463 li
39.3555 189.888 li
38.9302 190.512 li
36.8896 192.553 li
39.7524 192.553 li
32.4956 190.625 mo
31.5034 190.965 li
30.8516 191.957 li
30.5117 193.602 li
30.5117 194.594 li
30.8516 196.266 li
31.5034 197.258 li
32.4956 197.599 li
33.1763 197.599 li
34.168 197.258 li
34.8203 196.266 li
35.1602 194.594 li
35.1602 193.602 li
34.8203 191.957 li
34.168 190.965 li
33.1763 190.625 li
32.4956 190.625 li
24.8706 191.957 mo
25.5508 191.617 li
26.543 190.625 li
26.543 197.599 li
43.7212 193.602 mo
52.168 193.602 li
37.2861 215.542 mo
39.5542 215.542 li
38.335 217.157 li
38.9307 217.157 li
39.3555 217.384 li
39.5542 217.582 li
39.7524 218.206 li
39.7524 218.603 li
39.5542 219.227 li
39.1289 219.623 li
38.5337 219.822 li
37.9102 219.822 li
37.2861 219.623 li
37.0879 219.425 li
36.8896 219.028 li
32.4956 217.923 mo
31.5034 218.234 li
30.8516 219.227 li
30.5117 220.899 li
30.5117 221.892 li
30.8516 223.535 li
31.5034 224.527 li
32.4956 224.867 li
33.1763 224.867 li
34.168 224.527 li
34.8203 223.535 li
35.1602 221.892 li
35.1602 220.899 li
34.8203 219.227 li
34.168 218.234 li
33.1763 217.923 li
32.4956 217.923 li
24.8706 219.227 mo
25.5508 218.915 li
26.543 217.923 li
26.543 224.867 li
43.7212 220.871 mo
52.168 220.871 li
38.9302 242.811 mo
38.9302 247.119 li
38.9302 242.811 mo
36.8896 245.674 li
39.9507 245.674 li
32.4956 245.192 mo
31.5034 245.532 li
30.8516 246.524 li
30.5117 248.168 li
30.5117 249.16 li
30.8516 250.833 li
31.5034 251.825 li
32.4956 252.165 li
33.1763 252.165 li
34.168 251.825 li
34.8203 250.833 li
35.1602 249.16 li
35.1602 248.168 li
34.8203 246.524 li
34.168 245.532 li
33.1763 245.192 li
32.4956 245.192 li
24.8706 246.524 mo
25.5508 246.184 li
26.543 245.192 li
26.543 252.165 li
43.7212 248.168 mo
52.168 248.168 li
39.3555 270.108 mo
37.2861 270.108 li
37.0879 271.951 li
37.2861 271.753 li
37.9102 271.525 li
38.5337 271.525 li
39.1289 271.753 li
39.5542 272.149 li
39.7524 272.773 li
39.7524 273.17 li
39.5542 273.794 li
39.1289 274.19 li
38.5337 274.417 li
37.9102 274.417 li
37.2861 274.19 li
37.0879 273.992 li
36.8896 273.595 li
32.4956 272.489 mo
31.5034 272.83 li
30.8516 273.822 li
30.5117 275.466 li
30.5117 276.458 li
30.8516 278.103 li
31.5034 279.123 li
32.4956 279.435 li
33.1763 279.435 li
34.168 279.123 li
34.8203 278.103 li
35.1602 276.458 li
35.1602 275.466 li
34.8203 273.822 li
34.168 272.83 li
33.1763 272.489 li
32.4956 272.489 li
24.8706 273.822 mo
25.5508 273.481 li
26.543 272.489 li
26.543 279.435 li
43.7212 275.438 mo
52.168 275.438 li
39.5542 294.005 mo
39.3555 293.607 li
38.7319 293.381 li
38.335 293.381 li
37.7114 293.607 li
37.2861 294.203 li
37.0879 295.252 li
37.0879 296.272 li
37.2861 297.095 li
37.7114 297.491 li
38.335 297.689 li
38.5337 297.689 li
39.1289 297.491 li
39.5542 297.095 li
39.7524 296.471 li
39.7524 296.272 li
39.5542 295.648 li
39.1289 295.252 li
38.5337 295.025 li
38.335 295.025 li
37.7114 295.252 li
37.2861 295.648 li
37.0879 296.272 li
32.4956 295.79 mo
31.5034 296.103 li
30.8516 297.095 li
30.5117 298.767 li
30.5117 299.759 li
30.8516 301.403 li
31.5034 302.396 li
32.4956 302.735 li
33.1763 302.735 li
34.168 302.396 li
34.8203 301.403 li
35.1602 299.759 li
35.1602 298.767 li
34.8203 297.095 li
34.168 296.103 li
33.1763 295.79 li
32.4956 295.79 li
24.8706 297.095 mo
25.5508 296.782 li
26.543 295.79 li
26.543 302.735 li
43.7212 302.735 mo
52.168 302.735 li
43.7212 302.735 mo
43.7212 2.60254 li
465.914 2.60254 mo
465.914 5.60742 li
450.833 2.60254 mo
450.833 5.60742 li
435.753 2.60254 mo
435.753 5.60742 li
405.593 2.60254 mo
405.593 5.60742 li
390.511 2.60254 mo
390.511 5.60742 li
375.46 2.60254 mo
375.46 5.60742 li
360.38 2.60254 mo
360.38 5.60742 li
330.218 2.60254 mo
330.218 5.60742 li
315.138 2.60254 mo
315.138 5.60742 li
300.058 2.60254 mo
300.058 5.60742 li
284.978 2.60254 mo
284.978 5.60742 li
254.818 2.60254 mo
254.818 5.60742 li
239.737 2.60254 mo
239.737 5.60742 li
224.657 2.60254 mo
224.657 5.60742 li
209.576 2.60254 mo
209.576 5.60742 li
179.416 2.60254 mo
179.416 5.60742 li
164.364 2.60254 mo
164.364 5.60742 li
149.283 2.60254 mo
149.283 5.60742 li
134.203 2.60254 mo
134.203 5.60742 li
104.042 2.60254 mo
104.042 5.60742 li
88.9619 2.60254 mo
88.9619 5.60742 li
73.8818 2.60254 mo
73.8818 5.60742 li
58.8013 2.60254 mo
58.8013 5.60742 li
420.673 2.60254 mo
420.673 8.61182 li
345.3 2.60254 mo
345.3 8.61182 li
269.898 2.60254 mo
269.898 8.61182 li
194.496 2.60254 mo
194.496 8.61182 li
119.123 2.60254 mo
119.123 8.61182 li
43.7212 2.60254 mo
43.7212 8.61182 li
43.7212 2.60254 mo
465.914 2.60254 li
322.226 322.38 mo
322.876 323.06 li
323.558 324.052 li
324.21 325.384 li
324.55 327.028 li
324.55 328.36 li
324.21 330.005 li
323.558 331.677 li
322.876 332.669 li
322.226 333.321 li
316.583 325.044 mo
317.265 324.704 li
318.257 323.712 li
318.257 330.685 li
307.316 327.681 mo
313.267 327.681 li
304.99 327.028 mo
304.679 326.376 li
303.687 326.036 li
302.666 326.036 li
301.673 326.376 li
301.363 327.028 li
301.673 327.681 li
302.355 328.021 li
303.998 328.36 li
304.679 328.673 li
304.99 329.353 li
304.99 329.664 li
304.679 330.345 li
303.687 330.685 li
302.666 330.685 li
301.673 330.345 li
301.363 329.664 li
298.697 330.005 mo
298.386 330.345 li
298.697 330.685 li
299.039 330.345 li
298.697 330.005 li
292.093 323.712 mo
295.722 323.712 li
293.738 326.376 li
294.73 326.376 li
295.38 326.688 li
295.722 327.028 li
296.062 328.021 li
296.062 328.673 li
295.722 329.665 li
295.07 330.345 li
294.078 330.685 li
293.085 330.685 li
292.093 330.345 li
291.753 330.005 li
291.414 329.353 li
283.136 327.681 mo
289.087 327.681 li
276.843 327.368 mo
277.835 326.376 li
278.515 326.036 li
279.507 326.036 li
280.16 326.376 li
280.5 327.368 li
280.5 330.685 li
273.214 327.368 mo
274.207 326.376 li
274.859 326.036 li
275.851 326.036 li
276.501 326.376 li
276.843 327.368 li
276.843 330.685 li
273.214 326.036 mo
273.214 330.685 li
270.89 327.028 mo
270.21 326.376 li
269.558 326.036 li
268.566 326.036 li
267.914 326.376 li
267.234 327.028 li
266.921 328.021 li
266.921 328.673 li
267.234 329.664 li
267.914 330.345 li
268.566 330.685 li
269.558 330.685 li
270.21 330.345 li
270.89 329.664 li
264.91 322.38 mo
264.257 323.06 li
263.605 324.052 li
262.925 325.384 li
262.613 327.028 li
262.613 328.36 li
262.925 330.005 li
263.605 331.677 li
264.257 332.669 li
264.91 333.321 li
251.019 328.021 mo
254.988 328.021 li
254.988 327.368 li
254.648 326.688 li
254.335 326.376 li
253.655 326.036 li
252.663 326.036 li
252.011 326.376 li
251.331 327.028 li
251.019 328.021 li
251.019 328.673 li
251.331 329.665 li
252.011 330.345 li
252.663 330.685 li
253.655 330.685 li
254.335 330.345 li
254.988 329.665 li
246.71 326.036 mo
249.034 326.036 li
247.702 323.712 mo
247.702 329.353 li
248.043 330.345 li
248.694 330.685 li
249.347 330.685 li
243.054 328.021 mo
243.394 327.028 li
244.046 326.376 li
244.726 326.036 li
245.718 326.036 li
243.054 326.036 mo
243.054 330.685 li
236.761 328.021 mo
240.758 328.021 li
240.758 327.368 li
240.417 326.688 li
240.077 326.376 li
239.425 326.036 li
238.433 326.036 li
237.753 326.376 li
237.101 327.028 li
236.761 328.021 li
236.761 328.673 li
237.101 329.665 li
237.753 330.345 li
238.433 330.685 li
239.425 330.685 li
240.077 330.345 li
240.758 329.665 li
230.808 327.028 mo
231.46 326.376 li
232.14 326.036 li
233.132 326.036 li
233.784 326.376 li
234.465 327.028 li
234.776 328.021 li
234.776 328.673 li
234.465 329.664 li
233.784 330.345 li
233.132 330.685 li
232.14 330.685 li
231.46 330.345 li
230.808 329.664 li
230.808 326.036 mo
230.808 333.321 li
219.214 328.021 mo
223.183 328.021 li
223.183 327.368 li
222.871 326.688 li
222.531 326.376 li
221.879 326.036 li
220.858 326.036 li
220.206 326.376 li
219.554 327.028 li
219.214 328.021 li
219.214 328.673 li
219.554 329.665 li
220.206 330.345 li
220.858 330.685 li
221.879 330.685 li
222.531 330.345 li
223.183 329.665 li
216.89 327.028 mo
216.238 326.376 li
215.586 326.036 li
214.565 326.036 li
213.913 326.376 li
213.261 327.028 li
212.921 328.021 li
212.921 328.673 li
213.261 329.664 li
213.913 330.345 li
214.565 330.685 li
215.586 330.685 li
216.238 330.345 li
216.89 329.664 li
216.89 323.712 mo
216.89 330.685 li
205.636 326.036 mo
201.979 330.685 li
201.979 326.036 mo
205.636 330.685 li
199.684 326.036 mo
199.684 330.685 li
196.027 326.036 mo
196.027 329.353 li
196.367 330.345 li
197.019 330.685 li
198.011 330.685 li
198.691 330.345 li
199.684 329.353 li
193.391 327.028 mo
192.71 326.376 li
192.058 326.036 li
191.066 326.036 li
190.414 326.376 li
189.734 327.028 li
189.394 328.021 li
189.394 328.673 li
189.734 329.664 li
190.414 330.345 li
191.066 330.685 li
192.058 330.685 li
192.71 330.345 li
193.391 329.664 li
193.391 326.036 mo
193.391 330.685 li
183.441 323.712 mo
188.09 323.712 li
185.765 323.712 mo
185.765 330.685 li
465.914 302.735 mo
465.914 299.73 li
450.833 302.735 mo
450.833 299.73 li
435.753 302.735 mo
435.753 299.73 li
405.593 302.735 mo
405.593 299.73 li
390.511 302.735 mo
390.511 299.73 li
375.46 302.735 mo
375.46 299.73 li
360.38 302.735 mo
360.38 299.73 li
330.218 302.735 mo
330.218 299.73 li
315.138 302.735 mo
315.138 299.73 li
300.058 302.735 mo
300.058 299.73 li
284.978 302.735 mo
284.978 299.73 li
254.818 302.735 mo
254.818 299.73 li
239.737 302.735 mo
239.737 299.73 li
224.657 302.735 mo
224.657 299.73 li
209.576 302.735 mo
209.576 299.73 li
179.416 302.735 mo
179.416 299.73 li
164.364 302.735 mo
164.364 299.73 li
149.283 302.735 mo
149.283 299.73 li
134.203 302.735 mo
134.203 299.73 li
104.042 302.735 mo
104.042 299.73 li
88.9619 302.735 mo
88.9619 299.73 li
73.8818 302.735 mo
73.8818 299.73 li
58.8013 302.735 mo
58.8013 299.73 li
428.951 308.348 mo
428.326 308.575 li
427.929 309.17 li
427.703 310.219 li
427.703 310.814 li
427.929 311.835 li
428.326 312.458 li
428.951 312.656 li
429.347 312.656 li
429.97 312.458 li
430.367 311.835 li
430.593 310.814 li
430.593 310.219 li
430.367 309.17 li
429.97 308.575 li
429.347 308.348 li
428.951 308.348 li
423.82 309.396 mo
423.82 309.17 li
424.017 308.773 li
424.216 308.575 li
424.642 308.348 li
425.462 308.348 li
425.861 308.575 li
426.087 308.773 li
426.285 309.17 li
426.285 309.595 li
426.087 309.992 li
425.662 310.615 li
423.621 312.656 li
426.484 312.656 li
419.228 310.758 mo
418.236 311.069 li
417.583 312.062 li
417.244 313.733 li
417.244 314.726 li
417.583 316.37 li
418.236 317.362 li
419.228 317.702 li
419.878 317.702 li
420.9 317.362 li
421.552 316.37 li
421.892 314.726 li
421.892 313.733 li
421.552 312.062 li
420.9 311.069 li
419.878 310.758 li
419.228 310.758 li
411.601 312.062 mo
412.283 311.749 li
413.275 310.758 li
413.275 317.702 li
420.673 302.735 mo
420.673 296.726 li
354.796 308.348 mo
352.726 308.348 li
352.527 310.219 li
352.726 309.992 li
353.349 309.794 li
353.974 309.794 li
354.568 309.992 li
354.994 310.417 li
355.193 311.013 li
355.193 311.438 li
354.994 312.062 li
354.568 312.458 li
353.974 312.656 li
353.349 312.656 li
352.726 312.458 li
352.527 312.26 li
352.33 311.835 li
348.843 309.17 mo
349.24 308.972 li
349.863 308.348 li
349.863 312.656 li
343.826 310.758 mo
342.833 311.069 li
342.181 312.062 li
341.841 313.733 li
341.841 314.726 li
342.181 316.37 li
342.833 317.362 li
343.826 317.702 li
344.505 317.702 li
345.498 317.362 li
346.15 316.37 li
346.49 314.726 li
346.49 313.733 li
346.15 312.062 li
345.498 311.069 li
344.505 310.758 li
343.826 310.758 li
336.228 312.062 mo
336.88 311.749 li
337.873 310.758 li
337.873 317.702 li
345.3 302.735 mo
345.3 296.726 li
278.175 308.348 mo
277.55 308.575 li
277.126 309.17 li
276.927 310.219 li
276.927 310.814 li
277.126 311.835 li
277.55 312.458 li
278.175 312.656 li
278.572 312.656 li
279.195 312.458 li
279.591 311.835 li
279.791 310.814 li
279.791 310.219 li
279.591 309.17 li
279.195 308.575 li
278.572 308.348 li
278.175 308.348 li
273.441 309.17 mo
273.867 308.972 li
274.462 308.348 li
274.462 312.656 li
268.453 310.758 mo
267.46 311.069 li
266.779 312.062 li
266.468 313.733 li
266.468 314.726 li
266.779 316.37 li
267.46 317.362 li
268.453 317.702 li
269.105 317.702 li
270.095 317.362 li
270.777 316.37 li
271.087 314.726 li
271.087 313.733 li
270.777 312.062 li
270.095 311.069 li
269.105 310.758 li
268.453 310.758 li
260.828 312.062 mo
261.478 311.749 li
262.5 310.758 li
262.5 317.702 li
269.898 302.735 mo
269.898 296.726 li
201.951 308.348 mo
199.91 308.348 li
199.684 310.219 li
199.91 309.992 li
200.505 309.794 li
201.129 309.794 li
201.753 309.992 li
202.149 310.417 li
202.348 311.013 li
202.348 311.438 li
202.149 312.062 li
201.753 312.458 li
201.129 312.656 li
200.505 312.656 li
199.91 312.458 li
199.684 312.26 li
199.485 311.835 li
195.12 310.758 mo
194.099 311.069 li
193.447 312.062 li
193.107 313.733 li
193.107 314.726 li
193.447 316.37 li
194.099 317.362 li
195.12 317.702 li
195.771 317.702 li
196.764 317.362 li
197.416 316.37 li
197.756 314.726 li
197.756 313.733 li
197.416 312.062 li
196.764 311.069 li
195.771 310.758 li
195.12 310.758 li
187.495 312.062 mo
188.146 311.749 li
189.139 310.758 li
189.139 317.702 li
194.496 302.735 mo
194.496 296.726 li
125.331 308.348 mo
124.707 308.575 li
124.31 309.17 li
124.112 310.219 li
124.112 310.814 li
124.31 311.835 li
124.707 312.458 li
125.331 312.656 li
125.728 312.656 li
126.351 312.458 li
126.776 311.835 li
126.975 310.814 li
126.975 310.219 li
126.776 309.17 li
126.351 308.575 li
125.728 308.348 li
125.331 308.348 li
119.718 310.758 mo
118.726 311.069 li
118.045 312.062 li
117.734 313.733 li
117.734 314.726 li
118.045 316.37 li
118.726 317.362 li
119.718 317.702 li
120.37 317.702 li
121.362 317.362 li
122.042 316.37 li
122.354 314.726 li
122.354 313.733 li
122.042 312.062 li
121.362 311.069 li
120.37 310.758 li
119.718 310.758 li
112.093 312.062 mo
112.773 311.749 li
113.765 310.758 li
113.765 317.702 li
119.123 302.735 mo
119.123 296.726 li
53.8408 308.348 mo
51.7715 308.348 li
51.5728 310.219 li
51.7715 309.992 li
52.395 309.794 li
53.0186 309.794 li
53.6138 309.992 li
54.0391 310.417 li
54.2373 311.013 li
54.2373 311.438 li
54.0391 312.062 li
53.6138 312.458 li
53.0186 312.656 li
52.395 312.656 li
51.7715 312.458 li
51.5728 312.26 li
51.3745 311.835 li
46.2437 310.814 mo
49.9287 310.814 li
41.6519 310.758 mo
40.6597 311.069 li
40.0078 312.062 li
39.6675 313.733 li
39.6675 314.726 li
40.0078 316.37 li
40.6597 317.362 li
41.6519 317.702 li
42.332 317.702 li
43.3242 317.362 li
43.9761 316.37 li
44.3164 314.726 li
44.3164 313.733 li
43.9761 312.062 li
43.3242 311.069 li
42.332 310.758 li
41.6519 310.758 li
34.0264 312.062 mo
34.7065 311.749 li
35.6987 310.758 li
35.6987 317.702 li
43.7212 302.735 mo
43.7212 296.726 li
43.7212 302.735 mo
465.914 302.735 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
465.914 20.6875 mo
461.691 20.6875 li
465.914 22.8135 mo
461.691 22.8135 li
465.914 24.5996 mo
461.691 24.5996 li
465.914 26.1587 mo
461.691 26.1587 li
465.914 27.5474 mo
461.691 27.5474 li
465.914 28.7666 mo
461.691 28.7666 li
465.914 37.4971 mo
461.691 37.4971 li
465.914 42.0894 mo
461.691 42.0894 li
465.914 45.3774 mo
461.691 45.3774 li
465.914 47.957 mo
461.691 47.957 li
465.914 50.083 mo
461.691 50.083 li
465.914 51.8687 mo
461.691 51.8687 li
465.914 53.4277 mo
461.691 53.4277 li
465.914 54.8169 mo
461.691 54.8169 li
465.914 56.064 mo
461.691 56.064 li
465.914 64.7666 mo
461.691 64.7666 li
465.914 69.3584 mo
461.691 69.3584 li
465.914 72.6753 mo
461.691 72.6753 li
465.914 75.2549 mo
461.691 75.2549 li
465.914 77.3809 mo
461.691 77.3809 li
465.914 79.1665 mo
461.691 79.1665 li
465.914 80.7256 mo
461.691 80.7256 li
465.914 82.1147 mo
461.691 82.1147 li
465.914 83.3335 mo
461.691 83.3335 li
465.914 92.064 mo
461.691 92.064 li
465.914 96.6563 mo
461.691 96.6563 li
465.914 99.9443 mo
461.691 99.9443 li
465.914 102.552 mo
461.691 102.552 li
465.914 104.65 mo
461.691 104.65 li
465.914 106.464 mo
461.691 106.464 li
465.914 108.023 mo
461.691 108.023 li
465.914 109.384 mo
461.691 109.384 li
465.914 110.631 mo
461.691 110.631 li
465.914 119.333 mo
461.691 119.333 li
465.914 123.954 mo
461.691 123.954 li
465.914 127.242 mo
461.691 127.242 li
465.914 129.822 mo
461.691 129.822 li
465.914 131.948 mo
461.691 131.948 li
465.914 133.733 mo
461.691 133.733 li
465.914 135.292 mo
461.691 135.292 li
465.914 136.682 mo
461.691 136.682 li
465.914 137.9 mo
461.691 137.9 li
465.914 146.631 mo
461.691 146.631 li
465.914 151.223 mo
461.691 151.223 li
465.914 154.54 mo
461.691 154.54 li
465.914 157.119 mo
461.691 157.119 li
465.914 159.217 mo
461.691 159.217 li
465.914 161.031 mo
461.691 161.031 li
465.914 162.59 mo
461.691 162.59 li
465.914 163.951 mo
461.691 163.951 li
465.914 165.198 mo
461.691 165.198 li
465.914 173.929 mo
461.691 173.929 li
465.914 178.521 mo
461.691 178.521 li
465.914 181.81 mo
461.691 181.81 li
465.914 184.389 mo
461.691 184.389 li
465.914 186.515 mo
461.691 186.515 li
465.914 188.301 mo
461.691 188.301 li
465.914 189.859 mo
461.691 189.859 li
465.914 191.249 mo
461.691 191.249 li
465.914 192.468 mo
461.691 192.468 li
465.914 201.198 mo
461.691 201.198 li
465.914 205.79 mo
461.691 205.79 li
465.914 209.106 mo
461.691 209.106 li
465.914 211.687 mo
461.691 211.687 li
465.914 213.784 mo
461.691 213.784 li
465.914 215.599 mo
461.691 215.599 li
465.914 217.157 mo
461.691 217.157 li
465.914 218.518 mo
461.691 218.518 li
465.914 219.765 mo
461.691 219.765 li
465.914 228.496 mo
461.691 228.496 li
465.914 233.088 mo
461.691 233.088 li
465.914 236.376 mo
461.691 236.376 li
465.914 238.956 mo
461.691 238.956 li
465.914 241.082 mo
461.691 241.082 li
465.914 242.867 mo
461.691 242.867 li
465.914 244.427 mo
461.691 244.427 li
465.914 245.815 mo
461.691 245.815 li
465.914 247.034 mo
461.691 247.034 li
465.914 255.766 mo
461.691 255.766 li
465.914 260.357 mo
461.691 260.357 li
465.914 263.674 mo
461.691 263.674 li
465.914 266.253 mo
461.691 266.253 li
465.914 268.351 mo
461.691 268.351 li
465.914 270.165 mo
461.691 270.165 li
465.914 271.725 mo
461.691 271.725 li
465.914 273.085 mo
461.691 273.085 li
465.914 274.332 mo
461.691 274.332 li
465.914 283.063 mo
461.691 283.063 li
465.914 287.655 mo
461.691 287.655 li
465.914 290.943 mo
461.691 290.943 li
465.914 293.522 mo
461.691 293.522 li
465.914 295.648 mo
461.691 295.648 li
465.914 297.435 mo
461.691 297.435 li
465.914 298.993 mo
461.691 298.993 li
465.914 300.383 mo
461.691 300.383 li
465.914 301.63 mo
461.691 301.63 li
465.914 2.60254 mo
457.466 2.60254 li
465.914 29.8721 mo
457.466 29.8721 li
465.914 57.1694 mo
457.466 57.1694 li
465.914 84.4673 mo
457.466 84.4673 li
465.914 111.737 mo
457.466 111.737 li
465.914 139.034 mo
457.466 139.034 li
465.914 166.304 mo
457.466 166.304 li
465.914 193.602 mo
457.466 193.602 li
465.914 220.871 mo
457.466 220.871 li
465.914 248.168 mo
457.466 248.168 li
465.914 275.438 mo
457.466 275.438 li
465.914 302.735 mo
457.466 302.735 li
465.914 302.735 mo
465.914 2.60254 li
.180664 114.089 mo
.83252 113.409 li
1.82471 112.757 li
3.15723 112.105 li
4.80127 111.765 li
6.1333 111.765 li
7.80615 112.105 li
9.4502 112.757 li
10.4424 113.409 li
11.0942 114.089 li
5.82178 118.058 mo
4.80127 117.718 li
4.14941 117.066 li
3.80908 116.414 li
3.80908 115.394 li
3.80908 118.058 mo
8.45801 118.058 li
4.80127 120.694 mo
4.14941 121.375 li
3.80908 122.026 li
3.80908 123.019 li
4.14941 123.699 li
4.80127 124.351 li
5.82178 124.691 li
6.47363 124.691 li
7.46582 124.351 li
8.11768 123.699 li
8.45801 123.019 li
8.45801 122.026 li
8.11768 121.375 li
7.46582 120.694 li
3.80908 120.694 mo
8.45801 120.694 li
4.80127 130.644 mo
4.14941 129.992 li
3.80908 129.312 li
3.80908 128.319 li
4.14941 127.667 li
4.80127 126.987 li
5.82178 126.675 li
6.47363 126.675 li
7.46582 126.987 li
8.11768 127.667 li
8.45801 128.319 li
8.45801 129.312 li
8.11768 129.992 li
7.46582 130.644 li
1.51318 130.644 mo
8.45801 130.644 li
5.1416 136.937 mo
4.14941 135.944 li
3.80908 135.292 li
3.80908 134.272 li
4.14941 133.62 li
5.1416 133.28 li
8.45801 133.28 li
5.1416 140.565 mo
4.14941 139.573 li
3.80908 138.921 li
3.80908 137.929 li
4.14941 137.277 li
5.1416 136.937 li
8.45801 136.937 li
3.80908 140.565 mo
8.45801 140.565 li
.180664 142.89 mo
.83252 143.57 li
1.82471 144.222 li
3.15723 144.874 li
4.80127 145.214 li
6.1333 145.214 li
7.80615 144.874 li
9.4502 144.222 li
10.4424 143.57 li
11.0942 142.89 li
5.1416 156.808 mo
4.14941 155.815 li
3.80908 155.164 li
3.80908 154.171 li
4.14941 153.491 li
5.1416 153.151 li
8.45801 153.151 li
3.80908 156.808 mo
8.45801 156.808 li
3.80908 161.768 mo
4.14941 162.449 li
4.80127 163.101 li
5.82178 163.44 li
6.47363 163.44 li
7.46582 163.101 li
8.11768 162.449 li
8.45801 161.768 li
8.45801 160.776 li
8.11768 160.124 li
7.46582 159.444 li
6.47363 159.132 li
5.82178 159.132 li
4.80127 159.444 li
4.14941 160.124 li
3.80908 160.776 li
3.80908 161.768 li
3.80908 165.736 mo
8.45801 165.736 li
1.51318 166.077 mo
1.82471 165.736 li
1.51318 165.425 li
1.17285 165.736 li
1.51318 166.077 li
4.80127 168.062 mo
4.14941 168.401 li
3.80908 169.394 li
3.80908 170.386 li
4.14941 171.378 li
4.80127 171.718 li
5.48145 171.378 li
5.82178 170.726 li
6.1333 169.054 li
6.47363 168.401 li
7.12549 168.062 li
7.46582 168.062 li
8.11768 168.401 li
8.45801 169.394 li
8.45801 170.386 li
8.11768 171.378 li
7.46582 171.718 li
4.80127 173.702 mo
4.14941 174.042 li
3.80908 175.034 li
3.80908 176.026 li
4.14941 177.019 li
4.80127 177.33 li
5.48145 177.019 li
5.82178 176.338 li
6.1333 174.694 li
6.47363 174.042 li
7.12549 173.702 li
7.46582 173.702 li
8.11768 174.042 li
8.45801 175.034 li
8.45801 176.026 li
8.11768 177.019 li
7.46582 177.33 li
5.82178 183.312 mo
5.82178 179.343 li
5.1416 179.343 li
4.48926 179.655 li
4.14941 179.995 li
3.80908 180.646 li
3.80908 181.639 li
4.14941 182.319 li
4.80127 182.972 li
5.82178 183.312 li
6.47363 183.312 li
7.46582 182.972 li
8.11768 182.319 li
8.45801 181.639 li
8.45801 180.646 li
8.11768 179.995 li
7.46582 179.343 li
5.82178 187.28 mo
4.80127 186.939 li
4.14941 186.288 li
3.80908 185.636 li
3.80908 184.615 li
3.80908 187.28 mo
8.45801 187.28 li
1.51318 194.225 mo
1.51318 191.249 li
1.82471 190.257 li
2.16504 189.916 li
2.81689 189.604 li
3.80908 189.604 li
4.48926 189.916 li
4.80127 190.257 li
5.1416 191.249 li
5.1416 194.225 li
1.51318 194.225 mo
8.45801 194.225 li
43.7212 10.1992 mo
47.9443 10.1992 li
43.7212 14.7915 mo
47.9443 14.7915 li
43.7212 18.1079 mo
47.9443 18.1079 li
43.7212 20.6875 mo
47.9443 20.6875 li
43.7212 22.8135 mo
47.9443 22.8135 li
43.7212 24.5996 mo
47.9443 24.5996 li
43.7212 26.1587 mo
47.9443 26.1587 li
43.7212 27.5474 mo
47.9443 27.5474 li
43.7212 28.7666 mo
47.9443 28.7666 li
43.7212 37.4971 mo
47.9443 37.4971 li
43.7212 42.0894 mo
47.9443 42.0894 li
43.7212 45.3774 mo
47.9443 45.3774 li
43.7212 47.957 mo
47.9443 47.957 li
43.7212 50.083 mo
47.9443 50.083 li
43.7212 51.8687 mo
47.9443 51.8687 li
43.7212 53.4277 mo
47.9443 53.4277 li
43.7212 54.8169 mo
47.9443 54.8169 li
43.7212 56.064 mo
47.9443 56.064 li
43.7212 64.7666 mo
47.9443 64.7666 li
43.7212 69.3584 mo
47.9443 69.3584 li
43.7212 72.6753 mo
47.9443 72.6753 li
43.7212 75.2549 mo
47.9443 75.2549 li
43.7212 77.3809 mo
47.9443 77.3809 li
43.7212 79.1665 mo
47.9443 79.1665 li
43.7212 80.7256 mo
47.9443 80.7256 li
43.7212 82.1147 mo
47.9443 82.1147 li
43.7212 83.3335 mo
47.9443 83.3335 li
43.7212 92.064 mo
47.9443 92.064 li
43.7212 96.6563 mo
47.9443 96.6563 li
43.7212 99.9443 mo
47.9443 99.9443 li
43.7212 102.552 mo
47.9443 102.552 li
43.7212 104.65 mo
47.9443 104.65 li
43.7212 106.464 mo
47.9443 106.464 li
43.7212 108.023 mo
47.9443 108.023 li
43.7212 109.384 mo
47.9443 109.384 li
43.7212 110.631 mo
47.9443 110.631 li
43.7212 119.333 mo
47.9443 119.333 li
43.7212 123.954 mo
47.9443 123.954 li
43.7212 127.242 mo
47.9443 127.242 li
43.7212 129.822 mo
47.9443 129.822 li
43.7212 131.948 mo
47.9443 131.948 li
43.7212 133.733 mo
47.9443 133.733 li
43.7212 135.292 mo
47.9443 135.292 li
43.7212 136.682 mo
47.9443 136.682 li
43.7212 137.9 mo
47.9443 137.9 li
43.7212 146.631 mo
47.9443 146.631 li
43.7212 151.223 mo
47.9443 151.223 li
43.7212 154.54 mo
47.9443 154.54 li
43.7212 157.119 mo
47.9443 157.119 li
43.7212 159.217 mo
47.9443 159.217 li
43.7212 161.031 mo
47.9443 161.031 li
43.7212 162.59 mo
47.9443 162.59 li
43.7212 163.951 mo
47.9443 163.951 li
43.7212 165.198 mo
47.9443 165.198 li
43.7212 173.929 mo
47.9443 173.929 li
43.7212 178.521 mo
47.9443 178.521 li
43.7212 181.81 mo
47.9443 181.81 li
43.7212 184.389 mo
47.9443 184.389 li
43.7212 186.515 mo
47.9443 186.515 li
43.7212 188.301 mo
47.9443 188.301 li
43.7212 189.859 mo
47.9443 189.859 li
43.7212 191.249 mo
47.9443 191.249 li
43.7212 192.468 mo
47.9443 192.468 li
43.7212 201.198 mo
47.9443 201.198 li
43.7212 205.79 mo
47.9443 205.79 li
43.7212 209.106 mo
47.9443 209.106 li
43.7212 211.687 mo
47.9443 211.687 li
43.7212 213.784 mo
47.9443 213.784 li
@
465.914 10.1992 mo
461.691 10.1992 li
465.914 14.7915 mo
461.691 14.7915 li
465.914 18.1079 mo
461.691 18.1079 li
@
465.914 288.42 mo
465.83 288.363 li
464.212 287.627 li
462.626 286.918 li
460.839 286.351 li
459.054 285.728 li
457.353 285.075 li
455.482 284.48 li
453.611 283.885 li
451.826 283.176 li
450.351 282.213 li
448.878 281.249 li
447.431 280.257 li
445.958 279.293 li
444.484 278.301 li
443.095 277.195 li
441.707 276.09 li
440.289 274.984 li
438.9 273.879 li
437.539 272.773 li
436.236 271.64 li
434.902 270.505 li
433.57 269.343 li
432.21 268.181 li
431.019 266.934 li
429.771 265.687 li
428.525 264.411 li
427.25 263.163 li
425.974 261.859 li
424.642 260.584 li
423.138 259.365 li
421.693 258.118 li
420.248 256.757 li
418.943 255.283 li
417.498 253.781 li
415.996 252.307 li
414.351 250.861 li
412.396 249.558 li
410.412 248.253 li
408.371 246.949 li
406.3 245.646 li
404.146 244.37 li
401.964 243.094 li
399.781 241.818 li
397.542 240.543 li
395.302 239.268 li
392.951 238.021 li
390.597 236.745 li
388.273 235.497 li
385.919 234.25 li
383.482 232.975 li
381.128 231.756 li
378.748 230.509 li
376.339 229.261 li
373.958 228.014 li
371.462 226.767 li
369.025 225.491 li
366.673 224.188 li
364.433 222.911 li
362.166 221.636 li
359.898 220.332 li
357.658 219 li
355.39 217.667 li
353.066 216.307 li
350.714 214.975 li
348.248 213.614 li
345.697 212.225 li
343.089 210.808 li
340.48 209.391 li
337.673 207.973 li
334.669 206.471 li
331.58 204.939 li
328.519 203.466 li
325.23 201.879 li
321.97 200.319 li
318.71 198.732 li
315.082 197.088 li
311.568 195.415 li
307.939 193.771 li
304.226 192.042 li
300.625 190.313 li
297.337 188.612 li
294.162 186.911 li
291.015 185.211 li
288.294 183.538 li
285.8 181.895 li
283.787 180.335 li
281.974 178.776 li
280.414 177.217 li
278.998 175.602 li
277.779 173.957 li
276.757 172.342 li
275.908 170.697 li
275.142 169.053 li
274.462 167.438 li
273.781 165.85 li
273.185 164.263 li
272.619 162.675 li
272.08 161.088 li
271.599 159.557 li
271.173 158.026 li
270.748 156.524 li
270.38 155.021 li
270.068 153.633 li
269.699 152.215 li
269.332 150.798 li
268.906 149.381 li
268.48 147.963 li
267.998 146.546 li
267.46 145.101 li
266.921 143.655 li
266.355 142.209 li
265.759 140.763 li
265.136 139.318 li
264.001 137.532 li
263.236 136.001 li
262.5 134.499 li
261.763 132.968 li
260.968 131.466 li
260.119 129.963 li
259.267 128.461 li
258.417 126.958 li
257.396 125.343 li
256.234 123.67 li
255.101 121.97 li
253.796 120.155 li
252.38 118.285 li
250.962 116.385 li
249.403 114.344 li
247.844 112.332 li
246.03 110.121 li
244.159 107.853 li
241.977 105.387 li
239.681 102.779 li
237.242 100.086 li
234.975 97.4785 li
232.764 94.8989 li
230.524 92.3193 li
228.313 89.7114 li
226.216 87.2168 li
224.288 84.8359 li
222.672 82.6533 li
221.057 80.4985 li
219.639 78.543 li
218.166 76.5586 li
216.805 74.8013 li
215.643 73.2705 li
214.31 71.7681 li
212.779 70.2373 li
211.022 68.7632 li
209.236 67.4312 li
207.139 66.127 li
204.757 64.7949 li
202.064 63.4624 li
199.145 62.1587 li
196.112 60.9111 li
193.022 59.7773 li
189.762 58.6152 li
186.446 57.4814 li
182.874 56.2627 li
179.302 55.1001 li
175.901 54.0513 li
172.527 53.0024 li
169.296 51.9253 li
166.149 50.8765 li
163.202 49.856 li
160.48 48.9209 li
157.901 47.957 li
155.491 47.0215 li
153.195 46.0576 li
151.041 45.1221 li
149.17 44.3286 li
147.441 43.5063 li
145.769 42.7129 li
144.209 41.9189 li
142.679 41.0972 li
141.375 40.3887 li
140.099 39.6797 li
138.852 38.9712 li
137.661 38.2627 li
136.499 37.5537 li
135.479 36.9302 li
134.486 36.335 li
133.522 35.7397 li
132.587 35.1445 li
131.624 34.5488 li
130.773 34.0103 li
129.923 33.4717 li
129.044 32.9331 li
128.165 32.3662 li
127.287 31.8276 li
126.634 31.4595 li
126.011 31.0908 li
125.359 30.7222 li
124.735 30.3252 li
124.055 29.9287 li
123.318 29.5034 li
122.553 29.0781 li
121.815 28.6528 li
121.079 28.2275 li
120.455 27.8877 li
119.803 27.5757 li
119.179 27.2358 li
118.527 26.8955 li
117.847 26.5552 li
117.167 26.2153 li
116.458 25.875 li
115.75 25.5347 li
115.012 25.1665 li
114.304 24.8262 li
113.539 24.4858 li
112.773 24.146 li
112.008 23.8057 li
111.214 23.4941 li
110.392 23.1538 li
109.655 22.8701 li
109.003 22.6719 li
108.351 22.4453 li
107.728 22.2466 li
107.075 22.02 li
106.423 21.7646 li
105.743 21.5381 li
105.12 21.3394 li
104.496 21.1694 li
103.844 20.9712 li
103.192 20.7725 li
102.512 20.5742 li
101.774 20.3477 li
101.038 20.1206 li
100.272 19.894 li
99.4785 19.6387 li
98.6846 19.4121 li
97.8345 19.1567 li
96.9839 18.9302 li
96.2471 18.7603 li
95.4531 18.5898 li
94.6597 18.4482 li
93.9229 18.335 li
93.1855 18.2217 li
92.4204 18.1079 li
91.6548 18.0229 li
90.8613 17.9097 li
90.0107 17.7681 li
89.0752 17.5693 li
88.1401 17.3994 li
87.2612 17.2578 li
86.354 17.1445 li
85.4185 17.0308 li
84.3696 16.8325 li
83.2642 16.6338 li
82.1587 16.4922 li
81.0532 16.3506 li
79.8911 16.209 li
78.6724 16.0386 li
77.3682 15.8687 li
76.0078 15.7554 li
74.647 15.6138 li
73.2012 15.5 li
71.5571 15.3301 li
69.8564 15.1885 li
68.0991 15.0469 li
66.2563 14.9331 li
64.2437 14.8481 li
62.1743 14.7632 li
59.9917 14.7065 li
57.5825 14.5933 li
54.8896 14.4795 li
52.1113 14.3945 li
49.1353 14.3379 li
45.8755 14.2529 li
43.7212 14.1963 li
@
[5.6693 2.83465 1.41733 2.83465 ] 0 dsh
43.7212 113.891 mo
62.77 112.332 li
83.8311 110.121 li
101.52 107.853 li
115.608 105.387 li
127.201 102.779 li
136.556 100.086 li
144.096 97.4785 li
150.105 94.8989 li
154.584 92.3193 li
158.127 89.7114 li
160.934 87.2168 li
163.287 84.8359 li
165.328 82.6533 li
167.028 80.499 li
168.502 78.543 li
169.665 76.5586 li
170.458 74.8013 li
171.053 73.2705 li
171.309 71.7681 li
171.224 70.2373 li
170.742 68.7632 li
169.948 67.4312 li
168.729 66.127 li
167.142 64.7949 li
165.214 63.4624 li
162.946 62.1587 li
160.48 60.9111 li
157.873 59.7773 li
155.066 58.6152 li
152.146 57.4814 li
148.972 56.2627 li
145.769 55.1006 li
142.622 54.0518 li
139.532 53.0029 li
136.499 51.9258 li
133.608 50.877 li
130.83 49.8564 li
128.25 48.9209 li
125.813 47.957 li
123.545 47.0215 li
121.362 46.0576 li
119.321 45.1226 li
117.507 44.3286 li
115.778 43.5068 li
114.162 42.7129 li
112.603 41.9189 li
111.129 41.0972 li
109.797 40.3887 li
108.464 39.6797 li
107.189 38.9712 li
105.941 38.2627 li
104.751 37.5537 li
103.617 36.9302 li
102.54 36.335 li
101.491 35.7397 li
100.442 35.1445 li
99.4219 34.5493 li
98.458 34.0107 li
97.4375 33.4722 li
96.4453 32.9336 li
95.4531 32.3662 li
94.4614 31.8276 li
93.6108 31.4595 li
92.7603 31.0908 li
91.9102 30.7222 li
91.0879 30.3257 li
90.2378 29.9287 li
89.3306 29.5034 li
88.4233 29.0781 li
87.5444 28.6528 li
86.6377 28.228 li
85.8154 27.8877 li
84.9653 27.5757 li
84.1431 27.2358 li
83.3208 26.8955 li
82.4424 26.5552 li
81.5635 26.2153 li
80.7129 25.875 li
79.8345 25.5352 li
78.9272 25.1665 li
78.0483 24.8262 li
77.1416 24.4863 li
76.2061 24.146 li
75.2705 23.8057 li
74.335 23.4941 li
73.3716 23.1538 li
72.436 22.8701 li
71.5571 22.6719 li
70.6499 22.4453 li
69.8281 22.2466 li
68.9775 22.02 li
68.0991 21.7646 li
67.2485 21.5381 li
66.3979 21.3398 li
65.5479 21.1694 li
64.6689 20.9712 li
63.8184 20.7725 li
62.9399 20.5742 li
62.0327 20.3477 li
61.1255 20.1206 li
60.1904 19.894 li
59.2266 19.6387 li
58.2627 19.4121 li
57.2705 19.1567 li
56.2783 18.9302 li
55.3145 18.7603 li
54.3223 18.5898 li
53.3306 18.4482 li
52.3384 18.335 li
51.3745 18.2217 li
50.3823 18.1079 li
49.3901 18.0229 li
48.3696 17.9097 li
47.3208 17.7681 li
46.2437 17.5693 li
45.1382 17.3994 li
44.061 17.2578 li
43.7207 17.2295 li
@
[1.13386 2.83465 ] 0 dsh
43.7212 101.192 mo
57.1855 100.086 li
83.2358 97.4785 li
103.929 94.8989 li
119.463 92.3193 li
131.652 89.7114 li
141.176 87.2168 li
148.603 84.8359 li
154.471 82.6533 li
159.035 80.499 li
162.606 78.543 li
165.299 76.5586 li
167.142 74.8013 li
168.531 73.2705 li
169.409 71.7681 li
169.778 70.2373 li
169.665 68.7632 li
169.154 67.4312 li
168.19 66.127 li
166.801 64.7949 li
165.016 63.4624 li
162.89 62.1587 li
160.537 60.9111 li
157.986 59.7773 li
155.265 58.6152 li
152.43 57.4814 li
149.312 56.2627 li
146.165 55.1006 li
143.047 54.0518 li
139.986 53.0029 li
137.009 51.9258 li
134.118 50.877 li
131.396 49.8564 li
128.846 48.9209 li
126.436 47.957 li
124.168 47.0215 li
122.014 46.0576 li
120.001 45.1226 li
118.159 44.3286 li
116.458 43.5068 li
114.842 42.7129 li
113.312 41.9189 li
111.837 41.0972 li
110.505 40.3887 li
109.173 39.6797 li
107.897 38.9712 li
106.679 38.2627 li
105.488 37.5537 li
104.354 36.9302 li
103.305 36.335 li
102.256 35.7397 li
101.208 35.1445 li
100.187 34.5493 li
99.2236 34.0107 li
98.2031 33.4722 li
97.2109 32.9336 li
96.2471 32.3662 li
95.2549 31.8276 li
94.376 31.4595 li
93.5259 31.0908 li
92.7036 30.7222 li
91.8535 30.3257 li
91.0029 29.9287 li
90.124 29.5034 li
89.2173 29.0781 li
88.3384 28.6528 li
87.4312 28.228 li
86.6094 27.8877 li
85.7588 27.5757 li
84.9365 27.2358 li
84.1147 26.8955 li
83.2358 26.5552 li
82.3857 26.2153 li
81.5068 25.875 li
80.6279 25.5352 li
79.7495 25.1665 li
78.8423 24.8262 li
77.9351 24.4863 li
77.0278 24.146 li
76.0928 23.8057 li
75.1289 23.4941 li
74.165 23.1538 li
73.2295 22.8701 li
72.3511 22.6719 li
71.4722 22.4453 li
70.6216 22.2466 li
69.7715 22.02 li
68.8926 21.7646 li
68.042 21.5381 li
67.1919 21.3398 li
66.3413 21.1694 li
65.4624 20.9712 li
64.6123 20.7725 li
63.7334 20.5742 li
62.8262 20.3477 li
61.9194 20.1206 li
60.9556 19.894 li
60.02 19.6387 li
59.0278 19.4121 li
58.0356 19.1567 li
57.0439 18.9302 li
56.0801 18.7603 li
55.0879 18.5898 li
54.0674 18.4482 li
53.0752 18.335 li
52.1113 18.2217 li
51.1191 18.1079 li
50.0986 18.0229 li
49.0781 17.9097 li
48.0293 17.7681 li
46.9238 17.5693 li
45.8184 17.3994 li
44.7129 17.2578 li
43.7207 17.1729 li
@
[5.6693 5.6693 ] 0 dsh
465.914 299.306 mo
464.751 298.908 li
463.164 298.313 li
461.378 297.916 li
459.48 297.604 li
457.666 297.151 li
455.878 296.669 li
454.064 296.188 li
452.166 295.733 li
450.267 295.252 li
448.367 294.798 li
446.382 294.316 li
444.398 293.862 li
442.472 293.268 li
440.601 292.729 li
438.417 292.332 li
436.263 291.851 li
434.166 291.34 li
432.068 290.802 li
429.943 290.263 li
427.902 289.667 li
425.832 289.072 li
423.847 288.363 li
421.863 287.627 li
419.908 286.918 li
417.583 286.351 li
415.343 285.728 li
413.189 285.075 li
410.781 284.48 li
408.341 283.885 li
406.103 283.176 li
404.431 282.212 li
402.757 281.249 li
401.085 280.257 li
399.384 279.293 li
397.74 278.301 li
396.238 277.195 li
394.707 276.09 li
393.205 274.984 li
391.673 273.878 li
390.228 272.772 li
388.869 271.639 li
387.451 270.505 li
386.062 269.343 li
384.644 268.181 li
383.539 266.934 li
382.376 265.687 li
381.187 264.411 li
379.939 263.163 li
378.777 261.859 li
377.558 260.584 li
376.056 259.365 li
374.638 258.118 li
373.333 256.757 li
372.398 255.283 li
371.349 253.78 li
370.16 252.307 li
368.771 250.861 li
366.814 249.557 li
364.802 248.253 li
362.732 246.949 li
360.607 245.646 li
358.339 244.37 li
356.015 243.094 li
353.662 241.818 li
351.281 240.543 li
348.843 239.268 li
346.263 238.021 li
343.656 236.744 li
341.048 235.497 li
338.382 234.25 li
335.605 232.975 li
332.884 231.756 li
330.162 230.508 li
327.328 229.261 li
324.521 228.014 li
321.544 226.767 li
318.597 225.491 li
315.763 224.187 li
313.041 222.911 li
310.291 221.636 li
307.513 220.332 li
304.736 219 li
301.902 217.667 li
298.982 216.307 li
295.976 214.975 li
292.859 213.613 li
289.599 212.225 li
286.253 210.808 li
282.88 209.39 li
279.251 207.973 li
275.339 206.471 li
271.287 204.939 li
267.291 203.466 li
262.982 201.878 li
258.701 200.319 li
254.421 198.731 li
249.63 197.088 li
244.981 195.415 li
240.134 193.771 li
235.145 192.042 li
230.241 190.313 li
225.875 188.612 li
221.51 186.911 li
216.975 185.211 li
213.148 183.538 li
209.35 181.894 li
206.26 180.335 li
203.142 178.776 li
199.995 177.217 li
196.679 175.601 li
193.306 173.957 li
190.074 172.341 li
186.814 170.697 li
183.554 169.053 li
180.464 167.438 li
177.29 165.85 li
174.313 164.263 li
171.479 162.675 li
168.644 161.088 li
166.036 159.557 li
163.712 158.026 li
161.359 156.524 li
159.205 155.021 li
157.419 153.632 li
155.661 152.215 li
153.875 150.798 li
152.146 149.38 li
150.36 147.963 li
148.546 146.546 li
146.675 145.1 li
144.805 143.655 li
142.934 142.209 li
141.063 140.763 li
139.164 139.317 li
135.847 137.532 li
133.58 136.001 li
131.539 134.499 li
129.469 132.968 li
127.343 131.465 li
125.161 129.963 li
122.978 128.461 li
120.795 126.958 li
118.216 125.343 li
115.324 123.67 li
112.376 121.97 li
109.088 120.155 li
105.517 118.285 li
101.888 116.385 li
97.8628 114.344 li
93.8091 112.332 li
89.1323 110.121 li
84.2847 107.853 li
78.5874 105.387 li
72.4644 102.779 li
66.0581 100.086 li
59.9351 97.478 li
54.0107 94.8984 li
47.9731 92.3188 li
43.7212 90.5049 li
@
.85 lw
[5.6693 2.83465 1.41733 2.83465 ] 0 dsh
465.914 288.42 mo
465.83 288.363 li
464.212 287.627 li
462.626 286.918 li
460.812 286.351 li
459.054 285.728 li
457.353 285.075 li
455.482 284.48 li
453.611 283.885 li
451.796 283.176 li
450.351 282.213 li
448.878 281.249 li
447.431 280.257 li
445.929 279.293 li
444.484 278.301 li
443.095 277.195 li
441.677 276.09 li
440.289 274.984 li
438.9 273.879 li
437.539 272.773 li
436.236 271.64 li
434.902 270.505 li
433.542 269.343 li
432.21 268.181 li
431.019 266.934 li
429.771 265.687 li
428.525 264.411 li
427.22 263.163 li
425.945 261.859 li
424.642 260.584 li
423.138 259.365 li
421.693 258.118 li
420.248 256.757 li
418.916 255.283 li
417.498 253.781 li
415.996 252.307 li
414.324 250.861 li
412.396 249.558 li
410.412 248.253 li
408.371 246.949 li
406.3 245.646 li
404.146 244.37 li
401.964 243.094 li
399.753 241.818 li
397.542 240.543 li
395.302 239.268 li
392.951 238.021 li
390.597 236.745 li
388.273 235.497 li
385.919 234.25 li
383.455 232.975 li
381.128 231.756 li
378.748 230.509 li
376.339 229.261 li
373.958 228.014 li
371.462 226.767 li
369.025 225.491 li
366.673 224.188 li
364.433 222.911 li
362.166 221.636 li
359.898 220.332 li
357.658 219 li
355.39 217.667 li
353.066 216.307 li
350.714 214.975 li
348.248 213.614 li
345.697 212.225 li
343.089 210.808 li
340.48 209.391 li
337.673 207.973 li
334.669 206.471 li
331.58 204.939 li
328.519 203.466 li
325.23 201.879 li
321.97 200.319 li
318.71 198.732 li
315.082 197.088 li
311.568 195.415 li
307.939 193.771 li
304.226 192.042 li
300.625 190.313 li
297.337 188.612 li
294.162 186.911 li
291.015 185.211 li
288.294 183.538 li
285.8 181.895 li
283.787 180.335 li
281.974 178.776 li
280.414 177.217 li
278.998 175.602 li
277.779 173.957 li
276.757 172.342 li
275.908 170.697 li
275.142 169.053 li
274.462 167.438 li
273.781 165.85 li
273.185 164.263 li
272.619 162.675 li
272.08 161.088 li
271.599 159.557 li
271.173 158.026 li
270.748 156.524 li
270.38 155.021 li
270.068 153.633 li
269.699 152.215 li
269.332 150.798 li
268.906 149.381 li
268.48 147.963 li
267.998 146.546 li
267.46 145.101 li
266.921 143.655 li
266.355 142.209 li
265.759 140.763 li
265.136 139.318 li
264.001 137.532 li
263.236 136.001 li
262.5 134.499 li
261.763 132.968 li
260.968 131.466 li
260.119 129.963 li
259.267 128.461 li
258.417 126.958 li
257.396 125.343 li
256.234 123.67 li
255.101 121.97 li
253.796 120.155 li
252.38 118.285 li
250.962 116.385 li
249.403 114.344 li
247.844 112.332 li
246.03 110.121 li
244.159 107.853 li
241.977 105.387 li
239.681 102.779 li
237.242 100.086 li
234.975 97.4785 li
232.764 94.8989 li
230.524 92.3193 li
228.313 89.7114 li
226.216 87.2168 li
224.288 84.8359 li
222.672 82.6533 li
221.028 80.4985 li
219.639 78.543 li
218.166 76.5586 li
216.776 74.8013 li
215.614 73.2705 li
214.282 71.7681 li
212.751 70.2373 li
211.022 68.7632 li
209.208 67.4312 li
207.11 66.127 li
204.701 64.7949 li
202.036 63.4624 li
199.088 62.1587 li
196.055 60.9111 li
192.937 59.7773 li
189.706 58.6152 li
186.36 57.4814 li
182.761 56.2627 li
179.217 55.1001 li
175.787 54.0513 li
172.442 53.0024 li
169.183 51.9253 li
166.036 50.8765 li
163.088 49.856 li
160.367 48.9209 li
157.787 47.957 li
155.378 47.0215 li
153.082 46.0576 li
150.927 45.1221 li
149.057 44.3286 li
147.299 43.5063 li
145.655 42.7129 li
144.067 41.9189 li
142.565 41.0972 li
141.261 40.3887 li
139.986 39.6797 li
138.738 38.9712 li
137.548 38.2627 li
136.386 37.5537 li
135.337 36.9302 li
134.373 36.335 li
133.409 35.7397 li
132.474 35.1445 li
131.51 34.5488 li
130.66 34.0103 li
129.809 33.4717 li
128.931 32.9331 li
128.052 32.3662 li
127.173 31.8276 li
126.549 31.4595 li
125.897 31.0908 li
125.274 30.7222 li
124.65 30.3252 li
123.941 29.9287 li
123.233 29.5034 li
122.496 29.0781 li
121.73 28.6528 li
120.994 28.2275 li
120.37 27.8877 li
119.746 27.5757 li
119.094 27.2358 li
118.442 26.8955 li
117.762 26.5552 li
117.082 26.2153 li
116.373 25.875 li
115.665 25.5347 li
114.956 25.1665 li
114.219 24.8262 li
113.481 24.4858 li
112.716 24.146 li
111.951 23.8057 li
111.157 23.4941 li
110.335 23.1538 li
109.598 22.8701 li
108.946 22.6719 li
108.294 22.4453 li
107.699 22.2466 li
107.019 22.02 li
106.367 21.7646 li
105.715 21.5381 li
105.091 21.3394 li
104.439 21.1694 li
103.787 20.9712 li
103.135 20.7725 li
102.483 20.5742 li
101.746 20.3477 li
101.009 20.1206 li
100.244 19.894 li
99.4502 19.6387 li
98.6279 19.4121 li
97.8062 19.1567 li
96.9556 18.9302 li
96.2188 18.7603 li
95.4248 18.5898 li
94.6313 18.4482 li
93.894 18.335 li
93.1572 18.2217 li
92.3921 18.1079 li
91.6265 18.0229 li
90.8613 17.9097 li
89.9824 17.7681 li
89.0752 17.5693 li
88.1396 17.3994 li
87.2329 17.2578 li
86.3257 17.1445 li
85.3901 17.0308 li
84.3413 16.8325 li
83.2358 16.6338 li
82.1587 16.4922 li
81.0249 16.3506 li
79.8911 16.209 li
78.6436 16.0386 li
77.3398 15.8687 li
76.0078 15.7554 li
74.6187 15.6138 li
73.1729 15.5 li
71.5571 15.3301 li
69.8564 15.1885 li
68.0703 15.0469 li
66.228 14.9331 li
64.2437 14.8481 li
62.1743 14.7632 li
59.9917 14.7065 li
57.5542 14.5933 li
54.8896 14.4795 li
52.1113 14.3945 li
49.1353 14.3379 li
45.875 14.2529 li
43.7207 14.1963 li
@
.5 lw
[11.3386 5.6693 ] 0 dsh
451.343 302.735 mo
450.578 302.424 li
449.275 301.8 li
447.97 301.262 li
446.609 300.808 li
445.277 300.326 li
443.888 299.9 li
442.472 299.447 li
441.082 298.908 li
439.666 298.313 li
438.218 297.916 li
436.689 297.604 li
435.187 297.151 li
433.683 296.669 li
432.154 296.188 li
430.593 295.733 li
429.007 295.252 li
427.419 294.798 li
425.775 294.316 li
424.13 293.862 li
422.515 293.268 li
420.927 292.729 li
419.169 292.332 li
417.384 291.851 li
415.683 291.34 li
413.925 290.802 li
412.14 290.263 li
410.439 289.667 li
408.683 289.072 li
406.982 288.363 li
405.281 287.627 li
403.609 286.918 li
401.681 286.351 li
399.81 285.728 li
397.996 285.075 li
396.011 284.48 li
394 283.885 li
392.099 283.176 li
390.597 282.212 li
389.039 281.249 li
387.507 280.257 li
385.976 279.293 li
384.417 278.301 li
383 277.195 li
381.527 276.09 li
380.052 274.984 li
378.607 273.878 li
377.162 272.772 li
375.8 271.639 li
374.382 270.505 li
372.966 269.343 li
371.548 268.181 li
370.244 266.934 li
368.912 265.687 li
367.552 264.411 li
366.134 263.163 li
364.689 261.859 li
363.185 260.584 li
361.542 259.365 li
359.869 258.118 li
358.197 256.757 li
356.582 255.283 li
354.853 253.78 li
353.039 252.307 li
351.082 250.861 li
348.9 249.557 li
346.716 248.253 li
344.478 246.949 li
342.238 245.646 li
339.941 244.37 li
337.617 243.094 li
335.292 241.818 li
332.941 240.543 li
330.617 239.268 li
328.177 238.021 li
325.74 236.744 li
323.332 235.497 li
320.865 234.25 li
318.341 232.975 li
315.904 231.756 li
313.466 230.508 li
310.972 229.261 li
308.505 228.014 li
305.898 226.767 li
303.375 225.491 li
300.91 224.187 li
298.583 222.911 li
296.232 221.636 li
293.878 220.332 li
291.554 219 li
289.144 217.667 li
286.736 216.307 li
284.242 214.975 li
281.662 213.613 li
278.968 212.225 li
276.218 210.808 li
273.47 209.39 li
270.494 207.973 li
267.291 206.471 li
263.974 204.939 li
260.714 203.466 li
257.226 201.878 li
253.769 200.319 li
250.282 198.731 li
246.398 197.088 li
242.628 195.415 li
238.745 193.771 li
234.776 192.042 li
230.893 190.313 li
227.378 188.612 li
224.005 186.911 li
220.631 185.211 li
217.74 183.538 li
215.076 181.894 li
212.921 180.335 li
210.994 178.776 li
209.293 177.217 li
207.734 175.601 li
206.373 173.957 li
205.239 172.341 li
204.247 170.697 li
203.34 169.053 li
202.546 167.438 li
201.752 165.85 li
201.044 164.263 li
200.392 162.675 li
199.74 161.088 li
199.173 159.557 li
198.691 158.026 li
198.209 156.524 li
197.756 155.021 li
197.444 153.632 li
197.076 152.215 li
196.65 150.798 li
196.225 149.38 li
195.771 147.963 li
195.261 146.546 li
194.723 145.1 li
194.156 143.655 li
193.532 142.209 li
192.909 140.763 li
192.285 139.317 li
191.038 137.532 li
190.216 136.001 li
189.45 134.499 li
188.657 132.968 li
187.834 131.465 li
186.956 129.963 li
186.049 128.461 li
185.142 126.958 li
184.036 125.343 li
182.789 123.67 li
181.542 121.97 li
180.124 120.155 li
178.594 118.285 li
177.063 116.385 li
175.333 114.344 li
173.604 112.332 li
171.592 110.121 li
169.522 107.853 li
167.085 105.387 li
164.505 102.779 li
161.784 100.086 li
159.233 97.478 li
156.823 94.8984 li
154.329 92.3188 li
151.891 89.7109 li
149.624 87.2168 li
147.611 84.8354 li
145.995 82.6528 li
144.408 80.4985 li
143.161 78.5425 li
141.913 76.5586 li
140.808 74.8008 li
140.014 73.27 li
139.079 71.7681 li
137.945 70.2373 li
136.669 68.7632 li
135.252 67.4307 li
133.551 66.127 li
131.539 64.7944 li
129.242 63.4624 li
126.663 62.1582 li
123.97 60.9111 li
121.164 59.7773 li
118.187 58.6152 li
115.126 57.4814 li
111.837 56.2622 li
108.521 55.1001 li
105.29 54.0513 li
102.143 53.0024 li
99.0532 51.9253 li
96.1055 50.8765 li
93.2988 49.856 li
90.7192 48.9204 li
88.2534 47.957 li
85.957 47.0215 li
83.8027 46.0576 li
81.7334 45.1221 li
79.9194 44.3286 li
78.2471 43.5063 li
76.6313 42.7129 li
75.1289 41.9189 li
73.6548 41.0972 li
72.3794 40.3882 li
71.1035 39.6797 li
69.8848 38.9712 li
68.6943 38.2622 li
67.5605 37.5537 li
66.5117 36.9302 li
65.5195 36.335 li
64.5557 35.7393 li
63.5918 35.144 li
62.6563 34.5488 li
61.7778 34.0103 li
60.8706 33.4717 li
59.9917 32.9331 li
59.085 32.3662 li
58.2061 31.8276 li
57.5259 31.459 li
56.8452 31.0908 li
56.165 30.7222 li
55.4849 30.3252 li
54.7759 29.9282 li
54.0391 29.5034 li
53.3022 29.0781 li
52.5366 28.6528 li
51.7998 28.2275 li
51.1475 27.8877 li
50.4956 27.5757 li
49.8721 27.2354 li
49.2202 26.8955 li
48.54 26.5552 li
47.8311 26.2148 li
47.1509 25.875 li
46.4424 25.5347 li
45.7334 25.166 li
45.0249 24.8262 li
44.2881 24.4858 li
43.7207 24.231 li
@
328.707 38.9336 mo
353.207 38.9336 li
@
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Protected by U.S. Patents D454,582. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 49 /one putdup 50 /two putdup 53 /five putdup 82 /R putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/one <1C60D8A8C9B7BA8F425ECEA255C7F445C46B341EF282C71048D555A5D598E89496E7235E7E5E61E755DE1DD927709B69AF39C5FFA2F961FADB> |-/two <1C60D8A8C9B7BA8F694E6FA15FFB6B382A3EE4F45111A59DACAF941116582617B9738BB5AF1D396C826652BF6DBB46CC2019C22EEDB26045C1BEFE4887D256AE5DA3C25CAA99D62ED97486E7939D89DEC92F35F04285> |-/five <1C60D8A8C9B7BA8F622456C4991FA35B552AABDBA410C5FE2A289D1C4B46CC6EA81B6F378E0E9FBB887620926C1C295BED9DF5CC60E1506BC8F14C40DD7EC5F146AE0B602E11477020F8E0DC1E61B7E5001ACA3564CDADF4245B4EB166D458A0663DB06F2579480E048AFCB0FC> |-/R <1C60D8A8C9B7818197CA8C10BDEF0792283B4AD60A4778EF579EA03A9938895E46A3DD671B55D56CE5AC1FF66AA5C5464B6272AB067D7AABFB9BA4824D96D968B50E7E75C15CA7D5303E4D6EB750FDAD2DAE18E237F2D0B786B8A46E9DCB053FB02CA78233BC22EC230776B8699564C207758BBC5B113141> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RJHSKY+MyriadPro-Regular /MyriadPro-Regular findfont ct_VMDictPut/RJHSKY+MyriadPro-Regular*1 [49{/.notdef}rp /one /two 2{/.notdef}rp /five 28{/.notdef}rp /R 173{/.notdef}rp]RJHSKY+MyriadPro-Regular nfRJHSKY+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf365.207 42.4536 mo(R215)[6.45605 6.15625 6.15625 0 ]xsh.85 lw
[] 0 dsh
328.707 24.231 mo
353.207 24.231 li
@
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginRJHSKY+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B896187A> |-/parenleft <1C60D8A8C9B84E0A47D7FED6098F93D599A35099EC3AF2C571CF0E48D8A711D412E34AAB2732DF92ADCDC95C7C6D97E8C44CE2751654BC55BD12CD842E> |-/parenright <1C60D8A8C9B84E0A47D7FED609B3683507871E5C5015E3549BF91653A329EF8D5BF37DF948A5A8471707D087A577F9EE79FD91DC92667BCDE588EC87D3> |-/four <1C60D8A8C9B7BA8F425ECEAC1D5FB15843FC3AEF325D7DA4AC5B492181366F1B4D605798E0A37299E20A2C781E96943F501C8D283CF9274FA8718C41BB1F2F8D3022028ECD22D73F736D12B17047DF40EDD60B6519E74C55A33C> |-/T <1C60D8A8C9B7AA91799D50BEC147DC15659E7F5EC34F826A01358F7E6EB53E56E1831B0550D2FE4055F5> |-/a <1C60D8A8C9B75946039FC5B56ED6A50878B478B1780B40C4125CE8039A261528F027CE6FDEC5783823498623E2545F156FE1817CCA8E4CEF932EAF146EA4E45F8E44AF7B3429BDE6EAD3417E01676A62E7E41175148C72742B2C6CC241FF06B9AE6A99EACBD61DC0A967A1A9EA490A3B86CCCCBA356FE0C46F09ED4CCD9D7FD84EFCB667453A166D73A23A48C3A48DCEEFA9A85E6DA8EDA33C7A566D88393EC5B1BCAE7CEACDFA7D9A043D> |-/l <1C60D8A8C9B87EB6C12D27FEBAAD9108B57B5CEF2AA76DC2FD884A8623> |-/o <1C60D8A8C9B7967683396363C4C5A9E451FFBD75248EC3A8EC4B566E5BD4E7BBB72EB29C672F7BE91209F1171F84980F7DA08B43C90BC9E3BDC65B190F81C7A4B1ED6D074E407F8CF228B147D6A94BC016CC67> |-/t <1C60D8A8C9B821B37F30E246C711EE3A9B1905ECA3B2281EC66105C6FB87D8A11F34421A86A4C8EB1634F07587A29F1959067E8F5C01D391C88E6402088837AF0D6E016A2B2057BCC898EDBE8C7509BAF139B3EFB89894D72C8915100CD3D16C57> |-systemdict /gcheck known {setglobal} if end {end} ifendRJHSKY+MyriadPro-Regular /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 52 /four putdup 84 /T putdup 97 /a putdup 108 /l putdup 111 /o putdup 116 /t putpop%ADOEndSubsetFont
/RJHSKY+MyriadPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one /two /.notdef /four /five 28{/.notdef}rp /R /.notdef /T 12{/.notdef}rp /a 10{/.notdef}rp /l 2{/.notdef}rp /o 4{/.notdef}rp /t 139{/.notdef}rp]RJHSKY+MyriadPro-Regular nfRJHSKY+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf365.207 26.6279 mo(Total \(R154\))[5.1123 6.58789 3.97168 5.78418 2.83203 2.54395 3.4082 6.45605 6.15625 6.15625 6.15625 0 ]xsh.5 lw
[5.6693 2.83465 1.41733 2.83465 ] 0 dsh
329.707 53.4336 mo
354.207 53.4336 li
@
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginRJHSKY+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/J <1C60D8A8C9B7299ACC7A42E6AE29E0787D9DA7475BC8B52E05061F7086AAFF48958D5796C25528B68A53A127F22B73E1B82D000FDDD8C93746C59D7317> |-systemdict /gcheck known {setglobal} if end {end} ifendRJHSKY+MyriadPro-Regular /Encoding getdup 74 /J putpop%ADOEndSubsetFont
/RJHSKY+MyriadPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one /two /.notdef /four /five 20{/.notdef}rp /J 7{/.notdef}rp /R /.notdef /T 12{/.notdef}rp /a 10{/.notdef}rp /l 2{/.notdef}rp /o 4{/.notdef}rp /t 139{/.notdef}rp]RJHSKY+MyriadPro-Regular nfRJHSKY+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf364.207 56.4536 mo(J11)[4.43945 6.15625 0 ]xsh[1.13386 2.83465 ] 0 dsh
329.957 66.7607 mo
354.457 66.7607 li
@
RJHSKY+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf363.457 69.7808 mo(J12)[4.43945 6.15625 0 ]xsh[5.6693 5.6693 ] 0 dsh
329.457 80.0049 mo
353.957 80.0049 li
@
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginRJHSKY+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7BA8F622456C4A5B0CA9B1BA284AF806928062A6B7B09FB3F0AFA0642E6C0751425F2912B774695F4573A7ED10CC8657328CADE6CD5BA97A6C5BF6C1485B23CC65AC596605B697818C329637772F63BFEC9BF78A141357498BBAC8062C44F8B28D5A5EFBE38074FF4A38C9291B6291D33E32B9904245459FFD3AE6CFBA6472FEF21B7BFBB29FDDBA248755ED07D6E4AD20219> |-/nine <1C60D8A8C9B7BA8F63126F4A1F6CE00289C1CCAFA389E5E5FA018A9CA94A9AB8FCD76431E4E0F7BC7A33615EC70702BC420EB4D303A110985122EC77C7B03EB8C71982B066BE2C1A366D2D1F4CF54461387C6A50BE96E3793F2EC562860986B8187C9036DC54CA8C289E1AE1DBD61F35DAC84B3776130ECC3480C8D38B2E2C8B3A54D553A0E087E1F35341759A> |-/C <1C60D8A8C9B7F7BFE242671C9E817400744FCB1930C8B6D982C0603B0F56B2079EC8B4534AB9C74A497574D9EF71E8F51BC97EB8824D6E23EF8EFAA3DEBE8D568C2956BA1E496299B0678E1779132A604465EA4ECC38726918FAF069884E38826C83426FA3C94ADFC9002199C86D8D> |-/H <1C60D8A8C9B6415B1C8023DCDB0FF1D084A484AF3579A723AF8D5247ABB5D292AC378AF267DE95E8DC7174E8DD00326C723C8D6F70CCD88C857300A53452> |-systemdict /gcheck known {setglobal} if end {end} ifendRJHSKY+MyriadPro-Regular /Encoding getdup 51 /three putdup 57 /nine putdup 67 /C putdup 72 /H putpop%ADOEndSubsetFont
/RJHSKY+MyriadPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one /two /three /four /five 3{/.notdef}rp /nine 9{/.notdef}rp /C 4{/.notdef}rp /H /.notdef /J 7{/.notdef}rp /R /.notdef /T 12{/.notdef}rp /a 10{/.notdef}rp /l 2{/.notdef}rp /o 4{/.notdef}rp /t 139{/.notdef}rp]RJHSKY+MyriadPro-Regular nfRJHSKY+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf362.957 83.0249 mo(R39)[6.45605 6.15625 0 ]xsh355.707 131.454 mo(CH)[6.95996 0 ]xsh370.491 134.454 mo(4)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/RJHSKY+MyriadPro-Regular*1 uf/RJHSKY+MyriadPro-Regular uf/MyriadPro-Regular ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Olivia Venot) ()%%Title: (taux_loss_CH4.eps)%%CreationDate: 05/07/12 15:34%%Canvassize: 16383%AI9_DataStream%Gb!R&q-G8gZ7,Xa!:PHHW!G`776)lSoA&%ph)5Ti/HR]/^"<)?^<_(bo3sX&ZZ<"=W[NUMpHDrfha5DAN/W^SLl@;:W(a%2>5`'@%hL+'lrGs9!C.[67:F3!p8g9PSY@#kl5)>`(lP>$4/6+EfVX!4Va+eo+P>d`u!OYP%Qi:X"ffSZ0?>A;6Z.3N1\gtmn7ci`!H<b>F%HVf+\GGecH!poJhmB,9EF<lsKI_4F7f;df&gBZk>\_a9M>Fj)40<$E]"Ue>tBr><V<)<C`caD%*:hO:Cr^;RQmT/1Z.nT<&(*>A?%)Z=F<*([/2%mJrl(E_:*jSMrZf)l3W"Y('b4LmP:]*>,"Iu=i([J'XuG6b/G9Y9\7>4'X.k6(!!n=QOl3R)^S8OG4R\uDVBl?hp)%h5Ks\KZ1N3j]"TEPFA6-/DDQ]QFO>qhk\8tA*"&pj!9t.pnGSQ=p;Bi;:'>5Y9?B4p/es$&)_-_V;CRH]'kk<kOfY6dd9fuWr?A@%,LnI^KmqGtQi0CUF5<ql-o\RF**W$2<NS,ZOrCN2DH,KJ?3:9!8HHP,3cDDI86;k>n'tXeQ"5HR!+U1Wq7G2i%@jhAc0qbR6Lh>g%@n\q!kS@`jQ;fH:O=V+4UfnlM)$Z2(o!VQl8K0p:LlA_CU6.Kl0g"^Nhs/H$QU^jdY>_W^Ta)Ggcjt^f=-3E*f`.1Bk^'F6CV'.j%//D"a*_"2A>gWbi^Opbh.s9d>WYL[,+9tefC-Y4ed]9Ib0PXX/^\6"7cJLdL8-T"W3dt6JIQ@sf(5o7nfC:NXVhLc<<7gB`EZ&ZA%>*ak=QA*()$_]*ZTe*6LAiLe9@2oM\*;G;s*=&8X#GLW+INharLeu&7egqU,8[4(*jYB"OQRrS\Qco0:>c)Wl`KX\$%rIFm`L?/(%Xs[-BM,;hPr'Vt"'C.)qL-<CLKY\_g-ha$LK%@n)i@"WA*oSJUU3r]&Yt+SGrPlTSMLE?".5tu<#_i5o:P:0`Z&FYQ;GML2\Oa8a%T<os43Mi=q:2-K*,NWa#(^0em:tS#16qh\*Bs6bW3b%k#Ts0#_KIKu9?0iY^i\0X=*In!_P[b#K+r'_]5NsRo.A;-cm:2&J#*<jP%5A\OlI?a%'7JXsu6@2J,8'38dZsAQWN>I:Vrt#B]a!;=FLUCj"ku6pjINfJkDsSS-$*B,X#_Tf`UmP[Kh4^@6/Pt\D1<a9_8K1Q&%-&'JCdgJ(2Pjahtb&uDjjVq+C7YLGodZ./*Fc)a@VpFTl8ibEq.a<(Z.;pVh1AOH%=(j[tP=REF'q3,:,\3N>2j8S3Ioopr&CY_U%b)FMQ*0;Aa8ZXMR_.[EPZ?@['=qg#undkauX/NW01lX[2J*B1f_!muk9E-;9VFaG!?i&*Wl#6*Yr[S]Hmm;T5?#]g\Dpp)n0E&Ad%6[t$/oNreB.a\n!Qi>aqV8'uVqG6)MW'/2+_bW=roJcY9s$H`BUM-%VP%'d$gBB-\c]VbA?bq6$*W1g?j"6Dm%fIJb#<`C2kbUR_%Hh>(e[S)Jm:.KQr&_eld-ME0mmL9(8T50Ba5)aS/*C^2l(*:$m<HR:p[ej,,c*BuE;s"WT`S,t3o!4Ei$4MPl'O9BFfXid8'$)-$%AnlJqs+;][J+4Jm!UPhNS)KZ'bj>G)USR@'kTW.@^kK*fRSC%1<m>fmlR)DELu7U+:C[qjn=8eLCCd%&CSC=BH=E3hf-i!>Qe#3Y%Lm*"!\L6_MrhfXkI5,qn4>7$;:O@UOFincMMSHNM+#C#$E/#kl"Zd9T:8GO-;@R!&:-b;G`.(dM<":4#%iBH?1;h5gi&$kA^j,Hj%oo4[i*H)sIQ[s1rTKH7LhO8!6glbr=T/]"i@Le+>[\ZiDonc<kr)PDaj=iTlceUKGBua#tNa#8\")AK&F(j8@=^!Z<58M=]Xj#LS%3g*5O*.`.mp6=bXP5nM8EnbTq9Qf+=Ya0oH.$kO765&#s>&o!B\Jf()7is^dm4rBA).i_RD(@7=$\j>`P^$:s]L5Xj*fK&n5.)]8%j,t[TASG2][b5>X(*!P%H;8;h[7%jkc.Z,C)pZV@euh*SmO60Q/]L]=k[-[pYb`XGp$/3m[6uZpC[&G5[Jg+5S*JTO8ON/[W310!%bbRQY\PG?];eVMA2C-kI4ODrnqor&LRsQEdL3fJm4rMmp>T58'U6l0tIj$PT(C0rYR7_]#Nj;;h9m;Dh)P5>q7u*/r%\#]@qmIb%%9W#YK0aLjhK!7!LcabC47A\8YnUEU70tlONF'GAd'j?33\2BBC/%?j/%k='Ehol<#ooN9Ge/UZ(/hFmN(>8?E"e3b[r)-q7&3BP5%\==5%Z-?l4?S>D\l=h=D'UqGn=#HjH^(Jt>R:_.oc.3)q8X=CK;j2%u_5;L*-BI!2f_F0pANogX;qsFdSsBPnR_WSBcF\/%gU?<'%j##@6>oD^t[`_.!aFB&l.%E2"BXT8_i(?5'8Qa_hXF,%4e*,LI<f?M#Za0)R/Y1M_[)m0b@<0QPdn")gFEtTequMdK9?E9;Re0SR%@46h;;#GbMZcHSk:mn^/n26?kL?e0.;A.W]`lOntF4A]N?VtAUXj>!)4tTaDY(2Rl]l]W2\p/V81Br7\+uqX>ZHp>Ec(]m7a$kX,%fNt]e\_nc!PsIPe62?P6*4[$T^B4Y>YK'Q0YkO)s02F$uj_B>*S(lS:`cHtQY)X52mr-J^O!^(DJ;oeoIl>4*phI+lAN$j,D9(b#%b7@8:]`_F#.Zi=6g9q7LmP^[BjS$i=&HBgVU4kj'?DXe!pu=gR>b2`8T7+A=C*BB)afXlC15sYKgEh(+np%2&DqD1f^4Y#i%?A2!%@X!3_lLSVBrhX[6pt@r?<[jC6)B?<]+8Z$;T%\#C@+mld>88qXj\&a2Vm`&=;Q?,9R'`*k/]]W/`F3q^aeM5a>hESJDog+$WMTnq%phKmfHl.(+eF?Y#n6<c*_kl4Pb=*,%=U,W-MW=H2]oa;$-PBIpSBDg`(5$1'Ok]T4db&lgU2ldXD,tWeMgd1b5&o>^bBCA?40;!<%NBZC[acic/YMW);,]kF6eSk+qh0S[p;+irNriK,pX+pL^q<_q1eq#4)r,r;dkDM"$C;&#njEE+-rE_(*g8d04[JUmE9B<:%N=#ig%&8_0b9>0rFs*S\5rgBqq(g=[@OM<L12,Z5mYL0@-WG7DoX]+k7$<*:!l5ZZmcmSB9$JV;Z/IAl)@9\t\4pC=Pd(TKSjSKq*>'YIq%Fn/NTYZAr^!5J-]?EM\l??Bs9\BC=jmPc&l?G9_0+:$WhH)U79Bi^iF^nhML!7n)Ko.R6>hjsVuHS=:B<2qh2_9PstG]UE-X&lF:%k-oR+BAH%Rqju_7m7+kf=`=!;&Gu?KXdT4Uqhl*iE9qMD;gkbKWd;"+h`iXIQ[T$d0RsLp]<-SUCL-:;[IoSm^@om>7cfh]"mN&%%<#SSaf6V;@?uQ@mGjE7Df03EP7d[T2ISiki)NB%^HerU@?>B:Q3Z-VSYdo7,o.?2hAedkZf07:u,07Q/Js?5,36<gN:(+,q^Zm3i%S8"MVGPp32Va<mq\)1m38r9Ea]#cUW/s1Xc6\et;J<oeDBW"j!!?kr)o^'-:X`4Ea%fl"1\,'AAO[OY&'%("Lq_j^u>u'0-A^(6-%5ENkWJ--fgTJHps-K/J55,/\@']N:cF%m`VEMU2%H=!UG#NE)\dQr0Ie0nG\Kd[((Br]R;r-Q3S<pB6@)jPj_oWZlIIH4`b:bV?e%QQ-_o&"gR[qk(9]j=*3eB./S(g24R2n4_%unnI#Y9#*0HL\r8sI]t"ZXml:\2?^IN23Zgu[[q9ls)-F$&#uJ;3hB;f4V,3*IJ#*"%pgN:Mbu`8WhVXJ#,(Bju(slFi7i["(e:NR8#_o!RY;E9Pf@N-,oWpkpWnhAhq_)>(l@?-p"qT&sSG_&QmB)OFW/d8NX+3g-<#n&-%Bg[T(\l:YCI&Y]\<K`ec\<77=pg:Gk>:lfl$3E.O[\'`%rd8T@T(;NWHW5W@h5!/^!hQ%%JDn%q`+^0_'V<ShI<`-NC%^3cc.?!*%O`2ZC]n6PmhNDNtJ&'L/PD_Bh#B[UO3X!3'J?+.4=3FV/m;sVb15n[S8KU91nrs"m?Fs0`D08$2ob671b[Io/!r&0A3gRnDk$PMc%X5-7Xme9lte1CEjdV051j1J6'K#EcA_'[HC^pZFKU&&u>nlZ4@R&hp%M?&!.LO&O)!Y@)TWV#&23t8E,h8*,aO.'g7E)c@GZ<Bn1%[qjfqg^pSL]V2AB4>PAWmWA<]pZ2'LWtE?24R!%*!K$2fYna_pWJL6HZe@Gf'q/c0b/q.Ferh`Se6`5k]@6Z'D%<4K1dr?L9*=cA%as%L\s5:nS'q"BFMc>1_dGBc]QeS<<7M/@(%I;hG'K5Yji&eu.]ejJ*ItOBe)2/Rr"EQjD`15IBZsK!Fen;VF7?*S[p>3sqpkn)g%EW2(pnFCV,D0G+V4?;'k)ePX/rhp.k(\s1u8M!%*n]C(rr:_^8[Qi6_r+Q>5aX6R[ohUqe(mpIK9.94En,_E!'C6:f;1]f5<0F_?%_iI1[nct'OOYi4KabQK\Z3mG;QO,e>G74BWZ#Rn96kX+-=85FEKO+rtL\C>P!q%ggrRg?0F!C+H-dpI<GgCi1^Eh*K3-p<j'`K,*%r;)g>ciX>+c=!UYI7.WTdJSK30d-$%L*1^)AOfAW@dbblI`#:IY<)2O/"OH>n(X&ddoNjlpi&+$ps2`Te#TlfY[X1"1O+=%lXUTL%]@3bW^HjRXr"@N&4*[Nk>*Hg:anu0YL-NY<hV[Mui7#[@B(tPn8uK9.g2YY1=4I]T=/F;WYZT`kJV,E/"`l-WH@GfGj\?IOn/.*u%ZsGq2eMs(-OP,,%^RjcPFM/TfD]g$$[GE@s`:3cJcr1k^#s"\KE["Qal]pX&/WSa"*S(0aMSAX_CfO!PJ$VOQpKm^P?L.4?CWZQu%Ek'Q"T[SL6*iN1GEVu0h"jlf^7*>NO[']`,O8n.kptr.Wh+%A)J%I;`FZj@sKk11g<b[52ot?*Re2S\s+TK,5fW_HIC?a<RIf6$J%mCgR)Q4*KVm1i8X*7Cg9`mVeTG@t"^jcIdc*N(]Cs1:>pVIZUTMWi'$WsAX>EUC/(Zg?]DC9Z!5^t__EhGpW6H)ZqEfRNeZ%o^um%RtT*kY>PO2BMpm]$0h4cFb:3EUe:d7#,mIEddkh$FF5k#D7A:m2UdOu]:Pcd$A5?8l<RcEB;PLa.R,k$m7Oe/C"baADYJL[jCJMh%@I*qno-)aME0BT\]@KPsl_"-1]=B'q+[T-h^#rFm;bau6@P1/:SmstTG,JBoL<fcu)c3"m(4/uCC5umE,o--mbun(T\odP2m=La"%PA2_/@(b5=hB"T6P%s4bSWh7V7E%mjY=ePHpN]UnEe%..acGhAEkg"0'lIcW/p&2,\eQ8=s6%."3cX_solmOk`9:J*\ljN6_.RGi%%obF.UK$<e6./K["hpRPC>E&H.9=]jAnZlpjsIKHLW'fUe'uW]82Z6NG0PRM"_sDM-9ms$Q]G1^#G>U7-N^Xb?*3a6a_0C:JW@:R%2&.H?8A[s#qp'nP84ujV>e?/tG\WcAHYmF\\rJ-1ZIc'4]BoshnB9]SG.e6Wq-S,epWRc(..[T*:ok;%LSEn*Vg?uh`1Z^'/c!*R%cX(Y$>45I_l]$5ZDa+=.Aa-_QI-XkjC<?'JRuO,#>Y2YMBmXRDgE\!#W;SN/a"LV4FV%TKbm8+`<U7"H+R:sA^'YuWG[M`KK9!m&%m.NKB%lU8aMB_mH6[+?>/H804=d.0s7]#ptN@P:a9<2!n<<l6614S$CGoj"A1O%0KP%VM3ah5u`?mF!&9!;btPq]0*]]VWf@6MjC%^EW]Uopc+e5umO&6@Q-s$p#fS>KprG#JdQVPsuu:Wr#Y356F\GdZL?anV0fJL4/:(CR/[bbI,;T"6m#2C.NbWj_BB//;L??giQ.4%GQ"k13tr:DlAk\U@&`^mf5(bE:Y)$'/lnMP$J9g_d0d2YP1_4Y7%!fO3@ghM(1$UGPh"5@I6FA11Ja&P,^3dAnCV7Y]naWUct)'h%5;gkdAsl[\7fI4JBI.,Sr0?9HJMK>7+"2(f,6hQYPuHf]"cHd@(i%cBGB,P$(p4#J;m!`6q@-NC9ZL[+p;9JFh1D>S6-3p@`R=ea%2]f[6rsYuN^!T1"N)D5q+<49*W/VT8.H*NI,shGP5\-mTXnEgi"q`aS\PK.E79HIVCN\KSOi4jcIn?t@0N@eCd\nm*6fJ$%TUZ"i%)_Z\rM[G/`Bm-7R$8B/>K=bH@@eo`nOmD"%m1:-(ig:r'$M+>%F?%CGc!IR,n-hl29Xk&GHDLkSeBKjY:2*,Cd`jr,;)]^cR^KV^%=CHj_]sO4kZE"cBdnnHC=*as\d0J9OY>k%&+m2ZE'`'K->1[\XA>k!dEuo6HLtMc\Y$3mE!75Jq["\R&,J$VMWr:>r2Eh8k.L\*o%0VmTRM.I;*FJ[Z$9Aa,ALd2D*`%RaGku]LF^pg<jb@c0ggR=[\>WfMW9<+FlfZW!+VC9Go3gqfhfC$"PlV,F-i$Rt>A"Baq#>V$^%i<T+<*hW."OTTHBHOVmJ&3kkoA4%2leQd>R??,8;X2r7L1H&+tC2DsQ#^Hle&2j^Cnbm,]4E_\TZH$dKC"q$s*AO<(P[Jq%YV]6;%F=(k<^34;*@:8OfYX!ED>3jbsR[(]HEM24flp_>W0G6WBN$I:2h<0+QZP$\t&<t%RHsU:7F:Qk=>jNM$[j"@38FD@"j"()`rnCkF%A?1?cDIj(S!;HmJotAoO03:D*TSVJYisP<+JAt'T4l#pRi?CAg1AfXk\?-WEKBRDO<(Ms\S2r?;]m>`45Y_]1:_=D+)Vo55G8O"7%/kkT85T9bodm#l\#)`*`UF4BQ:,dd8_QNugOt9!0?u@6!^ihi#mkAG.:fsFLjFrS"Wac$MWaih:<6'NTW=E1dGl$(]ek3'2*W-eK%a4+I4G@"Lu.!6nDg*bU9DR<Mr#?L/9h()b;EGR[bP=1_X6'-#)N#-eMe9:NGkWo=k%<2hsNBA+$2uukeb$@P^]AY=T(PN(]?9\CL%M!7H\Xkl/2+M?[!D$DTr>eK"s]##L00CVFXBW^6e#q:+?<V`\=!j4u*h5G1;"&#\I$[6Rlf6_0FgST`tO\5<uOiMLQ"G6a0=2ffE%Jm#+I*C[&t%J.'"ft;UU/,@C\-F<O)e+&o>XBhpkr4rR:7NSYrS)8QSV,q<uA,k<FHDU86ghlPY>%[`]HCmdpqs-&]q1[![C*p:W%Yr7e0]m"(omr`mIq_^<rl*"@:A5@)91X!ptVW?@t(.n,[9JLs(FLCNC&6J]^2U?hjkW8s]@,5%ZpM7seb:WUHY#NA=AcJ`19Va_?%NV2K%D#<jDlcA=.'_^.-jN=TOj(>dlGd!A"bBMjeleC_YlI*,sFBd/U/i(E-V+YLjfF$psm8-PBG34<b"$jo_:1q!3*?*$@.!aj1%G!f*W/X1T@g99)J]Mb;%8]t`JD<IhF>m&l9IV*).AtF+7N(`C[QgY^`N5F33+8ECuJD,2nDkiAaT-o[9_2[m9^W_sq?b*sAJ'FN*%-W7Zj7AEo^BJ1+Ukh=6iVlQ[U_2Y%eO2e90Z6U>_UdVQFL$Zp%8>G>E@V+M92n2`FmT(be9.,:McBbM3+uO"?VGDj@Wg(9u."sKm%I7p,<D/Y1eqHMYMG(2(^Kt^+&mO`?/*'ED%!u_%3Vdd2rShDYifW24L)HG36aPufoG>.HjP(.5%Vq>g3E)^lh`qi7]"-"5$!E&^$%<XrurCn/cD7&*)3BsX)MYPH[B8>G8_X1;X&JW4i^J*LI%mK:L5%sP/6^95^5Fr0N@:/I^VrbjZZ?JKr'):YT_G'5f4UX4mB<9LE%%3ig)V)L"E2o$@9X^n/i;];qolr685<UPY5@QgLE"o[WfH:j^qX$gHnL^=-qkcXESA"73]L05]EI1FLPJh+jdDI6G#_mbC;#Q5=t/%>$&`d2mguga,dO(VtXE<n\_LIe7^&VS_a>2g)o3)/CLW7d?CD%4g`V=O/Lu\8>?]0j_CXC-&nXXq&"Ldr-22CAUAuf?9N/.L,OAS%\:;"%e0nLLj.WF,/DM!B)*E9DXag$;>V-(:H?60r66!VpbO7;ZUPVr8?]UG@[_<L)k[s\Rf8nhDJW9Z]HsR.p'PoN_qt.8Oq[p^'%7mm)tp,sGOkipdTTA.fJ;IH7aHasO4.*aJuIJl:Sbhn.4>#q4I^=IlT4kiSQ*k&[L?_bsTBm06sZ5(77_Z%c?;rsB)>++dFH'N!J%e,SrG@&'+jV)eF]Rf:k;HigFOcEDHiIJpj$3Ti<si@Oe:RX+#Ue0L#g$QG$$hF;RWmb?\ZCiif:$E^fBi]&mgprt9UUKcOT;u#!c%BVV&T]3-5&B=>ur$ae<R]p1qqHdgT7ec#/.BEajL&":@NFkJsMrr\7Hqu0&Hp!'kukfQ?>gXH,eS^dQUBiO!&5!C<Q@Onghh]BAk%o><RHWXLTVe<urBm9L\sUY:6@mVG*HY;7VU/bnR*!Gq>_p$q'Ni:DD/Akb:1bk+5n/o7JOmeO>bV_A26lqD/,Y(TT'/Bn*7e$@/<%.R"pcS([c72Ohj@Si/\(g!>)qpQUa<I]lgL2t$(kg'@4*>A$0D01)9(<f[_#^NG1$*[s;eWT-[lm"[^4SkcaQq?nHBO'^.6m$m+P%VhNTHQ-H+.2Lo;XarDMHjh[kGr,q+0G9c25g>YhHmDkO].Hf@RcI.ca:44Lcp3u_7BRP@=IX8;*rj/3Ie%ngU04@?Lds]rpKKR$J%o;Qs*>0,1=YL`87XUtF&mcV-'=]qVE"$$!ql%)M%@-skq)eKT_SlTa:p"?EP%c^[Yp9`VE4f\b<IT:j20Dmht%=FW@EDaDPS2oC6%HJ7Vb5@#O4qUWXF,!O<^51arfc7X9(n`bQ9l>/\5G%Z7VPQIKNJ$1CUV:K7-PG\L&KBMRbV6(h4'iB=QSR-+''jmFIW=<KimLQR/%b5Ul$,%$el5ta"ZAMLN5[&VD^9:%kTZ8]O+?27Iu5-t$Gmc1ct>^mN%QB.WQ(V9RLBsirned##m[7/d_/a#n:blq40hY,'#LTHYF%f6FXZo(D\=1jF8O]<L)4HgPEX<a/Zj?Zm5IF"MYEhY<tCq*4eQMk0%Ab7AmTQ^]k\O5Z)DQ@CKA2QE!cXL"!XX`(F9C?hiqU019e%GJ>=?h4$.:)r997h!mjVoIcqO$iAhqXSsG[FKaY7n5$Slj(_>$n&<kSe7`uRrgRR8>$5]IT8I6/$q=rH#<-DQh1[dK>CKL5>3Tmi%X;sVGL".HM*M1.eXb8TihY<\J'&$FHOb>WMrlB4!HaBGDl<SZ3H8+e,<Ab/u#&0ZVEsL^3?]>55p9!K+r=I''Zh9_'E1R!W7nU'&%fOo(RIiiS)<#9:^(Ge.TmO=EMpf9f_msm*HEL(D<hUs4Epa#0SCar?XL;\jd?"mh&AUQV3#P5Ip:its)>j_Tc/$4g)@eI>tC';fM%jPOaL'RkGi%4q=l>]-nRk]nSU907XG#c(B5_X),Um&$QhY`-HVFotk[nG2tu"*(rr@i%D9EbM=Jj9(+PZd<Y?46&IPAN$.QI>NLf%htO;"iTE>K>l>ts*mp<nU:NO_HmIh>hc@&DKCY5GCBt\!.KBlmZ)-jJrc"`uO%Xam*mhYrp#nB6Iu0EF6h4*b/Hq-,(dEH?k539)%n]RN6nq-0NPd/%G!k#(%dEIJ4IX>-jkfZN@MEl=u0'nEo$um*-;I10RDW=?TO=SU2=gD4GAStq+,gM284YJ(+@a72^U\UL;@[>@4%ggut(e$JpRCs*:WhKqsm+uOI!IdO/I5J)7^Kc\IR]q]l).1=YJh8cj.,X')SBCY"J%_</>DAQC$7mU`K>V"9s?.7t;O,c`qRWfOB%XFC(*SCR41LVa<oC6b]4d48A>4M=A5P?nE^dCX5L4&$.J:l'hYI4XJB(5Al`8'[CRH#DL)X38DfZ1n#^fYZ[jj"]\=Aaqs#QG29D%PEdCR'7m6PH\d5((_p_T-O.3QXL7tP=.)5NMP57A>"9jK;W^4fA!u/tdLUQ'e7Ppe4R9=>_hjtJG<k]9[=TZ[*?Z;dfb65B2Y-==%bdrif,0;?B+d?\Jg<RBQ(u37"c=2;?jrY5^?IHh`U$Wd3W.!KY['amJcQ;pmk6pC5M.r@'k`NjLT%Bu7do%AIiqRs:qP/C5_7C/q%5L2_R$i?848s1tL0in^.@^pO,hYXc9P."WOO#qre/tHcgTDAqX5/1_5LUhNsa03CY.\00%,fltnQ/-,b&uiC^L93P3kjn(s'4bN,%5C+]2=#U;CGqJE:*:m@@OZDPn[Tl,IG&Hc7]aNG?<0c:e]jj>YM=VrT]o=2$6ZQjmmF^0BW-b(+%63"V^;@U6,sHl\^?o]#q`@:m%/<oC:mbgY02H,2dmRhkKm_iK+!H26#Ee$5ukFZb3#U+WLkR+'rVCsZY.;F_&,D:A8JYW^\!c\M9qj(a^A=2(,6J*1o4K3G\'X`#Z%A;mrDVd#TP`9fQPnp?(,P$cA*mDVtAZj&jK)@(A>GAdWU&Y^DP%%@\P.?PO*W%e_]QSD(nrZ"VR!'pSH7pYS=p2>$6iZsuSM3psi%on9L[/"Y_ijQ0L9p9XY!:.M6J+n)4G".`enA"@%DnimB%X#bSD6Tu1$8$LL$X5]hr*d<m&bVCPR<a.I"^Xmfr"\1YO*qj*F\q`eB%%fH_U(*SNl-%MUM(JRW&s#pu;dH=Oa:bZ]_*$Z_U./\99aeOV_!6&F&n-3(qi(<-O?s4Tr]^^9Ge@H_d&ugt[7,/7mp1)&)&jrC8%qOI.g`+;Uj>=^8?SP`i=@IY8o:0>0K/'3t1oL'V1Xu%1o<kPU-Ol)Gt1-^nYiCpjnY]B8N9\qLRN7&BR-T0*]p@,55jIHKtmojP'%M/_Qc$Mnf(T**,qo9G4Ons&QDNZ3u/2m6/+N"./.-2knDl&B6Sg.0MIDn[0O1"!hS`8FT2il`Nim*Xr=m`SLXbWF@O(Gjq>)pkY?%X(]2)eiKu[K+X]"Ifb8kbJ$.Nm#&fB=!=ks*.=M9(*.<^ABL]+\Oc)><e!G=-)251j[jfH_sqsfOs<dJp;@9/M)CB&H1]/D-(@"(%Se:-KBtYU=be$5%dNn,2+!`Z5<R\^Y`3O+E0T^]nhh3e/i!!g(g[kg0isToPDSO5&V<!(P;F0ViDUFaO/DBd\(+h((!kL)iMq7jr%moIL'huf'pDu-]K1?K&Z,1@n5P_u\5\=/sfpTK3#g).DN4h=&iMHpcUP?YE[l0Q(r4AVYTB3S!1GF^,@P6d.aSTtEU<=)qsHaXE:%I2)*R\tgmm!dJ4sGGm%[_1rk?Y&8/E(Xhi_jC($#N%C%*O(Mu)fdK=Uk^KIu]k`[XqSBAZY7"],+uQWXJk$;+nLVm\4FTe<,\iu*%%*uj^+:+8u:N1:9I41\+bmAO7"*YCaZ4Wj\;0-0sNEpdA_]P*;pDtK+r$$4@A1KiK@1AX?\/cMP)Zm<)bK%u?d'L"XA/!!gMD.B)%\]JKh+/=Uu!b\b[PPFkn/FHb&d4Fu9aM/8&P"6&$'5KLbSdUs?WQ^rIPK\cq\IagTB>n->[PDgqAZXo_f_aEr\PUM8o&2$;$mX7<%!4mW5/k8(+,[)'+Z,">q&<AT$Vorm3+H*(X0g&`,AIaVJ7+tfta-s!;,>#"Kk_eR^VOg<FSq8G"I'!58,K._85>LAh.9K0@,f`_7%ho(`eR$R/,VkqabEp1I6gl5F3Kq)BU?glnJcdITR159hc8pogq,C42@pW-PN:jr/;(27#Cg:]d_^">Y6P[e^ma^I75hN:2tp)Li,%6l+ck'Qa)+_m^a#GXBrGM0o`+U;FbZb/J"(2[1NI#'q[[TKW,,/;oj9p.Y2YcP:'3*R?8QQCiaakRslZjNp>.cjaLoNL<-MSO#bI%YES.r7;'t9AIFN]6Pl:ZkKOb^5DLjPK.`:T:(CQO#+[DOE9nRUkR>$jC-"@sd2@&eFN5)9kb@$,p<s^rkb9lsj=&e/3HWXdFKRhd%4GV4/+?;R%X<$A=8"P8BcNMtu)Mt8o8FQA%B@t&fp#j:2q,3C-2rVm4oD'OW6K:R^JPYI(S0\^'j#^TR5A<"gT*DW<##C[>`CpKZ%`!E)^p\5qoALHmfnR.,bcGf6ZDOA/VB"Dn:B/iKAR?'_P?kFXnVT`IjFMsucGdc`e/#fr>CsQc$<$N@dTt2=h)!'<:FS=k\g!RTG%U=$Ofl+6Ib2a`eb]I+jm$Oj?:A^ZAh96L^"[dgPaL*jNlFVMc0/V,Vgqmu@HFQbI_;=SH,3q&,cb^0I#euX39muC,q[jDX,I#MdG%.^QV37i\<nDo2)U_gqh?LF/FLP[`q?n\n42*58j7#OQ(qrg5ol2EYrG)%;^.pOX$6`nRcp."iuA#A&IKZO3CO?k9qaG@He!^?AW7%`'.g8h$ZAS/>'Hc6*'M)[#Nr)@0fF:Y&mJC*f(.f"4)`Tf(_7H_p6&YON5t3Ib2BE&b>^Ok/;o\K-uH+7<[4ONb"!;O7:AX;36'9%PmKJE3+UPp'$%ku6:UC=CXL/`QoFMMG6SO<oesBFIr*=4`7t:<"@cJC6fXIEq/Uq"&V`OfSC#L#mje8QU><N-\JU6l7%D6Q5\N)c%Ynutk#]8aBG((&<R"c?cC6;T$@\cA9,,`SC3C8?[,N3F0n.`@j\j)]*iEM7)Yn(E#oNm5[m"k4;p7ku?_V]MLc]?S)G+Wh^5Or2a%<\2K4MTka%R6Jkm_A35H-0?XF-HH?mSa_T:TFi$a*s7[(EPiRI*t.1/D_\E+7]4ok,_cjFQV[Td*3TXP%(fUc0J#"4PU'U"18_C;%'Tn4p8KVdbMor8^(QfSY3^#r1>QdXtGB[l'LL"7T7\=bU6e6@!+u5YQdHoqle.,tVAG@5'OCc>mi?T!Qmp-%\dDFsM$])l[diIu-%cpj);"Cqm$?fN1=QH*__,B^Zs]MTk.+`VsAbcm<)0p?[/2c_J$Nd"*)X$;\Z^2bqar7lN:B=WFINL[r3CGkt,5b*N4NPZ]1-`BDD%(3FTJ4!Vd;6X*?IIRqaC^U0&2*F0MN53=r<&=+n-/?`ruZ]'G_<0-%1f8IqT'6@DhVXX'W+sa]Or$>@K,f`!H#;(F0n/Y_gZGl#@%=`gB2%"5nR2"KVhH'fa`nVQkr`d.U:kkT26VkBrY%l_lBe_'\:6VaRT.3FT&jG>a5=?^!J)aQj;#EG8ak<BEp[f<4o%i=`l;+*>(%I(1#3$(+%CS2;khOhN:-_Zd-\6FM"jOtuG0SM+?O*%aF\cU@V90c]Uc`]4\mE(XS%h7oOD]cN/0b`e,UnO/oVNkN>gG^PG4;5iIQ%(r8"BN]k?:\8Dd?"$bS8>t5+;r9'VVh2bOQJ?:q-@>dn!nL,Qqr?jSRCFU3!B>)7E%R!1&'<X>=Ft?T%G9?:n814(Uj1t+4W8V$/%.W5D9GbW\AhWgBaR6V3m/>.Y0^?^O5$/\MhI[aC%0l'2>IDsF7\"UpB#2[pe4j<\1=BIK2Q&]$E9,X]nVNI#;pbg$L<'W@TN7>nO%.:f6SZfX)";Cf($fk;r,1/\/!7!;MO(Q7reOeL8-/tYVX8<*WfBR*/hI'/MY8An/"7m1C9Dq%ombRUT1b2SM6L_nZ`;rL(1fMkf.%clX3QU;u$10iHuI`au`\E"g2BA#I2'[]UT/(!cO`U8Q;O,S_pcW\F*F\?Pa1bk2jtT5dPUn,:??M,2t1&u3,PhX?N]:$mXLQuL'^%a3j>sN"J<EADS,b:Z0,QGJ,XI*c5u7RuLauj^W/d6l]LJ/AH`QS_QhrjCTK*0dT/DNWr/fD?T0ThAR1YcHPr+(M)7'&$L0@^3k"0%Q1+)[mrj/^5HTDgIAi!%E@682U\([3GZEJA>^]strQ\O7D=8Ge(Q.>/a)Y0afU+6fT9+_QV0MQ*5dK//VOWQu#s2ZFOX7Vf]=C"i%_cNEDY`4q-_d-BMgMLWT);`T87V(/6CUHMJ[D(Urg-<K<h1fIm[Is#YnQP>,7e'CD\$0,=Zo>nJQgAm5C/Uh`'JORX1iLm9m"Q<e%2Sq69N-%IBh/'Wb$Z/il+0D)h1lD%tV2WmOn$$?3Vl4.83@hbi]o-h'U="PhpekbtP=erPQP&RI4h:r:'^XK?mWI2EWcRfd"mh_*%RpCMX4Wb&,0.K.FW\8fljnI3GFps=tPu_g)9V'Pn42^NCMH/(k^k>mM3cdOXaK=?P"h'k6miG=T`W;u^WBKR][q\TWku[MX`!=Rm%KbIH+Eh5,aS-NE7:@0C=TR5`$hl/BY9l_IJi<EV72Kguh/!3_a]LUb(XtT>Y\KU/4VK@Z"B`CEeI>`AOG:6$Mmi%#,oGC(I4mu8f%s8KP'qU-;U^AOYaY44-;)]%ZY4e$?E36Z'hF@#3m&VZ]T2I0-3?1@`"-HW+mM?sLNbCnPj6+M(NA3Q$XN?*>nIdCl3+'\ZRePjVf%$UQ`C%3Zs/dfh>gj3>Z?ACC_Ldn"QAPd9P*Ep7s5,?)[\$];98h[;B&Cq?9A]3)aA/"80N4]bS+V@1PCo:?tn7Q+Q!UeO=.WnDJ[%,l->64F&hjd.enb,Is^,ZKZt\0CUgJ7+l[7W.s.X4@V57\8OCPCq>`g2Kh"7+=_c*g9e3N`oYidflTM1XMiVpl%0J.h!1kNdfgmc%9KejtBX_O1%/e&sF@!HZrmg>qflTOEA)<c=Bk5ZrjjNtfQcZSuJsbN-/ScihF>5P]VN=LgPY2g4+5c,e^s0hrLF`FRpPZ]oEA:oL%Ls>_i*cO&.]Yp`#eq/2ae%W"<LnmT1@]]Il,/&nZHl@=;X[boBQi)-g#;I3VGTouLM$/OZXQNuc#"a\`$=_gD2j-9,O[Muh*5opr%O3=GoK+q/u-A#%$\D$8jjRTI0!qr3M&%tn.^bP/2aIG)FKjSp\6I&d(20[pO>fCd+8&+1=gqk&NfH6-#c!<^a=1gr4=RQBR5+h1J%F>mW`%f=&H8X!@f>]U]/U3JZoF[)Q3`JBH?ioDR(UTV.;\Sn75!tL:tl'p:mDaAdmkri,8UT*?XCp%$]8q%e06j^H5Z8chV:\uQk%=U^BfIWdP-O`&6_"iKHna?@j6Kg`MGB7CT"1(;&2EQ$*o6cN5,3CJ$))Z'%uEh")WLlECu-T_89S`k[_%2H>/KB[-]0eQGpT8'qG%hJ&phBqC'jMKp+TaMI$1ca_+V,kE`RnQ#q3')FZY6u"P@j%Xfj<>*,(W<Ntd52.*D.6RN=(I9rAYr:SGG(3sQImpW<3S!rukZKtG%>6,==Yr@i$([gl>1+h)!E,"_IA`]Q<P)kk_mX'q4,1'OeqbL$URK&GI+Y3*01Xt#$\aC%gj\>+H6_#[)QEb_a$;G%J7JFD9Yq?q5%T)#n-1oWQ6*.1EL=M*)dcY3-E+no(J]V9Z+?MX%]*:Y3oT7THY15r`\Mn[fk5U++_f?ha+QteV.%<j#21AHmAZ.*aNL:d!EXWHSY%]*N>Fgi594bf<Un8iPi@;4lK"j\7$S.I<),Oa@i<C@?_dUc9/bNdSb#OS`@jK/'Id2r)B#X#V5!R7^qTHX%eCobp'"[PI_:,Sr?N%5I%XPq]$G.Lp76YA3Na3Z1d]<.(aoWpKUQXUIMSAh@Td5VN=o<=P,p;kdB&^4Q5a_PE49cmt;*DA,7oXIX?T7\%TDJ^XL@,C3Vg[%>YD[&/c<RC*]G32'%9e"\(:,q@RJV3"u='T/_d+A$!k'u:4*mOd`U<H@HogD9MZ\dg3rmA,pmrX9k*++$4e%-i93nF@33NFU`$/B%\7nXA*5c6'g#j2]/&g;*\Kn%^GSfW^P&hG7k.'j7^5'G%+n2&qoF:2]).>mu7<*Nf.*)701l`G=7T=rTa`2]qJb'gJ2]!\,(7b<6%a6,(CnmZ/n&%?4rO`-WXAN`QF\-hV'o&Ze2T_;KV=fp?@CoSqQUA')b^.Y7opZ9$UV>K)of(QiNrNNeqHRT_Snjdq`o;^%^SlEU#%Sf:u+h8=ElDEJ'`_^/3JSG!M6dG;da\L^@EI(7Dcb?7p[T)$*b>+96J2VFS('qY<SSLmq7ToCP`mlM=ON@%Qq*]?#ObhqXQW,(ge%*N;nSQ<:&sP3GTD$i`Y>`pNZnC.RdMlsaXC>,VC)%8=V@NY)K!XaWldcM>oXI(/EeHhn;=q=gk6@^,je^Xi/JToI>>fA<Q:NRi\"%AbWnR:+pKP)6E1r54!t[>1iRS?Kc>"Ji"t%aPVeg\ce+5DA)*S^uu$@XbO^'B<>=kO2nLZ)X2;Mk>%5]<e/Z@'Xuk9%,Cdq)(48J%RdHi09kNVDja=P)c*u](+,cSW+%kC<"YE2s,WmC;.kXCM"!W>qOcI;3,rVG;S'o]aLJm?P.W5_R7O75G_1)S>`m=nFbjnRKm:]Kf%!gs#4PN-;P%6L9JSqE"K:G&2XNdJ441s1s*@3g+e1I,;V1Hk^d/J:j>8d,Wa'9B(F&a-O0-p<2qA%h"Sf,E;S^<9.CAHldf`A:T1%G2mII7`8]VHfM!of!o!*r@);&rS!gZ/e<'kEUrnWYMCY?[h6VBBZk_?pKEUq=n\I.h4;PYBJB`GDSFcM<=9uY5G])B53=p`nuT7s%=gOCHj6/\I[4op1Ip-XK(uaD?_;K@tR5qjJ&EimN&$o$J?Zm.uZ6L?I\lOQu)8^HF?uPgE(]=8'kXrM!(GRq1Q:P'?%DO\FFs>Tm%s*G6ok`20C29^@;6t7*+KD@/.la>+6*5q?dAWd8C.8>m2kdC/9WLU]s>_T'W:,IEk4H"pdS)pUU_bJE8mn\Tf++l1aG&7AfTpPe>%_Qfg/qo%s!2GK4re)Zl.MJOD@GgJMdqD(e]@,)_es,$.u'#\614kX$s_GCY84-#R.Lnd1`(8-0T_K#XQ'<5PQ!Cl6k%.&n3R0Ddf%Q-^9.i&TGo&XqcM4j($LZN*-U&s38UOCK$JN_+-<PLdfbA-%FKjGfH"p+%RT"248N:Es5h2q!\%@pdCA]e/PWFX^Zo<+5WindW?r%D&Sc3d5CL3FSHPr.3I57*:3sC0eVPqMS`*f;SL6LOf*@O?ekN/-b,De'3.;lNfD'jU<]oOV$;_1l8O]H6fG_-;p"*hg:O%*]@YB`%21K)a(oM3Qn+DU!$3fKmNHMFs:F^e%qMkAi.0$u0d8?UaQ2$10qLsliH`LN+]:h^-f.WF8:OK?QoZ7XnE])7XIPEUgVJr^\c/]3>%kOSF[_L)6U]/Fn`j`pOr7GmAhedW`&p\I=&./8J\kkFoW%TE"(c,[?G0D`UiaLe+YgkhML'UjCpH$p@^lPD_3O^4P-h!5c)X5A_O%TF/Ba07'T:EXI-RHi8Ok9o3*Q-GGOZ$9@SFn+DUY6:QG3p\I<sW(8;I-b@n_3cR&#,B^)7rIQt-fWBV:gDS#Ff5L-qS:%@Z4/XoY%HA['Q?aMO\pu\`!n+@(DVr962>pW3oY@$pQCMu]-q"OW1o!\g@oc&/%eX6+-75L%]a>W:rIZ_3bNKQD`Hi9[_LI\k8Dh>HCGjj[^%4RXHg<km%g3J-_mMr#Wf5A`L9]meA#4O&/Dr*I/%>Q(F_Pr@uV7Ns^\Hi9]5S,K5j`kBtWqGt?;mc,8FO@I`JHkX7gLYqAUQ2C?2%Y,,X@]j^D:^JV/no3%I&me%Mi[d`);a"rGs][r4&=5^30j(,!GmcK2FfSK:u7CbF>?a/CZb.W8QaEnqVY@"rTf1GH(j&fdINBZ44%I\WIE$Fn]+r+(&$X.SR(A9h6jjIE-H>Q#c&E]2@ZIN`mYFTVh[Yqb_?Ma$>]&5sM=?GE`:3+EfGio`G+/B6/]M=:*VD-]0i]m_$?%2/oVR,c:n/Hi9Zb+qZWP47$:gBZH5',YiTf?Z\W9R#rc.f.Zu$^Arb"XF'o?S07+79]KHo\3A,Ip\K/*dXS<)A9R>Gp\I<S%R[N]%A)HSg4ZU$D&oL_3#,[/c,D'Ge0+=HIn@_mqT6!3eFP`?N]4;^6<1TcphL!]eI<NiU?@$g6jumIopaM!2LgfE^JrheiQ3('JKAHM?%7$nQEZhTXMcRe5q:3-391WP$+]:Fu5h4@bqlWiM;;_.J9NtZThZngJ3K7'_,=kKnmS>FJc\bk'JK3ik9]6p$=^&)BCb[(2B<_@cs%YDsE6n*T4)b.9Y5HEoc8a)>0(^JEaJC0-F:qRHQJF/?=+?E`3=lAb,Cr(6qNBeR0poMj&1s4j#lc9BQ1X0:p7rDp+c\lrA&FS*,3%fiG5?:FUARX6KNAQ^`qt3Eb/4Reo3:h+on$S^-B?q97:5]os=NkH'eKI5/0pZEh$7Pe[5H.sp/WVomlLl$K=,hd#UAh_u=^$ea!A%m.cO/Bt<cARoqD752_OHOL-rXpVq[IFPdSCTiRc8!Y(;S/gS2RUY@<TQa`%!leC_YiX/5&O5Rn#f4?YB)QIfMIQ[pbEbDFeS^.-m%4j!p#Q1hTb4#aW*T=R1X/$(XP;Wh,.LC:l#%b;)%rkutKjA6\ja5(>(GlA507Aek2/KZOiFQu(VOthOZ&uLu$N`Vj1ZMOJo2*A-D%F=5jgl]11tR!iL/Ct]8ReE[!PF(;CnF8NJ\YJ4F\BA:R0`\B^([dq,>_l\<q\ls7m:XZj>G4&+L3tH+&j>Ka-q/lc^9-r#!D<EOX%9,3u`YAES(=N#-9R8Prn:Sc-kqZdAkm]Vn`@_Iq+EL<3,0-=P]P/$rtet2T9=X@GN>/o6E%aRTq@r7Sof39?nk4NPNTOh1'gB(Ln%.='B5PFoY&/\EScDm!VA!@[['(]<&lVE]QRCK^4&T3GOs?%,C1*%A)+[beGnO(UL=pCS^9P*o==^\NL.q*?b.S4N0?=o$IQ>3-98%nq4FE=8kII*\>VX]X%j@C!oq&ms)9-b)!Gfbt-c>^N(tIHs(pF?;[pXmnOATWIh*BTBa.5CuA*KidUllW\=Pl)$0kgnoJ$S2g/FW%F5o%]@^CkL`E_IPSenH+iD50?5[Jll59iBuZnM.a.Tru(q7CYoIrb4U_pe'Wnl/7d.ojEjmlB*ZP+F0P>2q*?Rs!/o[T8Z_3E\=E%@O>ArqUVpcod:m,ZPe&"BGHA)2?0ejQFU=UENqF)NRMbAB6B@%=Si#3`g,Vs#As@EFkke:qXNUT&2YupYC8/@r/cS$/+'O8GPHg5%\Q6:+:l,6!;Hi>HbbWBXC0YQB\,O8u@K<dkFQLXCVS/CR_PATOm^EbfI?*BjBMT(>cBGh8rC`#PqjkHL(G^0;8bDpeXo;a^hA_m=%S(iAXb;8V1]fc2OS1<XdY.%>ml/D=9p\.%6:U')g2BS@OBlATk3B8Y`/*COJ,gc1VQ"/YS2*OtM%R91Z#ptNdkrRJF6Xh](%-6OY%$qW@4UV@(!+1q;)cTD-iSuO^!7<6p+al$KD6\2p=m7q6darn36NV2DU!E^A*n;VnA4a7c%*NC6iF*ilbnCQukLVNm!fVHQ@.uiNj%+0!qIpH7/kZts!;*lab317[Et5gf[0\5=N;D\8%WIdAn'Rq4JSbH;.EKWWlcqo.G7gK!`NgH2QHhHNS30V+:5R"7=&.Q6SKojRqk%qX"\c9%Gk$D[&hgC!Iat6.oYX4C7:!k>p1.![f>J&c_d.^-!f*R8%PTee[.lm:iE!AP8Y&gGqWaQBe51p'uW>+-Mg;/$$hOoD8;+%\@%6iTaC3CJ^GFgjpc`cBdP2n*qoTkQM-'Q0nt>M%WN'2(CgL%2B4+tA'!)OYT*f?ELZ5!8j&6@HHr'll*p8YIm#OM0d!Fm\V4mr%+g::9mHh[%f0'=)nrB17YSZs-)='+dce=k%R"/]3?L`=V-K>WS$a-IUlIiHRHq[qPQ:j#/d0$A?&5Gb56U=+q(^TSg$pnF`_gl2O%k1O$>nEZ#&AI%MK::6=Z_*;9XON(m-^1RfL]Y8[XL1rkaF*d-5F'6WZ(A$Tk5_MPsYM"FO$hT-Ff$)if^2@9F.n<%?T^KKHm?/OS%o;?A8ICjQ?k2D[DQuP"u(aC<2_+,=r0*otJ]YuqMJQQ8=Sl%`Wf]%q*7/Ysn/EhFA0YVKLT4T>F!Da`IJYbOP+-9uFpHeX7p^Ygs%%1F,O&E3rj:,t6#W!38-N>4UU&oU%U+"NH6!2/;0q&-2`62HAGa^9It5WA+)<8qc'#Bn^MWP#f.>mKpPFQr%^g#ad=BYZ2R&*rQ6%#m:(1[WCBP5AFasboV(QO`r^U=sS'4Z5N`\,WQ!T_O8[9OMStkpE^4r'#[Fj!*dO4hLN.r>f^7DDEsDFj&s;+A+fb_f$[R!m)JFI%RSb!h$T+YI3qW6ESO5^b3(.]NfF8#NoMPu\Z7A?'-'75Q;@3IkNXZ-n&F5\j3sSVi/sj$,JY;+;,VpQ<Z2bdD,e2n4*>*bl(o]0k%GDM]/D#-q=aB752]'Jrt(hGq<I^NC&6VQf!SkpD0D6+c*83I")MVk$8TqA+hh][-Z&H%i;G"D<?T]eV4J*$=_6D"JDk3o]Fa\J&*%RIrYS?fJAHOh#8R)j)gXBAB'$#g??&ZX69ron*L#il_/(,eCnr@CM`9VHM9oT0"r#;ARfr?Z-9@;UTGcj_Msiqj>Xd'#5b#KL?06%#Z]3NXnBNi<@b'T9.b#Z=K7I='F(is6?(eUnZg'XLPE1j7pb?(?dZjMV.QNQ@aK#D%GE\B:Qa",HuS7s<Rd`[QeRp/I[@bZXKuu'%4*N&Hdcf]^guTb3ClCOIU+h`(9&>Im37a]6Ohr!2q_6?JKP>hURe'6M,KJ$L$Q^]([e,OA[;EZ5n!,ZEa9s=;4WjY>&l9p>\l\f@%=-#*Eq@@5/"hn'PA_kfUd7hor/f#7/-<)nL4ON;VY0-mUd2@4#(^gtUE$is0+!UYFkp+K,rL^XR5M%XNJ6llAQkQG:h*1^TR@s4Q%R0bNZ-Xh&R*mCL'CMt#ZMa)h*:`13;+\C]j'L<#G.UO;`b<Ib>h8bL$T1267!uVmc$?BYO"Po.COs(+Xb"*4.[s-"?Fi47Q\HSF9%3^G^GNfIlk4X*<@3>MrSQ_R2"SbEq3\K",O(M0Qc7)7Yu(l:SFbHY_'G)XV@N$@\'/BUj.JcPZ,Tu)jWaCY-[Cp&.B)1n]L*s"t[%Ija;:6F@Y3.d:8;+:99Y&Zgq[nmlO8m$FlHq)]Rc?HBJb54Z9\%enE_(Ji$p(mF[H^6(FF%[XH1@[\&f(+LFT@o62.ftNT[iK^[Q%\fkT8g?O@7=?9-q@abm(7\3a24^PWH[-fS#MPZFd+.ZbVr@#0\N_+lLnjtWX>YZil;Ai7Sr%mnA%(V<R>YF,'aCJMJp8=4#,8Tj4%"&2sHUjq"ABBG0UD.^5d4c>4!><3(9l<Qj'F(AG<Ur.qt^E?&o:1/?K4"9Yfg5[/l@"EY?\K[LW(dT<?WP2<X$S0d)br^,"[ds)Y%hG?:9=N+e$Mn[)e"/,nm+RP29Dm]kpW%Z_70sbk+?P\cAZC+CpFVoD=$^hIiVVpn>M%,g7:(F$ZL(k3YeVH.J;T5[pMQ(j$`[WIq%OipP.Y:6YNedC*#cC\?il,qu*od8O*"]b\d4d)A)H2g_`?BG[,/pli^W=E?fUH\_SUUbc^qa%EJeTUBRI5(e[eEYB+VaGG:JA,`b%lkM-h*cI-7+*YcN;pkTNYeS"MiQWj[B>[VSQ9WR.ns><LICabT)C>4#97'igfuRSCWWPMID>/0.]u<'OeF*ZfG?e1/e;U6l?+5%-%kP"'>$2HiiN&B^9cR'g`7lT3P`VJ!5j^%9Jg?&uV1]_*3*HsC^5k_FZV6)s$DC2Kb/lL)N0h>q8^9+7&n#r.%Cil)@;p\7@m)"*Q%;?3"glUE)P^.4b+7F6D)BDSJ%o#EoHS'3kSD&]nRChE[T@Zkdn.H@dW+n&JBClQ$H3De,1a]4Op\@X8NVjck[Wp.6o=fA4+X0:Jd%D_C0\I,ETBf]&oC?dm-/d\P\3X=!Y'8#ePCC8-C_jd_?G\pP>obs[GJJPS/F2.CHJkOueVX$Q-[DhKa0f*'9N8HGi<X82V3AP(,f%B9WPF]t%n<Hh$MiBi7*Bro@o"I%7B?4=rCRg%b?XT\PD//T51]qbSTX4YH!jqS)"AhYksJ(5XD?aTY#Bp2p=I>Knc9=%S1`-D)?i%@UkuMW7c@A!SOGiX"O]nqtLdD8)'S3%eTSG+(kTYi4Dlm]Y#J%-noPlrE,0+OL`+oGtUp$GW(pV("[r<Dr=n[,j8*M\\?itIc&rF%)<lkV:]VXth(ocNJ9de_J=tqaFZ8K%Q#CR$.eokBE_)93.pTj$Oq5^*ceb?`A-URSbC\s?8D%D!)k+cpAC!0WV;sk"24n0qE_^he%1khNQc>'3;[sbOiNT50uULHKr>B8N?2\.qGGPr`AI9Y:N\Ks@eYb)f;kUVS`SBG:A&Z[7QW.C-Nn:BBkLDit6i-JBuX7u@n'h?1N%a4+'s@G]7VrVUh/hgTJ[4ITHij5KHTe4P%q)_C4@Tu[/T3Wof!mU.E'KFVE@+k*B6&iI&8\'$@GmsW"R;/s`d5)Q"a\'I"SkXBJ*%#.g:2&@RRgJKZeW"g$T8(9''BC0SK+JSe0V9^<dBA+RQsPqn%\h:Tpck":(TGP&F$1\P)L06(KWc]usuA#D@hL:XY+F!\5p'=kAp%03R\O^32h6k?.nr+!C@)+'kUgkf],/f8"#[Jo5,MTT`"L3qUoH)ntkL,40*ZNG!DME+a7Z!:6)aTtXc:Y>3,tjh#G@]!34AY.EZ[%(50.8jJro_/A+u/kb"E3LH149Q"h9$ZN`E.(U1Ss+_`Df3d*)#&5RItn"!St[CH`-gqN;AX_b/PXiMC8L]2?"KBAeN7qn:foX\.2%<F7ADI4B[RlaP]$3T,*sc`b%.^Wp5lZZi#WS'n"\4KI)LMLfMLdKi)1<-=m*qM[F]Bs/nKAY'Ie0jeZ3YP:0:!Qai-;7b,G#L).n%ZkYc*$28rr3D@Q?,MjVs=1f9kTc0!h^UrDJ?^s]&c^']=^mrZ5;edRRlEMkH-pWPQjh@kcC?^Z:JYf$FR(JD_It$D!Y+q9I()7Ug%#E+/":Nibe8:+V/k8[/4LZGu@,$0Kf.F103,<m)+Vr`YR(70ONR$g1NJ+b.8%-32R4tkS+-M]aMP^=T@*5@J:@FACgmh@;d6CXlV%8+Ab8ngCWIVXM2*8-!^;.;kLc%G=Z0528fOLV<LHN%W#U+S651-Ot3H7qO,ZFk/'L]6&5MpaEL4Y2AE;^AWBlO%?,WEi*>Sp2M*M%NNSE[e`YuI>c8IM\oW.<i3OCKBgLR%qm@FYGk'<T"P3r:1J:6mj@)]qNGOkN(`-ermBjq.>"@KG+ldojW-d[LXiQNOL+F(S*7Aih%H2=VfSO6TN>4G$:%#L3qarM9T!u9)B0FO'L*rjqqTAR3a2`%r(&dc3r:m4%JrTMbu$Q-M@QLK#_;]fC!]"<f3/(:B0]qk"PojX#D%lM",gc8h<3K\5)Z!11@(O-@="]P*HiAE;WP`\s]CW#l!;iS%qQLkUuT`oBk<#L%KSHhmMZAOh0:ZRt:H=PX7g?=:a=NsY:E@*XUF%_N$j)^ld;4,p)EDY*CV'G@VB,F\uI\c@;#$,&ACjl4@/c]A5VW.'qT3p-KCkOhth;]F];7CPXbq,]]_m-sCT2=5D?ijejJLK`/R&%L]Y=Kqt@HaAC4+?q3\!(l#Y-_O*$O;%l*/3If!'=Ze.Id]tnSsgr1T8\[%$Tnc#iko@S"ZJ8Fl1P]3;bKTDa5b^,:Bk(]EB%kqca%oO)/l,9EhL\`,Ys:g=bH^m\MHZ3LV[nGj9aD4<[J;u)&QY!8fEpXY[!WSI&N0e5DK>2D?^iBGL!W8SthcYs!P:ELW_Wjj7oJ0-lU%5L6g)\F0ClnO-t#-nUY,.bnX8m1;_'Khm9\2GtF9T:b3W:DUiCF7Ad),rOoEjNeoiSi/u;p>8DJ^1Esggo$=M3u3eNbuu:!k'jk*%YH6!P]JUM.bA4`0+),<MRX/uifDA#ImFVHNRRJsGN/`U<`ro'3Y]/P8p<$SI[I9rElM:pMp>"K(9NJpOq)7KWdl3RS<&&VF/$^Qd%T947redXQ#?ft],J%eq(JNrr'TJGC[s85OEE"4]AQfj7O^/YVo_B$XW97h/OGjY"l2Xf5qGYm&%?UD&i`<m"Mnkmr68&&[.-^s,g%qrB9HSbsKO%&9`]&D`D>PVZoD%QeAH1FZt\PT5#//p:.<Qmk$P>;//gkPo?DlpAP4l)*Jd$bBj/<8/fHo9]DFX`N'm^X\gqCgo8a%h`alelXmP)maQ"/C]Ead=tfj#>-jQ#8`mLcM?a@iZW)9c<GP0PB'm(P2'q9X(-s<ZA_3*TD*+RqBCB@1gZ<aXoW$\`$uBP@qs0X?%%/qeIW7PY0Vt\J1p:ZL`S?KJk9Rl/=-@9c;RTWZd2!UN_S\-<;R!!=qhQJO20":0h\l/4'H#Y3TA,U[7gHIdU3c_eNL&JD$\T7#m%\Cp73hCIXk>*:I2Zu@_4rR_GNdRf4[IdVat34$9"=-;qLRCQ5SHm\HjHnghqQsI\F*oaZX)5jdP!"X*_#]^H(rc:/b^%o'oe[EgL%:\fs5;X807Li*g<U_<DpP/tf$k9JMSEdjQ)!Ue`,&Z`V3MDWp?<t"c5b3gpGZgel]?ZLeeFFJsEB\$I9OpSF]6a>ClnVWLPb0g]i%Qo&MX(Dg0*K9[`sB#Is57#F.]b"?_"[n#q\S<G#lm/PdK&!!Kcfr%MSMA%S:<SQ9N89:PjVn?(HPKtmii&+W.]jkY/pWaI66.20;%mogqLRr#jUjWnmhaW3bWIX\NF,d4uD.a@d/N_Y[X6#_:PTSZM(UP_9S.9b)g-?X+2oNX#nZ>L2o87oqBcT-/mQBN(/[9r1Mik&2S%gM%A9($$Yd%P:g*psL5I>@kbM&+2(ASmCG,@(]McrOcHD.;iM=YPp/ggILYun(Z)/jD?V*a6l&@rGiQc?Z,0lQWWG1oiiKpkMrX#%O\u_Lq(bJ'd+u`?RXV<]hU$P57/a=1glWmu3"l/i;-H%(hqXoRIP^5a8Y)rDlPtX%d6/t@PH2lWH[Cm(P?b/LMC*'!Zg?7k]G\pB%\2Sh?6u4/#^GeUlY[a%H^u2Ff3B&sL"t0;uhKKE(J)q[;li'R9]i>Cq3-.99_gMuu\o]-*?!h'P%r6:p;Y`X,q@40H@0)\_/`oS<%JM/Adn62#/FN-,>.h4'Cieg[l*(o['3B*daCZ_Oa\R3Qlab^ok9_nO%01W?2lIhF2=UC76AC*u4aIXZHq(]4rIG*1\p"K'h4MJG.%Zf&2HP)nC4(05k9Q_V3\ZTV(\Z(dW38%>ie!Xg79lgK4(4HXfDpFf7I=K$+fX%pj:hgc3J-U0C`2EWp>#/!i0]UHc[MMQ/]Ck\`5%cn`0O@pJ_HY11$A"5+,e2_CfGeouNj1<$duqT:%OKX'arl+SF%g"DA04`UrO>?Pkrq=6MVZfSK7<*lQKRX$!4gY;>e4dO,c?hA.B%_-BQ<8O:@7pMk<nF)G##<8_dGM_A2*n$+$I0LO^XB\C`"P>5^\-3>%4QT.4reG>7?M[R0bDUsMg+o476A\gP,O/MApq@Xo5D`)LS%A\8/%]50:kfmgS#mQ^XlFu22H&\X.AJqoBcm,!uPE`*_fMYGY.N!Vb1bQMt\=`b.pd[\7-c/MgJo3OS-[DaDJ0U&,/cY(6jKTY+W%].!1]ZWD`H.22q084OnD7m@X*d\J^1UhlFg1a8KM5slh28]C7rh8m-JjTOD\a/+@BrYgSZR7*tbJLV3V;IcEAVL@/=XkR7(#.-J(%1_PZG"I!&WCc6s$#`8&b+nBi#3<fg$%=V@?JqapjJ*]k6Ci#dPc*tkG'C&%f%HR]>r><,.eJJYZRo$9Um+tUe".*@-E-"a%p"\XG%GS6X;(Xar\5lq\LX1[?T#T8QDR!b9O6jTbf`q"[)14m+"!sO?kAaF:_A#cSkZ+N,32mcC"4>I\GnTfOB%K"0A#qYQPK$K+Mqds@j%N_i0lTOjm4E)/$>;Lp79&1T>bS7b;48)q!:c4,$Y&V`ptfBTjn8a!RomKkH/FTDO3Wgh;'lGQs;_=+CncC=+g4i^FgWgh;'lCaE`%GL^9%nYS?^q'4`r2k;nXZ)E0)]BVk6;]T(8HXA4g&A&2Hf@5e:0`[i_Ec&L.W13MXl,^@C]V05sn#&gSK&0=j)<:[;g9L#UORm-#%4]CjRM-"85[#49XrbLLn,$IE=q%q#N4M!a[]W1jY2A3'I'Q,Hbm5D$9VG\V'Js*0<YE)1G%a:iAg0;79>ku"_8Z55WT*#&OVsPa0%XcV%+'7Q<NHMj:8/63ZrrE<)n-]_[_I*-AOHDUI2YMO"p3e&MYYitfAq"gYJ>Y2NB:B8%r>QfA;-NJp7C#$mX!ZI[D8obmM^\pZs%T31Br[nHLG0;5mt^luOla!#j+P>lR7nfLF45#7=P5F#ao.paPB.qb8>+_b(>h:@d^#u`G:$AP[fP"+GG&;V(R>#$_92\DurjW#db%g,[-V*.TKj3Qk5u/C@24!16(rBBbkV1^d-S=E97e1DGa*VC"qBa2jYPe)6>7U7O.]S^^Y]7g2FRb;k;ln.nTPV5Vb8$"TKFJ\fFg%Q*d'`(U-2c=O#NR71cfF3Dkg)dk&t29<=Xqg',#&FC0$()7'c+Eng4F-]V1<oJ<;;O/ud80gB<4@g[8#af.1W)O,#tNr2rn/Q]/)%]1ETCY%$L/gG"eVP-ZaZ-?)H"<_Sbp2+Wjd*JLMIJn)>["NlCP<(eH)ckWZj@?I]2VH`,KRd)?-Ei*7aSr1m;>I+pTjerA4Z@RJD%+anQ.gJ\6,KR`*@S7_mdMPO^+Lp1n(rfp'?MHGY0MQGPJW'GoV>?;/"MD\Ts-keo5(":Ta54B1f+]QY/.@Og=3e9`.@[WBWW.;g,%$FVdcU<'5JfSjCAZ<jK<$:Tt%#n8Qt\E(_)JeH84-/fL`>Wd9h0#.NIQZ>@m-V_!k@$,>RM@:%VW^=@m!SHA3N#ne,?s=Zj=HO_j%eWY<sYY/861^GH)Gst45FMT^h=o<,GV^sASFe-T$'PRb\F)m:I0\mqlTPZHDOG[<A&f%saE:f<\0d7lOKHeT;4X+Z'^^A!Q<-3/h%l9Pm_.L"'aJgfW3dV;Zm>h!e\>ll8ri9(h224@t:$k4a((Ooa8Mn`jP:l(?Tn^e1,V\D77JnBPqfUbZ#'`#[S1LS!m?'E2K>?5i\%8mGNG$m;UDaRYB\MP3T301rb@M0`Dn"a2N=Jd+si(/[^K'fhr'[QLU(VNTC;7ofU@Z3lVI#[YFujn5G;0^M]8)%@2tIGEiB#L*tj%31Y+:d"&'HTbjN0`Ze'`AO5<P_N\i5ShiY$KY9nBMM2_7VoU>iVPbKf`e#hf!*Gs1<*Pdl6kQ$lGWikONh#El+G";AVc,'RSWW3B%/p$oN7>=u"4n`77TW5/`632=fX8oi3"#Eq[!Iu>D::2>NJ6G4+/ruMNngT*lWIWig'gUA94<3#il7/gG-9F\!"Kn+:Ue6kjd1c2_%J9'^UM?O0R2!hiK(G&@E%PqIci2I"+JD&G)*JR.L]ea!3alKit?T;rN@nqS_Tq>7WpiR%dbV6Rfr$4]77F>!-<SarPFVl4@P15&J%#Q\t$6s"H0;K*mmdWI6k"l5<b.i'S"+rarrF20q;$Bfk[7BSWe'tO6^oKmLW&V<%p1)8:-'PTR0P8KmKYTNpei^"(W"GYVtKIC<*%nqs//%)(G5QO&G/IX^g<EM,H8\]0nlQ$AOn!&hbnjb3mS($Iu7l'.sYLjDNt'_ukY]P\Zh!4#@NgML0'.Z5,XWN%+gSp2^s>\R??%G_qMq?;HA?a"EU/di_Tq<XZiR8L4Ng;)M-4#Ha]a_%)@)iHdtfJJAJX=Zr`C%(k#%QNW/%5$kM1"&f7a[i@u?$s7t/>:+,#(>4]o%MZYVqou[9\hps*5Jr(Bd;;5"]Co!oK%N1$7dgWGjAe<4Q-6k'^'\ci&K:&[9VkT`'1ckNE'9o1)5e_64i=hG(iY.QTaB:%?F1i5T%n88V3V'=J6W?UXdT;&P\ZZOGJ72b"p>Da_@'/,KUafo0lUJ#&*E3MaX<(iS-aT*TT;D=qU(I^N11&sJf:TdFs/0e-;1Ii=eehC*.%G&"7;Y$dZ^M@qPaU)k+qJXriqTRdc370Q]_Pisf4l_^R$bg$Bui5#o;&hM0g1pA/i.'"`gL1-GFm#iKYkiW[^-QD_P-Ym<u<QVI9%7BXJG,0*Z=<a\j.!_[.CO_5^d12YL83oJY;-T<T]*Q.BrF3%<3iJ'dRMQW:6J1*0Qh3P'4RKU,p=H6l=%EHEsCNe15!5a&:C7>=s%X&2^@=nPl!.+6HL8^nLiN-,hFih4B@/_PW=Mqk:+<923>d7[Z`Ll_lpBV;M#_,o\G*fgrrBip]O\d,nY1T0>ZL_*"F<)ul]OGdH5%[S)91P^\'9R8R%HF'(t(5mq!#QI*(r!"h7Z.SeY:N0hUnY`aWMMW=hs&fJp#kiuH(nIc_@@+.,&JFO6Y9S:Fg9Tp0G'I>N%$I![0%W=,Fg"p9@//?Ask09O(%n8o@7DNpL/@&R]J3ftD@QcNPOP/NbTJFO6Y9ZJ$toW0`kM%$9!A:r&3!QIcC0X,2MUIskf,r1hk[`VXI%Sr+-u$q+#O<S:70,ncRGWum^9V$Vqma?Wp[/2.2</!,;j=M#GkpfWj&@%]YNMZakMOhia6>`a3H$R?indA`0R_W&3r#4ogVjlj6F%dL%h&B:*@W9d4=i&c;gib`/"Rmb1'\_ha-RL4^5ga9o^s?pB2O,Z+%\MI_)kB#7q5)L=\OE%;@Q_BKqj,r&G.:jHFcYt0Woa7L*t%ZXA,0C,Csld*j1@/ZD;Sm'.R,&M.40e!)BJ%M#<?4nQS!aE5:U&Dc?Ab!g3'jGJm<*;pV/LcFT\aaA/f!7!Js(0r)\=2sB17+maX%1mOS`Lufg<LJ\;U*XaA%lmr;"5*.2OYd-ZIgYo*Bl@B&2#1;tW\V2f/>L`f\@T`[e-VG:,)NYpK.jW0P>mAYa8H?OoJEhL"`.E+6%3$E;KHE3?%E1faE5_UN#!RJ(P_BI#1.hQ7.W_$[;O@stF.?MQ(OXV*WSWW4m?H?#s?5iSdS1ZYc(3OO@;PbQV<]-ZYW)jDUCI<4a%[g7A!%g14M<&G0g_0NC.bu^X6cR.6GX9I@r5YA#2K=jaZOB!Qse.!;/`!Vh8M-l3<\]F/u>gMMa_![(B9G4e-H:4>>l*)?af[T.!%E'imui-[UmK2jT+Ms`<%"Y6LdElhBnX-?,e,0"U0L<MP(nsV)<5d62IP,+,3QFb?IO;PpWP`+>Ba;#R7,dARD=MR0T'M+t]k]B*?%OXh/$d=WXKU6%bRMA0(\kTIAV\lg^tN]CiL[k*U,3=65"aqYXneOYlr@us[#82-3,P[oiKQh\CQOLW;$Q&FE-aVA)V$j`J8k$YXJ%A`7,f*rF%;,_fOkga2fS>IV'$jbQX?b%/4$kQ[8"E[+<d/ji=c*T0@qU;.slP[ul&'qAZJ=ho-5X8ooHTKRJR8Y5YnX#lVQ#Tu[9%)lB@]3XK;@`(Ve(`=.Yu=;se?L.1<H$.e=M6OV'UWEEL]_)8Z;:Q[s+;n8WR)c2j=q#O+L+tdH>U(@Ee?KS+XKZm/W<4RhY8$;%G%5o)3r<Z&(+!qO/YBJce!7B-HM4kXR"ck&:sa$;M@]OG%qemC*[GAQbPg`dEUWn_N!"KOSY+P-]F<(/`WloN/R</Shp!Ba"BG>,K%%:b!Di%'%4`B1k]1McA"rKjf/BlQfr,h=*I^\7\&h@(E"p;nYpMDDlb&H<qeMO]<',OX$3IK97:9)'`*5U:l]T\QtM\0&%PBo=`Kj%<[;IKJ91DBPACl1GihH_]8cE\QU="@DSO=_%eeU\d@h^`8_mL2QOFrUh12`C3iE.EN.Rs!=R6r\i_`>h^>`94\Y;j.U*M3jObX8a%k<<uQTcmP6+r*)k<)lKr!AhfZ#Y-e$#+A,i+K]U)cksslB#;+ZQ4"`M!%[=KLtNi09#qnHpPrt0K#W_%Up5f?_8+l*R&X\R_;/L!%Q)>q('R.sc'"<X:4bG:>,u'(+h=.NSLaC%eKMIjY"SS#nJSrPhL4Bo]6BPbn=s+Mtf+i6<%2^*tVX,/8`q*pXHSLDS.@)M,-<a)5%ob89#W[q5iiu)1p`M'dmk[\V@i#*@?%H/(U0QN[70iX*VBr7,PR%7V"ATkT^OdYA*7kSg2Pq0HEOU["^.61KFR^0SiO>o:'ZG9ZS%%9ORZ-#J_E`NV7W"rK?fU#]YkRnOP`#?[*YbJ<"9EC3![AT3d*U<+"R%(P6F:5`80"GRA2P(=7OM^XPt0B2nRX%AJtE(b6\UHk8X%(nL4;_p/Z7T1m4GjCeiQ$NUr1+:+"H%eI2cXs?939S2?g;^=o59S2=Eq%BK&-:>)p8JtEj8W\>_7=pcHj;tR^XP>$tVW0R4dM&IB%!C`CZaJ,sqTI?!(=^4u3'P.n"Mp0=oU.bRXfW<;=;'l=Lkc>1@as94fT9TFGR0:STZne:&P5naE<X'7L&g3+\b(-3[!:i+O//FsR%!b@Es),QPhJ1O_O",\i?O@<qr5Z&j/Z?WJ[.*;Z8$e`[SbDRW"2eX^onKJ9u7;ZTq;'l=L\?-/fas952F=Y9!+p#\n\$G61AJ3pO%4n@5R!>p,*3m`tF>n'nVJ>KX6Zdg18"iVT37hsfHqb5XMnI&`IEMHPZHYBoLL.afpjerq'WC0(+r^4LiS#12@cU7d\)8HR_$7-'i%%0]\;7nO3-e<;d31fFc[#mRXDZ6.&#=Z/ETemO:c%"i3rZ.h/aW;uq&i]'hec$Re%TOQiI%tPKTfCaaNZs+`:kLPg-i*r"`kr(.r%k3!0k+ZC*io+cDW**c9l3Iqf(fFE.'i#?-VXjMdU.]`olF-0(&okp-p*H2Kf4:V[U:;t^s$2D@a2I8'h6S?3sKojMonSU(o.ZFj0%9riLgc(QG<"l,A81j\pkWl995&8O:X#6*hp[t#(.l@:9b102d'f!7S:j@R;[!ge;Fca8H9kl;7L_sFPc?oSB#XJ@kX86-`n-"!lU%8Tg]EdVMKN&>Mk+iE6HkVedg;c,>6#En/!)q)7IJ;ZbOA:_]_Jcn)^q@sc#(QHEd&+pJAo4N]<F;p`J$="82Y>cQncJV;ZU'rc1R%+p__e6ml6`;FfQo"kW\-i?RHaMaP-6GBb,u)I!HNRoBgL@m!k&\p?`(?of,odNt:o"g6KLF^2c$(`\`=PWB6%l)++-A/j^EL<0r'%E3-Q<;NTWjfP)F&RTr2$kET-[9m5*]i,0W%M0g:19EM5K)b,].$SsH"V-*tGdj2Ak8McYl)Y(n:oW">i<*40t$4LA%-s<2\-l6PJ%0PsFd/"<V7+hnY(]LW4R1CB_"0KF^k1k\]+kdVAKklab3TSs2C>i\ML>gX9`)7qE>1(C<UU6JXlh-ns44u4*:$iQS>_Zi<17Bg"[%Lm!E<GB=E*BQpR&3G]iR\U#u4>nk+Q^#4,kX&K1&%ULN6Q[,CE!%J<uJ!,&D\=h>_[fAP$S6@'3_M_g4WSo2AJ:'%Q+Wu<>@*?!:%[jjrO;PuLG&t:rVE]qbPRguHVgV<q=<OO=hAUJ<i+uY$N75i@&Fs[V1%D7K1b3Oo@0^POWN!-u6!D`/^G"mR'Jok.]62_$tCj;)0%(U:P]WpVuUYY]55,1hueOh4(!\5`*K%:S%R>Y!1`Di*e)nnOngbhuol6"^^?o!$3+#aim.(==0q'j\/$792^`,eJh"\A8;>[#&!t%'g/58aulDXd0AA[O[L-U&rnI=^aaWlQ$-B.9=k5PB!=V/TgUb[fqmfT8s1aH'1F$mWo:(9)$K"o+NFuPl=Mqp&ia`5ZD8ZkISrT]%U_7htaV#&q85RGZMZ.SeU=Yn@cGfm&8`EH7)Al0Oj&6X,i/=;P&lMP.p]lZb"),OqbHb[#,00'ZGH*$>[9UYG<7GDM+X(LH/LY!Q%2K!dp-\9jd'8d\g"ink@3KH_V,BL+9k7LG1&!fh@+Cjnmm,q#nbfaN_eeAZ#_pK_q`Zk.:*g9b:E7cL?#&uqP@'-E\epnla=>%Zs%@Ml+]Uj9:5C6:X5[L>roMRsCfVkSdt(7$5eQqhC@Q;&!/>_]$u->?@H<utr>Y11TNn01.IY:06W1Nn[_]0o2+*8m,.a@%.:&mu0J%kZ!Y#6t-b]1_UX%_c,C&?LSZf)TIc1F*YRV%,9,ko"`C1nt8?onXQ[+%m%]Z$aKl4iU2W'k].8Q0e)ODj,jQN/*$_P1fVeQK/Y:i%^*&IQBp]:d&I/c(/nQGOEBlS+l!0(cJi#Y(;@sj$W?N9]#s0)Q5lrR!k[a@^hD":oT,A)iM$(D2h)[S@-4O=3$JBqR!0q1V9ukKY%R_%pU$:I@,LufiMc7R?l+),j+UEJ5V/CHE+[<tXt<)$]l80tDbP\[g1mf0_>]fgic`Uso>4$7F*!A2UQs1:UGO]5.G1+EX(,,)$B%L^?VWNIiVKmCR"CGN[1uScf:P[P*48f]0O:[s.kDSN/LDn(,a@)mCWdQ1il+(43T?nS(;BB)R'Ph='J<nGu@qct<<Dam>Y7ge*sN%3P(nL&N$873JZ7F-l^2hdY+5,5r9*m-m$ch:eIs!PCN!Ff)um[oedLW\0eeAkdm3F4]babqe$)Ni:NL_:i.7Yh^k5J`hF9Ko,n+P%f1rGd08MrY%R+_hD4?[m!X;4-$PSGFD"^;^:>>6/Op6dF28DVXRJ,G3R.GLujO47t_af-_LTf`%)mfHp7#ek!U._VN8/B@>[l#:+%-1[@)j'Ln]hGcn!%4;575H_WcR5F^7*.jY:>NR8,7l3nr4D?hrG^?:@1B]]bJf(^c1pKE+q=1Q>\hn1`=SXQ=i:#R".:V[#&^2]0%^?i\/F<-f.o;;gOHQ!B2h;CRDd2lJ;E)-I\rL#"`#SWc+g4SR@m.KPJXV%HU+8+6\RF?.b7Q5CsB[%OQ"R!O[`h3osY_fGBTgn!s%?(pgaM2h2>'#@%n`or+a,E)8E7Lq-La04A>+Z888qWsWth1H!Tab>8?YQBa<gX"G8c^<Dk=eSAQNm'0^00(iN(@dnb]Pp`4YbjN.%I:Sr?L`dbT8\dj=_+4]U"LkC*GXtH]ZWlSZr_]0?d^3sn-b<^W.fA'ZO`ej8k'NQ,.<_*_V[:q_4k3ZA-6tgcVCfK1:Msp#M,%!q%KBIU,g[1b3)bqd;qs$Au+n%u^&ppo+d@0DWO-B>hSH[r-bQ7dm<\=3mQWjuYf%cJYmuhqD653o;2UTm/RR6b3Gh(dp9/ep^,f-21%'I"rdSX,`]Xm\?tXi1]?lC!uk9\4&Z5P`bJa]+gBlc@lRch$<cjJ2OC6%Y3Cr64js&"fF23[DNrUHMo`>F/@jI,?rr'sN1Sju_:@%FXNSU1_^-2TKJL0$Eo!5P#;>`"_uh\I3dNfPTJTnfj90*]/@Gn];=[Nqjd8$qrlK5lc)H.ok4eb+u2XL26]N]bP*=iAlG,X:?GIP%HFkAj91e3hV=_9SjqKAi<:g;N`$Q52?I,FIo3[2pF6:u:/5+Q^5kE+QRbLdRd[9#-F)($hS3fn9C2QeKT;;j9]Z2?"+ecLs2%`qd%eSV<td+E%GXDMT08[J_n*o']3?@V*u28VbnV=r^DRe(RsjO47t`(,7KBL]fa4JJ<B>I<1k\eEX)P%uE%dLjl%<8.VtV?JbpAk*>!%bB.^34qd8]OWN;I.,mld,O;CXrCFTq,-TIo_`_$WrgdDf6*)Q=$$3uHiHAQU>+]:8SrZ?I,^#ODKiSeI*,c7>q2%h5@WP)3GD)c/%O]._T.$j/JQAF'V>mhsag(l]VTO(8l$g)=iC>oG0V<&L?Q%F*j_^R1";k%R&\rU)/<go4r*ijk"[`GG!8EYJCMc`\o4k.\j>NF;6%`p^1d&im@Fjm0Y$[`GFjFdoX>2n.[!\^,bAV7G1uR9,=i>o0]SA6uO>K?G\ZF*a6`#M7)`WQ;%>4i"YRH<]OfVU:?=>B.j!@R<2b%f2If5!uX&m&(r_A=OdT:'W_&V9X/B%2lF/r:,1"i;PJ*hQ?gG<VKIcO@*=Fp8s^X6/bADL$[c(Vdp(rL_7T4Nn]74Er(Z5BMHf3X%Q]'$9*k)q9-?Y5+`FPR2+8k]oPaR[@o*9c>(DVr.F>$fQs,3P#L>`l6bUJFO`P6AK]\9&bOWMu2NZr^spD5HMpRP=/*lj.BjqZWU%[);q9Q?gFMij.07O]-m6#,Zh"gG5rLO[%<Ug6R$'\NAe)F,EWQ'le0W[l5q-;k.K/d;UC1gbQ'hU\OQ3>NS(2l-[!\R9(r^C2o,B%1L4+&K$r"u='RMa#bkqC.5%#iSB(Tt)q^95`NXRkX;IPe*^j7pX.Qgjjq['4lK.`Z-$+qL^q"s=Q?a9=OR!;?/Wj*:'!4++-1d!#%*9c>rQcpspneS-)Nk*img4U&er>h;-'USViEQO^pmUCuhAAp.lMO7/lGP7>J`M$G4SDo\l79F*TmA%/7.h8Bu35r.:$)CZ8]]!5-%6sa`)jQu']&p^lIdFeD?9BHuJS\=^TQ?bnE$d3u?DOFGAI8OhlVRU2D&Li0Hhm-hMdTmoTb*I=lqL"7O]],*"`NCYGS78s<:8U##%_WDPf)$uA`#g-Od`@^\=bPgZ>T5odKWj,u-EQPj;_KWY]8DGd=a`hfF?[QD@^mZ=(b)ps<`:AT@'pm,p_N&t#YIJ+LZ)KIu.5itQ%R3FC2Q!52obULQ9BeZEoAR7)c8/T"2MS*,V(cA4g,&a@]?T>Rok/a'%^)i>-^7H1,\ZM.^gUBRW%6:t;4h,'00rqFn.HYK^?q$1F%r7X4fY:)T7S)TSk`<)(%#MM]1($G2te\?+I]OFD-n)tLQ%#Q>a&e38AkgaWiX_A'3B8O>hcU8!<_X@b'0\A$ah2TLO3eZfS[ZRtJ%2fU;*Vd/5Q./!DKBf.7>6B8rHfJH'S?OuM/kZ,5,8&XfP5Cg[P;396%c7KYl>U&?/+hdKJ*I602C)a\GORss(+FAU,-_6XG9U'`n%1,\XUD_,tTCD+nZW>>5>,hcNZ7E_?C>(TF]agYg+YSpd8:4/P3bkL_ar22^[G:lDrRS!$H6`11r?!ChOI(s0%ILrD5m*,*Jlg<.*%':kHCKBIUJoqrn]b]asf0t(WIH[WVC8hO[DSkgGR?fk(I(*DU"L*/pq#26[tMA4qP+:KZ4UpRaHJ5dde'Fsb=L\tBeEr;ONZUWnO%=25d0/Z5ctdI%BgE;,`JNJ[A\fQ3sep@e)<5<n$2RafL&\2j[r.ch1C?Qhk2cp:>.b?a2N2"4!%LXU`DBl[5A5>sWAGMpI.5IB>u%6?q8`B8tX$G8b?@aJ.2oo\A]2o._RQ+(O,N)J\)P^1OM.]GY(_o95\ZHOGL?R7UOs;-BeF>W%"rQFuP-o@;eif=!;XHo:-O*X^U=%;]H*jmB;)ES(k3'!k6?V]Bf/BYs(@4=Wa9&>LQU\=>\&Y`Sqs*RtG+P+7fa!$=I]fS!IFk2:;4>HZ4K+H+S4CBu?^[HIUms,"3<?%M+=qu$JD+EDuXe/-:)u[g3b@`jl_N8cVnDq;VA*JA>0h,72)dX:WWL(KEW0E!#JI`.d/(]Ctdj9QP$-)?&ST3*=\a1o&.6@LD"Ql%Ukt3*&\sSOXAR6`oQln#>3.YAjP:"R@^ku,O2nE[8F#^sE]n;d]C-qK;gM((Qbhn=Ri?*=h\mSeO@[kYof4d$[s]61,>@b$a*Q<m%PkLs"Idrd/9U*#9loYMciBCi(b7!f0FcA@)_dgdWQYUbcFGnp$DgLS:-$a6H/K<lCh]bJQ++PK[+n7h3gh_O;2[6`TOY9)*@qQOG%kcAoRnE^GSqX[#(#5cEhdds,[c[!4iM=X/AO(R[^/NQPiI+Zh0?]T\/^5L^b&P#_*8EaPpdo#MgH$`/be+2Y+>,NC'FkV,f3pjT:%^?N#@7-t0jk\KPPe/*">iZb+-i:Ff;@cU4/k>RLJA>+P(+!lO5l..1:'+VcE$FOl7hqmL7UX3#MGI]0%6S:3.QW(V.i*?gWI3lTt%&-_XkE[EiZS3;+?3IC_]jfAo(QWjoa`d`+<:IcgX8l#Y'E")HfZH1Rk`f[;lO.l]:U5K@89oBQ=9o]c@9aeHc9b+ZnRM=.g1gNM%%Bc>UZ1n!ZIR`5^n:$)VKVNF/=PKBIU&r/_r'U_4!HH%ft7HPLO*T4[iT-!I]5VJd8bm!JSkb`Pdkb^ikoV6%OoV9GZFON<8FOMHV%]'1do\nN04]'11f\nR9Ch=S,ph:0Z.I^I=[Iam#2DL0?cDL1A7\$^6=kspdtl)&Z0l)$tRFON=cFOMIA]'15J]'5>5h:@d8duU6p%VN^.^VirI<dn00+dn,c$l(kj1lD/)'Fji.-\gapTSbAReCO'^$9:[oK:Rr3EVbVQYWD8?3<%#rN<@:N3WfuRbX-4m@eP4NjlDD[P%Fj`C4Fj_PU3b]Y]3baaiSbD1*=uT0!Xcqo;Xck+-ekOV`l__eLFj`D/Fj_Q(3b]Z03bab(SMZE-S2A?;:7B4S:7C6/2pLAK2b!;1%PMU;QP9RQa8b;`(8X"PcF<2JN\nSG`SMZBDSM\HH:7Bps:5\1'2a-c-Rj.aW8b4pi8Wt.YUj5)eUe./"dQF[SdNho*Bpp^21te3j%R`CgkRcI-iFHIW(ORo?5k&I;_-FqSsoD$d+PPj[@GoZ+F8Ifmk4<AXn,`fNNRS2HnfqhH4a/;\$jARGNj&@C#EiPV+H.>WQ^$::%%[ThQ%afS<aa0/6qjB!_Rj&d['EibJep8jIPH.GRU\CO66>jJ22I-[S"^3.m]kIPB5F.G.KGF^S4]2"g8]hY$W?74f\r9L6%rcQXO%%X-8G#J4[k&%a9RLRn(GMk0La`D1a"a%hNQ@jfO]A1()lZBOG@ZBHV\fhKrNm&%mBG1&L%G1%X#45D+'j7-PJ4)#a34)'kUSMZD.%SM\I=:7B5T:7C6Z2beA%RjL5O8b72]8X$gSUj:b_Ue0utdTlcpdQ@GO]+paOrTH7s45J!+U[`=FGLAT+GL@b'4)#b.4)'l(SMZDV%SM\IQ:7B5h:7C6d2beA*RjPc'8TXdb8^[J(UphB5Ut6Yl*m!qjMX5UI9ln";-G/,+F8Ofcd<tDYGF\,t8BuG-4Pk;1,k!g/*qqa1%P5Ce,O8kb-aoD@L.%g2[F3r[2fKi<%a$WXkjImsGj.[nqEm]ARlg,OKr:XpHQ)(]0C0<0."UVd'VN2+,Q\eb)l5LH[iRAp8MA!cY%#"73".B$bU&TshZg3gf78)f2RQe$q\@ft=hJOgEo6\M\<\O\e+b1,O,g_:$1lq!NZ<KsjWnD#'2<@C7$b*R6lkKc5/W_b`Os,;mJ%@rCF,P#7NI7MS5A8]O-1=g%.5g5M[N8g)8[/RFV:CL+RJ`sH\&4qOI&.VM[:j=\npj,Bp6j?5]k^TnQ0S.3F*<gfEpD4Y6rl[?I4%(2Q/*VE^+03qji?DK3'+R_KY=\>8OcOCErI?T&/Jb)iHJdE,ktkd[$nXj!i2`Bp1=-frEjd;!]-bPn3D\_\&rI5Y?q99e6Gp!G%!%B:(*Sj]+)G6We?+T?S=Aaq0dRE;,DTL`GOGHE2Adn$/hJV6q=2-sFdo"oMt2G':$;ao7D7r.7e4`*7NOiK6t`o2[<,lG9Pue9\ZA%)]>O9S\?Wh=Wt<a9nt7`Z)Y`%B@q#>hA>c4ZA4%MA+Ak<9lQ:nK274Hik?TL%/&Dk?j2W7Ypg=gBE8D]d8&E,$0*ik=$!=WO_1tr%9<%T`MA8/7T^e1Rin1ZjcC6eRfdY'*as\L:1"Ho=s!oZl:/YJEMNF-!N9(or[Z!XAIMj`s((nIl>"D!GF@m]L03/@an6R??/5&:C%J20^-Q"M?KP8TY7G!/SkTfIaf$>\i@3EHtgAKX8P@Zkiq"Yb;=@R,f\V7blnEYu])]M**$^nLga3YI6SqR,h07`bZHG&.j"9M,no%J<J#iWk`,9KeK&oY?YL1a&8MT"g'XM]-\[k0&aeF8[A9A/Z=#p52.n1H_*A_AOGd`BZX<RhDr&3P&*5e;<c\KE]pBP;b'k6V"'j4%G0ti'/4_>I>'AoC,dpDE"K$HLM5mo5e-iM2W[A1B\#\S]]#90hKdP3<*?mM3Q3BgRZn=q1KUO-S1EQ(//S]U4Pj2"=/uc(O>eH4g%'$Mu)#GFdJ4VcEc"0>2<F>UA9/%e3DW+fY!D*gN>,k;22Bs&>u-9ikum)&ZLmF"]-?/8"kgCL?B09V&s;-5tu(]2Hm6Q2op\C:=&%^$(6""U5m-bj=8n/2r.p)8Ns;Q[]01W'sOFZolPUDOSEKeIHm@g'/$31$q>O@FJ.58`9`o+Gq^7#q@LI*WW7W]LhcBS(gl*lp*_;%7hIm'eN0q=04Yl2L"uLUR)Q.(P.9>OE*LBb-5l7Al@T2+PGJ]a^t](8Os03ImdO;e6I_A'nGDBLoOBU-,8^Mbk,Tfuq:rKtPbDL$%C'dWj3;$*i416`),nPVgo<*TerJkZBWH$,B8^tm`ZH"Sg!JgX]*/@)5lUTWH<i'fcS;Tb)oWitI9^4OO:#Esul\Gr`UO^U^1bFMH%ATFf.-iIfV^/_&#Em%!Uq@NCFeP[5k80.='e;NYk?AuBEaH44uX<0NN>OpspX'G6G;]aGZ-iW>2<?C)%_23j)E9lj[\c=/o,6$.n%\-8.!Z[.2cVQ?Uu.LHPVd5Q2LTErbX$a/BRQ36qL.`r%\J`F)UV&+8C9*U`O[JJ-Q!Ni=sF7#qTqD2ka@f;1X7r=n*)3lfr92WC(%G-G)2P!<XQ,#j)F,8D9=34.0HC>]l(ZHl6d=/-\$WY%<meETfM4+Ssb<P%>b<kSW8nplm.CMuQY&NSJk(jrKQ-2_KNCmGb[CVAc*%*RQ:Fj'pJESU28K1Uo1&;RG:_;CI./EP9@E3*$q](=ki9V9r$uORRrSZk_ICa$4ko>tk^BF\U;@1/'hg/HH*PKH*tOOF^4D:(g*m%[sJMZ/>1^e$lG6e\Kt*IKkF3TPbt`ZCKFn3LI,mg-Y;%q]5A11.-:&^/KQGn5pYG-D[?&*nRfHV_%:^"jP38N0\rHX"]n?/+/c>Y%,1_;H,N7@@;p>18NEKMSR]T\J,f%K'$Ysg94\d+0QI_mhQ*Gjd>1_f8B]hg`$k:N2Ea_OtZ1HnHP;5C/-8IJ!]EAUl:2T6)4HLiE%aP8V0f!>]TaTbXr8%CZ8>jGJY>)_9;A&R=kdZ"jNnAK"_7_]WmMVY`b\f<_2]=;A0BpPjTfRm9)'c[KW!YbHT]u2HI'L;R.H[jJu%#RGp$W<Bb/LH\[<eE\=!9+V>!OP/0:aHhB^#amXVV!:_A.RQZd$lU*U)VHb:D]gmXen>?*(O%,RD6H&m@EA_\:O#BML'X2*M#04#%_`#TYOj"F/0WFo\34#B;AD_oNSl-D(*6tAdP/M(lJ5q^[iYl:l(613AC-u$ehA[_7OQ=?YfJh6A$.2rW5`XR2$[E=mHY?SKGfmhk%Y/:$R40]=sMO)LZkYa]6OMrA7.prr&CEUDe"nWGcTild%@Mujp#*@peJ1O;=KENhVUP9\=Qk1r^>Y,\j#i[Pq6'P$A96>ld2NY(#%?9k^DOmHEdd&"JWG@&f>'.Y@1A3m63^_Y_"^+ZSLP#7AdlMDinJVGG7ZG(q=A#p>,+?;T.8t`GS5n*h"@YmBORN*U4Nku:-W(e%s%J59!"?oqL_Dh@%ALh^G!;;6jh:.?42^IJ/2'JVuF"k8C>o\8Y&N)K<?J8Foe.[2=6MR'r,=9\s$@#<9X(NB%<<NS&;M4YkF\H>G9%VRjJXq)C_Q=g)iH;"#Do=1CnDGlW"`"Z73=gKmT^r/,ShO=bP]fi9:T8<ZA?&2h_`#EeR<Jt/jh;uJ8hJutlJPpg@hGe%\PU3\+s%eO,oc%IdJ62rX'B/Z@'2S]m0iBS_3Z47*,&3P(ZAnlGSU\.$X.NZst^7R$rC[^ta`+t#@_\KaZAOR)69;\icWKP^XrFD-u*UU$WV%%U@T-OLf8lm7X(RCPh)leh2Q4*`B40[KrEpKFI_^=hHRsEaLTHGCmH&>W3dh&k%i#[DG35e+4;0*Esd1f';pK?'S$JaA8n\041aq%CH:'`KD9"sK#%c,2Djb6ZH:2pWga93c53@nPYGhbH?+`,,0N]YXmC8ae"o10DDk(H&Ck"Y0\ku@`3dK(<Uh^0s$/-FD@+=:BT<+2%Y`LGP1!Bs8WfY%m\'0[+oBXe\NMIl1GbhF%<kU*&L677MD;+W1fKUXI#EDQ16qI*Tk=pN\5g8)hV?GrdK5>JU32P@b;9#V'&^&B$%P;fRo[:epB8RtuKafl*ej?S9t"G(2>1212/'X`h0ThdXhjfIodH81(ml`+6CQWCVLA9K!i\n0jZ&>p,+_rba:ZQO)`)C4u1@32'D%N%H^f-N![i?4WZ*i+\V&E##:krg,*eCJ9hT+gGgN:0m*N4X+j)]so2\@=d`milU[%\<b#PY1j,_(Tt9`DddH6]RR^u_U_6sMt<%H%2/\N+@;FNRWjmlo>>MUP7k\@fJ?^#e"4tV9O4]p*Xp&\$MMOG>ClOo-!!-SF>ZQO_9%Z2-7Dmar/9(Xk`n%X1(\&=[[`4"<F-Npe%MIQ7?*4Ckuc3J;VfK*?]Rq?IWqG(=?^bs8;2M(,tY/@OO0t7DlL$=T52)<<G"\8^HR-.`f],bjMnu#P\%'C%CL3&ggN0N,D$Eh@(%JV]jW>PeKR$:,1:'QgIT2U'<HZD.`=c5XCG'K<[2O=VO2K[@-ZJhgB2TkhFi@2]ci"q[55Ql003i62SP=Qm?g"^EfbUkGniaq_/2%$+^Uh!KoI@RmYdBOTDCD9B`tLQ,SR+2:?pt&r4lBE0)BeeBmjk$R&!#XpaAnESqc0Yb""f/lg0A%'FU02fp-mC[;.l2pK-\;$o"0%lOpUea9't%SaHjJjKN?8SaHfjIt?p6P,BWL[r-,7S`BpVJUT9n$!ZTSF^](q^]nfiA*]Xd&h(WJ-lj]bT*/@KlC003eh/=d%3Q&%%"C^U92BXel%8>Th_q+F1H/V:5>N^-B.g.eE4kng`*tDI%R.G*7coM3gkNnkL:dD$Jed7+Eo>hiIpah6NO>R5FJQCLd*cSL\H?j%l%O>Sm(LTJt]I2#i-Dp3L+`Qecm8(<@1FdJ1I*"S4fMi]gIa<g:2A3JOBWq&>@ed!$'ZAt*,YrH8'YY[].a;UrU+DBMkomm[-XC^jV%_'/+e]4+pa>(L8Kl<>NI*FM<s`Bih#ZY<2QZBe3F'o/k&)c^Zocl/B$ee1>c,`IuKJVL6.bV<1@a>s<Xb3KI=_i^pN@E9A_5Q_4W%O>YI@$6V'2%DNg]JhjR%-]5&7!nQsfLb1YmI;MUXiG(dNL#QRTJX45A_SH!T)pK;*^94jN$s4`7ITt[oKr`7scZ`bS$6'"d&unu[%U_peSrZ8dn`/"7OLhET6"kF<hUaAeDQX2*H#Gl;+2&mkoS/RrX&LWW=/0u8]"q5U4!?mh=1d=&&Te#=M_a*F#=qfEe+l">N.3p#=%-b4I0#RSV8MZh"XK\$!D8-h/(GSM&%73tPf,S]pUF@^)=XW%lc2rb>Ram:At"A?MZnRNaF!s*;Q*XE'c^B#KGb2.Zq]O,1[K^d<t%VKs@1%Sm9qF'HqQE0u1&=@OJFKLW`!*=1oUH6>',jkU$4L-VX(J^F>a,aaOAd)79Q"/3!n;[,QZq(F'[#D@i%A0)#5lbW[rYca&r%KXM')"/1I=VuoA/Fd31u?sG`4K^qpV_k<rZ`&AO_PCO!l6":ca)$e!V.]5AeTXHK(N.^3,koL(pFg5Hs"<15-<^oJo8NC;c6;b#&%"%$F]FsS8a4ZMWaJ^?;r0G']E&_%VPKQ-J%kV<df@NWQ6+oIk;`??BR-[\9JC;XL+KF-&+6ULRTl\:(E*Wh"JntNKN,W)*ZQ*g6-%TtXIc3[E4E(^^QUJ[*jk7m_!(F\i?MW0'1VapYs?'LGZr:coGLAp?F7.'0E7Thq)uW#c;j4(e1_BP<?YK0jupItg:,m2-7cn80V!%-reE`Gb>TV(SuI,"K-L$*XY?<$[RFl*G&)d:hV\jiu&QJNhWC;JjPW#HoNP(T.:a(,W&kkbOA=6%;d-m+^<+Y7RlGC?`$?q6G8G)%7m[<<g)CZ.A)WNrW9[SQ6>GLm,W)m6Vh7<a>oOUf+^d'M,ZM7TO.aiS&ePfZ`f&)/+`X;G%u!hj1pf=Y)PI+T.+Co52^fpOe<!L2%Q[u&scq#[elDn@?[Q^hn'*)PTHRK[AQ26;pkF?/oaA_r3"@T/&]\]ArJ-6-jHojpA98I>VOG[@YZgacfHinpi_M[MAJ5$$8Z^.fs%#B,PJj]31YVd,.ddrlH<U#<a-DWOfT^s#GDXtCnaT)C&C'cn#7>lhe"$IIqHb>lZ,7@+rC[4d[WL`GoE2[$;k]E>c@I-p;<gk8<*%Da+*8C1md;:)eL['o6otKP7%M<#%i5TckM>*bsWN#mh-]N>Ac)-4_dT:s(;&;[#Y9-5o<.bGWVY(e6>SD7"Rs23&qADK?WsE?mhi%Mf:<d7ku<11COl8OT_(H81)?="IDik$0+R.b'!fe)FkE62PiWi@3PMOQ<<2C91G'I[gaZfi^goh&_^WQ,h=3AU;W24H&<P)E?oUP%`0#^/+Ecg;@Wr'L"WU*.Ook2YW*u#`<Ba['glG'jPl2uikQ>[^8<WS3)e3cd7$:6r?s@b)agBi)b`\2(m0\k"RBf-hAkBjW09dnp%8P5g,E5mh_R/goQB1]sXhncB<Q6Zn5_OMm;,f0pdl'kh=\?cP`N`_HAcH<RtP-TpV5YF(JQmEWf,(L;!'&Ys_c&u&>J7/*!*D7#e%G,]dX/4gOiaB*@4aUf5/OB@[eR3L-6@S)0r.ho8+P+6q>PrED.8X*Gs66MS))Ja%#9+o1UdZI9p=H[^KK:"#e'k0`]lkJ)oLaG,j%W$W0$RUhkFV$G+6I!CgQ1U!T4@&Q^Vo`T2T(%1/A8L@Dc"KET9,hREG$<nRC,fk:(lnk:Zk^(*3;P'].4lf'S/I1E0,11gtg$p=R%iR?Rr`fgOZY6(s@:K%*7fZf4".;+et7?&ZD5i@e<Tnb!%^sq:-=.Wr"Y$Y-NaZN-;>)YDf,XDtJH*JW[&;U,_c7W^#_OMq$LM2j<%hEq5eRUj'3%hMGJ=`!.L`)D)$)HKS*e.PLHP*4%I-E4X,OOR0:RO%=M_m:U#b&Z$uR3d]jrOd4VAk@Tg,eJo=,`AsdQ=#M_P-@Dd%/M;<^Ot^DP7>bcAE;WsHC0)IJ,T&jGFBEgOZ?7<%9?QK3:D-DNc1uO-P+Vmdh!9bD#s+/Qk*.6mln<q,,;Dt,bVcqA.o0&$HqBhP%>DVep6))g87E1Mo!Di(J7$L(dL'XLl&LC:e:T7YiP_=*JI+sQ-W?e114$!s"@7hCs(5O@F^QhdM1nnNF0HO2"186&n-moW^-"3j9%jf_A"\nr0KXs'Yf=s]q:9Zc>9;5WF:'#c#j"?00jIBi>Q0:F-p)YNB*nKdcW,)O2_-da)0@T:iGB1,=MhAEXU;,VGC%FG8T;XI^p%YmU"H`;pZRTtnX2PVe"e\;kj`j=j[,'b=)<D'kV/($/$PXf.p;@V22WQH][cqp+1m@X65D.En!/h*[$I`fn@;'d.-O8M#;#O:tD&%gP/bq18^ia,msR9`g"E=f&pEq;c7iPJ8<)f`2:0;``,*XoL=;[ig>lg-R*:fZ83;fM^`F08[5ddQ1S.VTR)Y<5R9cB`.9RC?85n9%^!2I</MA?G?Be8Z\[H@lZtflEP6VMEh),;tqno$JhTOOLD8uhA3O&P!\=dal.]CY7rc^d7bnKi$1FbrhVgiM^:eCU,'f:[ss.c?@%1=".Z1Ff>r;Y^9QW1YUOq#<N+BHl=.>u8ml5saB3"aq1$oNb;?G<nOP"U/%*&FgONEDTJV'G?Y,4G44O6=&t_8<?ZghBsQs_sr']%#nm""/L1T;O*aD/DT0)P+E=]+9Mf)9%mD>=\*J$-:`AjF'-pX`*tpK_=LuNUWAi;H"?!\:D_XPp\oJr[!AnO-'!uQR\!Wggk1.ER%M>Q6I';WD.@tJ=i*G\MM;hsJ%VjJSQEH+ZK:`Oh?#ng^f/LF$Qm62jf]N[QF#TL]6,"Pl&*"fP\%6bu7,)Pe@,"S\44sEOG[ltua%Jk1<J#SQUI/L!`!-b"mS8MGK!$-GjJF<Npg0Ao3LjIUc-$.;G`*"iCS*&s`X,Y/4L4sXguC`\95/J<[H$+eicO<B)8>==QN5$^EM%W:a"Q:`SjD&6*ET4sDE67eSeckXpm[Jnc7l*YBZs?uHWCS"`FS5oR2p"+kVAhZAC?CjeR1;MBK`d..@PJ0;s5GRk&ejW4q3ALdS%%TXb:'4W[/"lJCNOU9Hn23)Ees6OF&r%e_Io.!eBHU4LaUD+B#*Il_mG4edL<]=:93jdmP_"3'Ad[qMFf;7T*ta[Y<cJM_?)((Ctj%UE8A)3WXUbODpM51m$/WHo-pq%_Y:5/Ja)%#"nG*/fI8Nq\BVdUOA%)P,32W#-,iMcd>!T@V]4*O:M":)G%`[DW*i\>lT:8*%9>2%N!<a(]gMs&n#_pi+CpeK7ft2idR=6e0B3fW,WqLhL^(_mpcY@&MX\'%3)E"5^.1.Z&Y=Uc#EnKFmg9:$=l:>2<2JKe[;[7j6MrEi%"82LM*%8L=37+2KY`Jpt_b92!)/r_fiEL'aM$s`OlRAf:P.Z=PLpV@@a/BbK&Ar@J)TPcJ//eUqXXL08QOs8<`s?Uh>iqeZ,c[<8%lRncX(_Ut)UncWbAY1nV8-Vs,m_e":_"]mS#*D5[C6VHI80N9<!V(OZ;@"h5'fkfD'd>Jl4tfdQ$A#%Y@-9_T&D.[%P40D@"=?R]%;^-q2Jq1Qj;M`sC135d$b/.aUS<12K(i_m2KP3.f"9oG4FGUV3J#dsT;*n)8]C`q(OEl@J!$P3+,Xje@as\DjkduW`K!Rn)eOBio%>rQGkKHO"m,>XO8bjtg-Zr'/o7j+9$;*rF%-;U@hjK9dpL_>kjrLN*n;*sD'/"D!]KPZPj;*m#^Z6NSp_6f:j$=k;Ub=tYGE\Sfa%WCRfq<4!6J+U:ZEcHddEH&>4B2%)FQ4tmD$'8""*R$!1<&smm"3$Buj^sPq)nqk2pUpDun3OV)E#`t$.Y-X@0jKNQYJXC97&K;I$%[:CLPMLrDH9Q(k1(g9dQm`.d<QI1J)j<60t0\ONeDZ\OED<(sa&.9c:aC5)\K-&^ekH?c<:7)]H<XIT9Cuj4%/D*F@/\_F.6GU/D%'Lt(P,d%]C3\hY"P(^DcoUChf?54hM>FDmcN?$NrJs$US,6nllp/E^j\aV<,b+HAMhr%qE-]JdkYdA@p:'`siE+1OL"B#(N?83f1%*lua"PoN7l3S'T3;K7,8pRaDgf_D:8!HCGFH,krhS<+YBB$HR%d^KP;3$G4$JOg:5KZs%sUO!&a6@`]6).QDIn<ji0L_BjF'r%IV%T_Jc;=/LZ3KkHbcJm4447uS(4,e#bmR1b*uSQL#k&d%q[NcVXl,Bg$hD^D#CT>b&0U_$4h-s<j4'QV89AgW:5:JAH4-4ejgc_QY<%)6AZ/!k[,3k&_f$,a`1)YsOOb'\fW4KbO^;NYR032HDW?65n'62blo)n8&X`"Qs+t`H+AM?2*><+Y>.=Akkn/[%r<6KZs>7"i:I`%6=s<7R*(YT\uqYn#m$M@@^dIPLu_<E`DJtE\h5`aA.E8a[h)D'i$JH%Sgbi@r1aEh$,NG%NY$f;Y?/aLOo,HgL(YT(X@*ZE#6D2$%QS9MW`+9H,4pZ0Q6q7Ku2$1,gVM!h'!a?)^5pWnEAOctSQZbF=60;@h7`&sQ\N[jVDeoud8oV_*%>$+in9bcaI-5L7Qk,p&GJn<H%Cuh8T8>IolaMiIl@DFf@3Fl#:bP3264\LM916Fr$L/]sk_sjSCC5`[T/Ce<`=lt?-FX7/S&g%5\6Fg$`M&`pf7Ru6tRE-Q#\0j(p%j3:3]0bZR+Mc*j,9]Tkd7Wf"mOe_FZ:dIQkq8at=mUIM4?RTp6N9'1YTjNtF*.;$(^<H?p(mbl39T^47OkgupF4a$DO=hXr2NgjX%J:iFJ+II*,11V?7"<^=@g>RZl7^iHV`9)[p"td^c8ph1Q1Up76'=i.DU?:][0l<8_.$fitmSg@h_ksr&jN9N88L,Q>P%3H$eOPV[%.a*.G+X9!*P(mupb=mB%Z9XCK1V)@3_,q%.\fZ9a:^tK>%KiR4K:82Jqcppk\'3p&g6>I@O3H[?g8&>$'h*7?R$Co3$]V`,g<+QD%"'mTfR[%,ur/Bciqh<!7ECsgha+8<J$>NW4'9je4E]"7*/\p(/7WKK<6Bi]>3K@>R@6R_4WLtCP7a+I7bDg%`+=h^Kiu'DsAgJ8?%;.(FY/%NY^"X.o,5T;Zd.(mM"D(rt%l66RK_\Rg3R>G1-)o[T=TmE:5?]g$^Fn`h+6l,>,a$V1oX@9OmRuKOf"&)GM;9'(!As0AW%1Q`me7-N<laCERYPFBR8,QRDoqI^Ie(b9A4RE,u>N891^jB1,Abj-sFX7^0:P\_(L,$uKN-tkHMM-Tb)OI_4Ji;UmHRE1EmKhUPN%l8HO,Ek+'/fX5Q?a0[BJg:q5W2.99ph+.0G42@"Qj?gcL`S&=Pj1*)aP4oWb1Ra^(O-(DJc&rg%N9$oZe1Mii-6+X?\B%4$b=W;]%)9Lu42PN!j9-pgJA,F^f$%7YijPX?:2?kq"_[D@@^Pq5raf_4@Cd5.4X)'!#9iL&Q`',\4D;"[-5!G8[P3h5L*/+e.:!VFq1Ilj^%m.C%&6L^W95CE7tG@1@Kc0#VpqtT34Ie0$n^&IZk]9c@mrkgrr7=jlJg]$]k="h=5pteN5N/(28s5E@3miFZAqklBFrUJjcX5CWi%e^OVub#bYCip@ge1]@j&O5IZup\+8p!:]""[c#WlJ,[(1"Sq-Kn@e9Tr9?N-Q7$)dZ>,k.SjXPaE3^:dq`arAP7W35l7_U<hcp[6%roD7(YC?<0Za]Oko!ash?[_M-ZWDY(^]45fgFrT<s,O7Q&,kd#SqVr\r\4B8cO]j1V[pNXHQUHqg464Sk+<*EPV=Y86*aI5U[6[3%AG5AZB>=;@B0U_;n6b(eq<dY.b]3R6bBL^j%K"PZg",KJ=._XVX#hpjn9XkOrqG;.O`Sh.LS%I7m5`-+[:S6sUV_A#PaVjMB5g/a%0fn-qA_]`/eGk,lI7e+trnUk%HKb;5Y;6.>[h8PDk?D0XhQh(NNU`L_\((HYVDI+1"-2`%alJuKF)*`6#oPo'D04p(ko.oq'.<uL%>mYZcmChRkhlQS#2s\/M%04Te;qYq@]d5%Q@57t?FD]NQp*gkBq^kQ3FtB<T<\oMC)V##HSa;j=?2d<A<sjGX'F"[Pe&u'Z$o:Kp%A^<OdZY/11n)"'hb?'.g6o`?E#P?l2\_gpN8=&RE2s8klAG5BeJ'j18T7-4V-fr*lr8t=%0E:n6b9-`Qf`rVsm,dE6IduOChgb1]%b@dIIn`>88H?f8J%1_i.J!g9,nG/ESr]%[[e\`JYp\)ppbX],<#9Wm=hgb4`IfR8sYib~>%AI9_PrivateDataEnd