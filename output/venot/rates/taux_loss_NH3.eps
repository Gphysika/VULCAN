%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: taux_loss_NH3.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Olivia Venot
%%CreationDate: 05/07/12
%%BoundingBox: 0 0 467 334
%%HiResBoundingBox: 0 0 466.1645 333.4980
%%CropBox: 0 0 466.1645 333.4980
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 92 8%%BeginData: 7034 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD07FFA8FFFFA8FD04FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA9FFA8%FFFFFFA8FFA9FFA8FFA9FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA9FFA8FFA9FFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFA8FFA8FD06FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD05FFA9%FFFFFFA9FFFFFFA9FFFFFFA9FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FFA9FFFFFFA9FFFFFFA9FD04FFA9A8FFFFFF%A8FFFFFFA8FFFFA8FD07FFA8FD77FFA8FD0CFFA8A8A8FFA8FFA8FD79FFA8%A8FFA8FFA8FFA8A8A8FD69FFA8FD0CFFA8FD07FFA8A8A8FD4AFF7D52A87D%7DA87DA87E527D7D52527D52FD0EFFA8FD0CFFA8FD09FFA8A8FD3FFFA8FF%A8A8A8FFA8FFFFFFA87D527D525252A87D527D7D5252527DA8FD0DFF7DFD%06FFA8FFA8FFA8FF7DFD05FFA8FFFFFFA8A8FD40FFA8FFA8FFA8FD05FFA8%A8A87E7DA8A87DA8A87DA87DA87DA8FD0CFFA87DFD07FFA8FD0FFFA8FD67%FFA8FD0CFFA8FD07FFA8FFFFFFA8FD48FFA852FD047D53A8FD2FFFA8A8FD%3FFFA8FFFFFFA8FFFFFF7D28277D527D52FD17FFA8FD0CFFA8FD0CFFA8A8%FD3DFFA8FFA8FD06FFA8A8A87DA87EA8FD16FFA8A8FD0CFFA8FD0DFFA8FD%64FFA8FD0CFFA8FD09FFA8FFFFFFA8A8FD45FFA87D7D527DFD18FFA8A8FD%07FFA8FFFFA8A8A8FD0EFFA8FD3FFFA8FD05FF7DA87DA8A8FD19FF7DFD06%FFA8FFA8FFA8FF7DFD0BFFA8FFFFFFA8A8FD3AFFA8FFFFFFA8FFFFFFA8A8%A884A8FD19FFA87DFD07FFA8FD15FFA8A9A8FD41FFA8FFA8FFA8A8A8FD17%FFA8FD0CFFA8FFFFFFA8FD0BFFA8FFA8A87DA9A8A8A8FFA8FD39FFA8277D%7D5252277DFD17FFA8FD15FFA8FD0DFFA8FFA8A8A8FFA8FD37FF52A8A87D%527D7DFD17FFA8FD0CFFA8FD09FFA8FFA8FFA8FD0BFFA8FFA8FF7DFD04A8%FD4FFFA8A8FD0CFFA9FD20FFA8A9A8FD31FF7DA8A8FFA8A8FD18FFA8FD0A%FFA8FF84FD11FFA8FD11FFA8A8A8FD25FFA8FFA8FFFFFFA8FFA8277DA87D%5952A9FD16FFA8A8FD05FFA9FFA8FFFFA8A9A8A8FD11FFA8FD13FFA8FD2D%FF52A8A8A87DA8A8FD17FF7DFD06FFA8FFA8FFFFFFA8FD13FFA8FD0FFFA8%FFFFFF7DA8FD2AFFA8FFFFFFA8FD19FFA8A8FD07FFA8FD2EFFA8A8FD47FF%A8FD0CFFA8FD15FFA8FD0FFFA8FFFFFFA8A8A8FD46FFA8FD0CFFA9FD18FF%A8FD12FFA9A8FD45FFA8FD0CFFA8FD19FFA8FD0DFFA8FD04FFA87DFD43FF%A8A8FD0CFFA8FD28FFA8FD05FFA8FD43FFA8FD08FFA8FFA8FF7DFD1BFFA8%FD0DFFA8FD05FF7DFD29FFA8FF7DFFA8FD13FFA8A8FFA8FFFFFFA8FFA8FF%FFFFA9A8A8FD2FFFA8FD28FF7D2727527D59FD13FF7DA8FFA8FFFFFFA8A8%A8FFFFFFA8FFA8FD1BFFA8FD0BFFA8FD07FFA8FD27FF7D7D27A87D7DA8FD%14FFA8FD3CFFA8A8FD2BFF7DFD13FFFD04A8FD09FFA8FFFFFFA8FD1BFFA8%FD0BFFA8FD06FFA8A8FD3EFFA8FFA8FD0AFFA8A8FD32FFA8FD3EFFFD04A8%FD09FFA8FFA8FD05FFA8FD23FFA8FD07FFA8A8FD3CFFA8A8FFA8FD0AFFA8%FD34FFA8FD3DFFA8FFA8FD04FFA8FFA8A8A8FF7DFD05FFA8FD05FFA8FD15%FFA8FD0BFFA8FD07FF84FD3BFFA87DFFA8FD05FFA8FFA8FFFFA9A9FD21FF%A8FD12FFA8A8FD3BFFA8A8FFA8FD05FFA8FFFFFFA8FD07FFA8FD05FFA8FD%27FFA8A8FD7FFFA8FD3BFFA8FD0CFFA8FD23FFA8FD12FFA8A8FD3AFFA8FF%A8FD0AFFA8FD72FFA8FFA8A8FD09FFA8FD0DFFA8FD05FFA8FD0FFFA8FD09%FFA8FD09FFA8FD39FFA8A8FFA8FD0AFFA8FD2CFFA8FD0AFFA8A8FD39FF7D%A8FFA8FFFFFFA8FFA8FFA8FF7DA8FD0EFFA8FD07FFA8FD1FFFA8A8FD38FF%A8A8FFA8FD05FFA8FFA8FD15FFA8FD11FFA9FD13FFA8FD39FFFD04A8FD05%FFA8FFFFFFA8FD13FFA8FFA8FD05FFA8FD09FFA8FD13FF7DFD38FFA8FFA8%FD44FFA8A8FD37FFA8FFA8A8FD09FFA8FD17FFA8FD07FFA8FD07FFA8FD12%FFA8A8FD36FFA8FFA8FD0AFFA8FD28FFA8FD12FFA8A8FD35FFFD04A8FD07%FFA8FF7DFD1DFFA8FD05FFA8FFA8FFFFFFA8FFA8FD11FFA8A8A8FD31FFA8%A8A9A8FD05FFA8FFA8FFFFA8A8FD1FFFA8FD0BFFA8FD12FFA8A8FD31FF7D%A8FFA8FFFFFFA8FFA8FFA8FFA8FFA8FD1FFFA8FFA8FD05FFA8FD05FFA8FD%11FFA8A8A8FD2DFFA8A8FD33FFA8FD1DFFA8A8FD2CFFA8FD0CFFA8FD27FF%A8FFA8A8A8FFFFFFA8FFA8FFA8FD11FFA8A8A8FD2AFFA8FD39FFA8FD1BFF%A8FD29FFA8FD0CFFA8FD29FFA8FD05FFA8FD05FFA8FFA8FD11FFA8A8A8FD%26FFA8FD0CFFA8FD38FFA8FD12FFA8A8FD25FFA8FD06FFA8FFA8FFA8FF7D%FD25FFA8FD0BFFA8FFA8FFA8FFFFFFA8FFA8FD11FFA8A8A8FD21FFA8A8FD%07FFA8FFA8FFFFA8A8FD21FFA9FD19FFA8FD11FFA8A8A8FD21FF7DFD08FF%A8FFFFFFA8FD1DFFA8FFA8FFA8FD15FFA8FD05FFA8FD12FFA87DFD46FFA9%FD21FFA8FD05FFA8FD11FFA8FD1FFFA8FD0CFFA8FD0BFFA8FFA8FFA8FFA8%FFA8FFA8FFA8FD23FFA8FD05FFA8FFA8FD0FFFA8A8A8FD1CFFA8FD0CFFA8%FD06FFA8FFFFFFA8FD4AFFA8A8FD1BFFA8FD0CFF7DFFFFFFA8FD3BFFA8FF%FFFFA8FFA8FD10FFA87DFD1AFFA8FD0CFFA8FD40FFA8FD17FFA8FD19FF7D%FD06FFA8FFA8FFA8FF7DFD43FFA8FFFFFFA8FFA8FD0FFF7DA8FD16FFA87D%FD07FFA8FFA8FFFFFFA8FD47FFA8FD11FFA8FD17FFA8FD08FFA8FFFFFFA8%FD45FFA8FFFFFFA8FD11FFA8A8FD7FFFA8FD15FFA8FD0CFFA8FD47FFA8FF%FFFFA8FFA8FD0FFFA8A8A8FD12FFA8FD6BFFA8A8FD12FFA8FD0CFFA8FD4B%FFA8FFFFFFA8FD0FFFA8A8A8FD10FFA8FD09FFA8A9FFA8A8FD4BFFA8FFFF%FFA8FD11FF7EFD0FFF7DFD06FFA8A9A8FFA8FF7DA8A8FD4BFFA8FFA8FFFF%FFA8FFA8FD0DFFA8A8A8FD0BFFA8A8FD09FFA8FD57FFA8FD0FFFA8A8A8FD%18FFA8FD55FFA8FFA8FFA8FD0DFFA8A8A8FD08FFA9FD63FFA8FFA8FD0FFF%A8A8A8A9FD06FFA8FD0CFFA8FD59FFA8FFA8A8A8FFA8FFFFFFA8FD07FFFD%05A8FFFFA8FD6BFFA8FD0FFFA8A9A8FFA8FD06FFA8FFA8FF7DFF7DFD13FF%A8FD29FFA9FD13FFA9FD0DFFA8FFA8A8FD04FFA8FD09FFA87DFD07FFA8FF%A8FFFFA8A8FD13FFA8FD0BFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FD1DFFA9FD07FFA8FFA8A8A8FFA8FFA8FFA8FF%A8FFFFFF7DFD08FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FF%A8FFA8FFA8A9A8A8FD75FFA8FD14FFA8FFA8FF7DFD0FFFA8FFA8A8A8FD11%FFFD04A8FD10FFA8FFA8FFA8FD0FFFA8FFA8FFA8A8FD10FFA8FFA8A8A8FD%12FFA9FFA8FD13FFA8FFA9FD11FFA8FFA8FD13FFA8FD13FFA8FFA8FD11FF%A9FFA8FD18FFA8FD13FFA8FD13FFA8FD13FFA8FFA8FD11FFA8FFA8FD13FF%A8FDBFFFA8A9A8FFFFFFA8FFA8A8A8FFFFFFA8FFA8FFA8FFFFFFA8FFA8A9%A8FFA8FFA8FFA9FFA8FFA8FFA8FD5AFFA9A8A8FFA8FFFFFFA8A8A8FFA8FF%A8FFFFA8A8FFFFFFA8FFA8FFA8FFFFFFA8FFA8FD05FFA8FD5CFFA8FFFFFF%A8FFFFFFA8FD09FFA8FFA8FD05FFA8FFA8FD05FFA8FD26FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2012-07-05T15:38:49+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>184</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAuAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qgrqC5MsjqZHiYRgx&#xA;I/BjxL8uJqvE/EpJrvSmKuTTEaa0uZmZrq2DVatQWdOL/aFQvei0xVB6RdaZeWkPG6LTmJGdPrRZ&#xA;9wPiISRutcVTCPT4lRVMkzFQAWM0tTTufixV0enxKiqZJmKgAsZpamnc/Firo9PiVFUyTMVABYzS&#xA;1NO5+LFXJp8Sihkmbcmpml7kmn2u3TFVsOnoqEPJKzcmIPrS9CxKj7XYbYquTT4lFDJM25NTNL3J&#xA;NPtdumKuTT4lFDJM25NTNL3JNPtdumKuXT4gWJkmPI1AM0u2wFB8XtXFXLp8QLEyTHkagGaXbYCg&#xA;+L2riq2PT0DyFpJSrNVB60uw4gU+14gnFVw0+LmW9SahAHH1paCld/td64q4afFzLepNQgDj60tB&#xA;Su/2u9cVcNPi5lvUmoQBx9aWgpXf7XeuKuGnxcy3qTUIA4+tLQUrv9rvXFVp09PWRhJL6YVgy+tL&#xA;uSVoftdqHFVx0+LmG9SagBHH1paGtN/tdqYq46fFzDepNQAjj60tDWm/2u1MVc2nxEqRJMOJqQJp&#xA;d9iKH4veuKubT4iVIkmHE1IE0u+xFD8XvXFVsmnoXjKyShVarj1pdxxIp9rxIOKrm0+IlSJJhxNS&#xA;BNLvsRQ/F71xVz6fEwoJJl3BqJpexBp9rv0xVz6fEwoJJl3BqJpexBp9rv0xVz6fEwoJJl3BqJpe&#xA;xBp9rv0xVbPp6NDIsckqyMpCN60uxI2P2sVXSafEyMokmUsCAwmlqK9x8WKuk0+JkZRJMpYEBhNL&#xA;UV7j4sVQesadF9QuZEa69VYn4GK5mQg8TRh+8VdsVTXFVJ7u3RnVnHNOPJB8TDnUL8Iqd6YqsOoW&#xA;3rQxAktOxWI0IU8VLkgmgIoO2Ksf8safpt75dgkgigJKcQzL9YUtRfteozMelKchiqZw6HoKSlRp&#xA;1tb3cn71nhjSN2ZKEyI6BX+FnpXY/fiqi4/QMluwmnm0y5mW3lWeR7hoZZyqQuJZXaXg0nwFTy3c&#xA;EcVDYqneKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrJpGjiZ0jaVlFRGnEM3sOZVfvOKoL9J3&#xA;v/Vou/8AgrT/AKr4qiLS6nnLCWzmteNKGUwnlXw9KST8cVYT56vvPOm+YrS70Oe7m0v6nI93ZrZp&#xA;d2ySi7tLcOyQxC7kKW9zPP6McwZzEAu3IFViN3+Yf5xeld2Y0K6j1Oe2uJ4fR0q4eG2/3CpdQKl2&#xA;XeF5FvuUHptG3I91oFJVN/Nfmb8xl85vbaJ6o0iwmlivFitTMoV4NPMDScYJ5XrJdzH90Voqlvi9&#xA;NkZVIbTzX+b4uo0lTV2sHhijuJn04NcRqbyEXF9CF0+BHK24n9KJ09UgpytqqzOq9J/LTWfMGq+V&#xA;4Z/MCj9KxMIbplUIDMsaGZOK0AMMzPCad0wKyrFXYqkvnC4gg0C5km4cOJH7wlVqQabgriqdYqoT&#xA;WaSv6gdo5fh4yLSq8eXQMCOjkbjFVWKNY40jQURAFUewFBiqB0KO2/R1vLFHCjGJAWhowPwj9oBc&#xA;VRssKScSRR0JMb0BZWIK1WoO9CRiqiyre2s9rcoYjIjRTIrkMFcFeSutDQjodj9OKqGj3tzLE1rf&#xA;8F1O22uUUqealmWOdVBJVZeBYA9Nx2xVMMVdirsVdirsVdirsVdirsVdirsVdirsVdirTsVUkKXI&#xA;6KKVP3kDFVOKaR2o0DxCleTFCPl8LMcVbild68oXip05lDX/AIFmxV5l+ZGvfmlpvmpf8NW01xoq&#xA;2MQkVLf1oxczLe85G4W88zel6ELfu22JVfTk9QcVUkufNX5tvp2oyWNvqrXipafUYWslahaJY6MZ&#xA;tPsVd5br95KwPFIC1VgkUDCr2wVoK7HuBvgV2KuxV2KuxVLtdjtv0dcSyxQuwiZQ01FFOJ25ENiq&#xA;Y4qoSXkaSNFxZpQFogH2ufKlCaD9g13xVT+vM0tuqQO0VwTSWnwhQhcOaVoDSnxUO+Kpd5OvY7jR&#xA;LehAkCisfD02AAG/Ci/fTFU8xVTliZ+JR/TdWBqN6gVqpHcUJxVBX9nJerBd2srW99aMTHQ/C1aC&#xA;SCUbgo9KHwNGHTFVfTtRhvoXdPhlhkaC5hNeUcqfaQ1APuppRlIYbEYqisVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVaYkKSAWIFQopU+29Biqn60nDl6Elf5KpXrT+an44qvR2YboybA0bj93wk4q8+86&#xA;eYPNNvq+ow6a+pQWtummRWUlppsl1G15NJctc+ofq07SW6weiZWiPwkcQyuSMVZH5KXXf0bdS6xd&#xA;XV0015ObEX0UENxHao3pRB1t4rdf3nAyiqcgHAO4xVkGKuxV2KuxV2KpH5wvYrfRLgFlMhQ0j4iR&#xA;qEEV4UY/TTFU8xVSmtYJSS6nkePxKSrDjWlGUgj7R6YqqIqooRRRVACgdABiqWaCfU0iBorgygxo&#xA;EYqaKQo/nJc+9W+VMVR8Quwx9Vo3WmxVWQg+FCXrirUdxIXCSQPHXbmeLLWlaVUkjp1IH34q5VtZ&#xA;S7xMpatJHjahqBQBivWgPfFUJc6LDPykMji6ZSn1lWMTlT0DNAYWYLvxHLbriqgdP163tgttqJnn&#xA;jUBGukR0bc15IixOaLsv735nxVbmu/MFskY+rwXkjEAsDLb9FFSFVLsCrVpycfPviqsNbVZESazu&#xA;o1kJVJVj9dCQxG5tzNx6Vq9B9O2Koqz1CxvFLWlxHOAFLemwanIVXkB0qPHFVfFXYq7FXYq7FXYq&#xA;7FXYq7FXNWh4ip7A7Cv44qsrNX7K0/1j4/6vhiramSvxKAO9CTvt7D3xV5b5m8sfmXda95wuLG6u&#xA;10++0+eLy/HBevB6d3HbWLW7KvrhI+dwlwKqiH7XMsrrxKoR/Lv5unzibpZ7saT+ko5GH11fSKLq&#xA;kspmEXrbW/6KZbdoeNTL8XDb1Sq9fwK7FXYq7FXYqgdcuFg0q5kaQRj02HJlLjdT2Ug4qjsVQ0t4&#xA;UnMCx1k+DgWICsX5nqKkUEZ7YqtS4vJZLZ44lFrKCzsTVgpWqd1oa9gG+eKoDylPcvo1ut1HNHOE&#xA;BpMDXjQU+LdfxxVOsVdiqm9vA8iysgMqU4ydGFO1RvT2xVaxukkqAJYWI2HwuoNBXfZgOvY08Tiq&#xA;qrq1eJB4mhoa0PhireKqb21u7+o0amQAgSUo4BBGzDcde2KoO60i1nnNxPCksoHGKdV9O5jXqVSZ&#xA;CrgV7Aj5nFVGEarbJJPDOdUtSSyW8gSO4QKGqiOAiOeQVQsgUjfk+Ko2w1G2voRLByH88UqNFKhq&#xA;RR43Csu4PUb9sVROKuxV2KuxV2KuxV2KtNy4niQGpsSKivyqMVUyt16QAkT1a7twPGn+rzr+OKqg&#xA;D1FSKU3FN6+PXFXl+peXPzJk8361ewXF3+irm/06XTY470pGlvbTaf8AWQYjNxVZIvrXwqi8qPz5&#xA;co6FVfSNB/MZPNK3d9cXJ05NcnmeM3dY3sXivwjLGJSPRCyWSLEVBWRGem/IqvSsCuxV2KuxV2Kp&#xA;L5tnuU0a4S1jmknKE0hBrxoa/F8K/jiqdYqskghlVlljV1agZWAIIBqK18Diq8Cmw6YqgdDkaTSr&#xA;ZmEgPpqP3yhW+yOygCmKo7FXYq7FXYqpPboZRKpKSD7RX9oeDDv7eHbFW0nDSNEwKSCpCn9pa05D&#xA;/PbFVTFXYqpyxycg8Ro9VDA9GUE1HQ+JIpiqEvdOjvRHPDNJaXaEMlzCQH+GoMcikMrpuQVYGnUU&#xA;YAhV1pqbNdnT7xPRv1T1F4hjFKgoC8TkAGhPxJ9pfkVYqo/FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYqgdckaPSrllEhPpsP3Khm+yezAimKqsV6ZHC/V5UUmgkYLTpUVAYutR/MoxVTuryWKW&#xA;RKpFGBGRPJUqvMvUuKrt8AA36nFVWE3cghlLBFb4nipQhWU/CSa1IanhiqV+URdw6PbW93B6E3AO&#xA;ByV1IIHQilffbFU8xV2KuxV2KuxVpkRipZQSh5ISK0NCKj6CRiqnFJJyMUo/eDdWHRlHceHXcYqq&#xA;4q7FVB/TgkMtKLKVWQ/5Roqsd/8AY9PDsMVbu7SG6hMUo2qGRhTkjqaq6k1oyncHFULYXVzFIun6&#xA;i6teBS0c4ARZ1BILKtdnUU5joK7bdFUwxV2KuxV2KuxV2KuxV2KuxViX5g+b9T8spo01jZC/ju7x&#xA;4r+EKzSi1is7i6leEKRWRRb1C0PL7I3IIVefeXPz3833nlm21q+8vRcRpmo6jcsrvFDN9RvYLcC3&#xA;aI38yBUnb1DPEq1+LmsYZgVe3A1APjgV2KuxV2KpL5tivZ9GuIbWD1XKFuTOqIAAa77mv0YqvspY&#xA;W168EciEkEuqLHyLKkQ+JlHP4f8AKPen7OKpvirsVSry/MZtKgWSHgoROJMonVthT4qncU6YqmIS&#xA;RKBG5L/K5JIGw2bc9KnetT3GKro3DitCp/aU9QffFV2KuxV2KuxVbIhdGUMUJGzr1B7HFWoXdk/e&#xA;LxkU8WHYkdx7HFV+KtMoZSp6EUPbr8sVWQM5j+MUZSyn3CkgH6RviqjqOnxXsKq1Fnhb1bSelWim&#xA;AIV1oR4kEVoykqdicVW6XfteQyepGYbm3leC4iPZ0OzL4q6lXX/JIrvtiqMxV2KuxV2KuxV2KuxV&#xA;2KuxVCapo+katbrbarY2+oW6OsqQ3USTIJF+y4WQMOQrscVReKuxV2KuxVL/ADBJ6ekXLceXwMKe&#xA;p6P7J/aqPuxVZZ3SNqNwfW9SOZl9BAxagCKCOHM8fiVq/APniqOuTOI1MP2vUjDbV+AuA/8AwtcV&#xA;QNql/PdRzSzOkcJYyRMhQMzggoKFQypQFWo1a9cVUvLNjd22iwW156UqmMHknKhDAbFGB/XiqZ8J&#xA;YvTWEAxDZlYtyA8Qx5Vp4fjiriIpgSj0deSeohHJT0I7jbwOKtmQoaSEAE/C9KDcmgPWnb54qqYq&#xA;7FXYq7FVGcypJFIlWSvCRBvs5ADU/wAk/hXFVbFXYqooGF1LuOBVG4gCvL4gSfmAv3YqrYqll+ZL&#xA;PU7W+TiLe4K2l8WNCORP1Z1qaEiVvT4gb861+HFUzxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kp&#xA;P5ptL670i4gtjEnwFjJJyPQGo4qB9/LFUdBfiW/uLSihoKdGJYhlVqkcaD7VPtYqisVdiqWeW5Fk&#xA;0a2ZRGBwUfuVKr9kdmANcVTPFVOSNuLtDxSZqfGRWvHoG9sVcJkEixOQsrLyC70PjxJArTFWuLQg&#xA;lfiiA2QDdQq9Fp16dMVVFZWFVIIqRUb7g0P44q3irsVcRUEdK9xiqjZytLbRs+8gHGX/AF1PFxt/&#xA;lA4qrYqpqG+suxJ4FEAXegILVPhvUYqqYqhtTsze6ddWaytC1xE8SzJsyF1Kh1I7qTUYqu0+4a5s&#xA;be4ccZJY1aRKU4sR8S0O4odqYqr4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlnmSRY9GuWYRkcGH7&#xA;5Sy/ZPZQTXFVtpIP07cxEKXWMVfk1SeMdfgLFRXbcL2xVMLlJWjURMVYSRk0oKqHBYb/AOTXFULZ&#xA;W1wZPUuQytG1VLMG5OQwdl3NI25Ci7dOgxVD+VrRrXSLeNbsXcXBSH4qGqQNqqeO3yxVN8VdirqY&#xA;qo8JYYj6Zacg1VXYAgeAam/ty+/FXH0WlA5encMteIID0G243DUr7jFVweRdpByH86A+Pddz/n2x&#xA;VerKyhlIZT0I3BxVvFVH1XW6MT/YdeUR9x9pT+BH0+GKq2KqSqv1qRq/EY0BFR0Bem3XviqrirsV&#xA;SvTfRsb+40ypX13lvrVWJPJZX5T8dh9maSpFTTkMVTTFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUn&#xA;802jXWkXEbXa2kPAkvxUtUA7VY8d/liqpaQzfp69mIpFQKpKuCSUj6MVClduzHevviqaYqtaWJXS&#xA;NnVZJK+mhIBam5oO9MVS7y3cNPo1tI0hkPBRyZQh2UdlJGKpnirsVdirsVaZFanIA8TUVFaHxxVT&#xA;CSp6hVjIW3RHNADuacgCaffiqxngXjLLW3dzvUhQSCPtEHiahdq9sVVAZloCA42HIbHsK0O3ieuK&#xA;trJFIQFYcxvxOzDYdVO42bFVkTXCEpMA6AVE4oBQfzr2Py2+XTFWrZ4ZGmeJgwZwSykkEmNaGvTp&#xA;TpiqvirsVQ17YRXaxliY54W529wgXnG1KEryDDdSVO24OKoNNXmskca4sdqqE0v1Yi1ZBSjOzf3J&#xA;JNOLmldgzYqmoIIBBqD0OKuxV2KuxV2KuxV2KuxV2KuxV2KuxVLPMlw0GjXMiyGM8GHJVDndT2Yg&#xA;YqibHT47PmInYpIeRQhAOVAtfhVTWi9ziqrcwGZFUEgrJG/Uj7DhiNvYYqhbLTTFL6kwXkhrHwZq&#xA;MxBDSuNhzcNQ9aeOKqPlqxhtNKt0gkmaIxqeE1SQSASauA/44qmuKuxV2KuxV2KuxV2KrPQjEvqj&#xA;lzIoRybj/wADXj+GKqZSYRsZQtwQQUUKFNK/5TEE/diqySeKCNXlm+r8gSqTFSK7bE13p7Niqy2h&#xA;SM/WDAYmk5SSemSDVqn94gpyalB0JxVVhmuPU9Nwku5rJGaU3IqyMajcEbE/0VVo5YpATG6uFJVi&#xA;pBow6g074quxVxFdj0xVLJNFMCKNIuDpxQgiBUElsQP2TASAi71/dMhJ3JOKtvq8trIE1K2aCIhm&#xA;N9GfUtVC1P7x/heP4F5EugQdOZOKpijpIiujB0cBlZTUEHcEEYq3irsVdirsVdirsVdirsVdiqVe&#xA;ZbGG70q4SeWZYRGx4Q1BJAJBqil/xpiqa4q4sAKk0Gw38TsMVUfrlt6ixiQMzu0Q4/F8aqWKkjYE&#xA;AdDiqA8rzerols9XPwAVkbm2wHegxVNcVdirsVdirsVdirsVdiqySeKNkV2+KQ0RQCSfoHYdz2xV&#xA;aFlkkDv8EYAKxftcutWINNvAYq2IQsjSKzcmFCCzMvb9kmg6dsVU5A3o1uE9QqTRogagEFeSivJT&#xA;Qn7JJxVp7VXdbhd5AKqWqppu3HkKMBUioNRt0xVprm4il/exgwk7OKKUG+7VJUgBak1HbbFUSrq1&#xA;eJBoaGhrQjtireKuxVLzottFPLc2DGxuZm5zGID05X3PKWI/AxJpycUc0pypiqkNXmsYa66sVqq7&#xA;Nfo3+incKORejRFiejVA6c2xVNQa7jpirsVdirsVdirsVdirsVSrzRN6WiXL1cfARWNuDbg96HFU&#xA;1xVTuLdJ0VXH2HSRTStCjBh+rFVC206OFxI/GV4wEhYqAUVa99/iPI8jtXwxVD+XrC0tNLt1toDb&#xA;IY1PpcvhqVBJ4hmXfFUzxV2KrJJ4YiokkVC5ogYgVPgK4qt+t23IKJVLkEqikFiBWtANz0xV31hS&#xA;xRUdmUA04MoofBmCr+OKuWWZiwEJXidi5UBhv04lz99MVaH1tkPL04n3oBykHah/3X92KuNtyThL&#xA;K7ig78N6nunE96fRiqqkaJXgoWu5oKVNKfwxVvFXYq7FVNreFplmKD1lFBINmp4VHUb9MVaBnjVz&#xA;J+9UGqcFo1CehBO9B4dfDFVH6pE7C5tmaCVtyQCA/U0kjNK7tXs3uMVba/WKUx3SegCSI5iaxsNz&#xA;9r9k0G4antXFUVirsVaZVZSrAMrChB3BBxVLGsLyxdH0tlNooPq6a/2SKbfV3J/dU/l+x/q7nFUT&#xA;Y6rZXrzQxPxurcgXVq44yxFhUcl8D2YVVuxOKovFXYq7FXYq7FXYqlnmGwtLvTLgXMDXKiNv3XL4&#xA;agEg8SyrtiqZ4qslmiiCmRgoZlRa92Y0AxVQXUrZpo4U5s0jMoIRuI4gmpYilDxPE9+2KpV5OCze&#xA;XrduUgUinEhoz9kDwVsVTn6rF6fp8pOPj6knLrX7XKuKttaWrpwkiWRdv7wcyaCm5apOKr1ijQ1V&#xA;ApNakADr1xVdirsVdirsVdirsVdirsVdirsVdiqx4IndXYHmh+FgSp+RIIqPY7Yqt9SRPUaYKIl3&#xA;WQE9P8oU2p8/fbFVFIJo5Q9vIGt5KkoSKLWpqtBuKn/b2GKq0NzHLsCOQJBWoO605UI60JocVVcV&#xA;diqFvdPiugHDtBcxg+jdRECRCQRtUMrDevFwVr1GKoaDU5rQwWusMkdxKwihu0HCCeRi3FUBZmRy&#xA;q14Me9FLb0VTPFXYq7FXYq7FUl84Txw6BcvJH6i8SONHbqD2j+LFU6xVbJGsihW6Blb6VYMPxGKq&#xA;dvaxwV4kmoVV5U+FFrxUUA2FT1398VQuhRwjTreRbdIXMSA8VKkjiP5lQ/hiqYYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FVP03WSP0yFiFQ8dKddwRQda4qpLFazyetGfiDUlA2qVGwdSOq7E&#xA;dx8sVat7xKiKWscgGyP9rc0FdzXsOVTU++KorFXYqsngguImhnjWWJxR43AZSPcHFUsguLjTZ3tr&#xA;2rad8P1K+Yu5UEEtHcMxYgqVqsjfCQQp+IfEqm2KuxV2KuxVLtdig/R1xK1uk0giZRyUsacT/Krn&#xA;8MVTHFVOadIVVmBIZ1QcRXd2CivtviqGTU/UuoYY4JCkvImWnwqoBKOaVHF+JAqQfbFUB5OuxPol&#xA;uHAjmCisX7sMBQUPGMkYqnmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrJYi6nixjfqH&#xA;XrUeNdj9OKrWZvVVDGTVdp1AoCa1FCSR0+WKqFuJ4hTmrQqtVlFAhVQBQj9k0HVfh67DFUQk6MFr&#xA;ty+ya1Vq9OLDY1pXFVTFVskcckbRyKHjcFXRhUEHYgg9QcVSr6ne6REi6VD9asUIX9HtIFeNKksb&#xA;d5NjSu0bsFA2UqABiqYWl/a3Yb0XqyGkkTApIhqR8aMAy1ptUb9sVV8VdiqR+cLwQaJcKgWSYoSI&#xA;f3bNxIIrxkIGKp5irTorijCoBBp7qaj8RiqyG3hh5emtOXXcmgHQCvRR2A2xVC6HM02lWzsQT6ai&#xA;q0pso/laQfjiqOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVSa3Ti4iPoM55NJG&#xA;F5E1qa1DA1+WKqP1V4iDFGjFwRcLyKIa9WEdHUk/R88VWQzXoufq8kRXaolUFoiBWp348amnw8j/&#xA;ABKq+11K3uSRBJHOQaMInViu4HxKaFcVRAniNN+JPQMCpNadA1P5gPntiqFvdIs7qZbkqYb6NCkV&#xA;7FRZkU78QxBqtd+LArXqMVUkfX7d39ZIb+DkPTaGsEwSjbFHLRu1Qu/NQanYU3VXWmu2FxwSQtZ3&#xA;LmgtLtfRlJBAPFW2kAZgOSFlJ6HFV2uTNDpVy6kA+mwq1Kbqf5mjH44qjsVUrn1+C+iSG9SPlQA1&#xA;TmOQ3/ycVQFtDqE15FPLcSolvyEkBUKju4oVFKVRNuLb998VUPLVxdw6PBFqMcqXSABl4SyUAAp8&#xA;XAYqmUeoRMis0cysQCVMMtQT2+ziro9QiZFZo5lYgEqYZagnt9nFXR6hEyKzRzKxAJUwy1BPb7OK&#xA;uTUImFTHMpqRQwy9ASAfs9+uKrYb9ShMiShuTgD0ZfshiF/Z/lpiq5NQiYVMcympFDDL0BIB+z36&#xA;4q5NQiYVMcympFDDL0BIB+z364q5dQiJYGOYBTQH0ZdxQGv2femKuXUIiWBjmAU0B9GXcUBr9n3p&#xA;iq2O/UvKHSUKGAjPoy7rxU/y/wA1cVXDUIuZX05uIAIb0ZaEmtR9ntTFXDUIuZX05uIAIb0ZaEmt&#xA;R9ntTFXDUIuZX05uIAIb0ZaEmtR9ntTFXDUIuZX05uIAIb0ZaEmtR9ntTFVpv19dAEl9IqxY+jL9&#xA;oFeP7PhXFVx1CLmF9ObiQSW9GWgIpQfZ71xVx1CLmF9ObiQSW9GWgIpQfZ71xVzahECoEcxDGhPo&#xA;y7ChNfs+1MVc2oRAqBHMQxoT6MuwoTX7PtTFVsl+oeIIkpUsRIfRl2Xix/l/mpiq5tQiBUCOYhjQ&#xA;n0ZdhQmv2famKufUIlFRHMxqBQQy9CQCfs9uuKqNzJYSr8dvJISymohlDA1A5hgoIK9ajfbFVC4q&#xA;vFrS4vIipFYzE8qNUgVf1UZ6AfyuuKrLu+uYGkNvZNJBwPpmJJkkDcduSFFVhUdedfbFUQuploXd&#xA;I7hZFBIjlt3qdiVpxAHWnf7sVde3NrNayxXNm11A4IaBoJHDgbgMrpTtirHfNNkE0SWHy+t9ZXPA&#xA;elBZxzRxcApHBY3hlgSvgEBwqzPArsVQV096srgMy29I/jjTk6/b50FH5EkKPs7VxVtLa9ea1uHu&#xA;GTgGM9vQFSXUDiCCNlbfevzxVGYq7FXYqpXJnCKYacuactq/AWAb8MVQdrHfS3Uc0szqkQPOIqVB&#xA;dxRkFOIKoRVWoa164qmOKuxV2KqV2ZxazG3IE4RvSJHIc6fDtUV3xVBTx6hPeNGk7wxI4cME24qE&#xA;+EHavIlq7np08VUyxV2KuxVpw5RghCuQeLEVAPY0qK4ql8J1CaYJMXjUKjmi8RVfTf7Q/mbmpFen&#xA;bxVRdnBJBbJFJKZnWtZWrU1JPcsfxxVWxV2KuxVLi+oF1jkLfExA4LxVlMrBuTAEpxioU+IVPjiq&#xA;IsLW4t0kWa4a45NyUsCCooBTctiqJxV2KuxVL7yTUUSYxVr6v7nglTw9EEA1rsZdidtvvxVfZWFx&#xA;bzPJJdPMrA0RuVBVqinJm6DYd/fpRVG4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVG6ieRF4Fgy&#xA;uh+Fivw8hyrQivw1xVBQ3GulAJLZFdh1+EBSFP2gJH6vSlK7VxVXvH1IWsf1dAZnFJKBfhJXqOTq&#xA;KA+5+RxVTjuNVFi8k8CrdB1VI0+IFSVFR8e/U9SMVWQS+YHnCyRQww/u+TkciQYqvQCTYiXb5eOK&#xA;qmmSauapfxqoVI+LrSrMV+OtGbofb78VU7aTVjCiqoX4I6SSqW+IlPU5VkV6j46Dj9PbFUTb/pJl&#xA;UztEhFOaqhNQQCaHntTcd/HFULz1iO3PoQEyGUlUmKtSMjoW9U7g/P5DsqjJo70r8Mo/vIyAi8Tw&#xA;DgsCWLVqvhTFW7TnxkqSU9RvSLEk8e/XtyrT2piqvirsVdirsVdirsVdirsVdir/AP/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>215.998702</stDim:w>
            <stDim:h>142.998507</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>MyriadPro-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Myriad Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.037;PS 2.000;hotconv 1.0.51;makeotf.lib2.0.18671</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Groupe de nuances par défaut</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -333.498 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 333.498 li
466.165 333.498 li
466.165 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.5 lw
0 lc
0 lj
2.5 ml
[] 0 dsh
true sadj
43.7212 215.599 mo
47.9443 215.599 li
43.7212 217.157 mo
47.9443 217.157 li
43.7212 218.518 mo
47.9443 218.518 li
43.7212 219.765 mo
47.9443 219.765 li
43.7212 228.496 mo
47.9443 228.496 li
43.7212 233.088 mo
47.9443 233.088 li
43.7212 236.376 mo
47.9443 236.376 li
43.7212 238.956 mo
47.9443 238.956 li
43.7212 241.082 mo
47.9443 241.082 li
43.7212 242.867 mo
47.9443 242.867 li
43.7212 244.427 mo
47.9443 244.427 li
43.7212 245.815 mo
47.9443 245.815 li
43.7212 247.034 mo
47.9443 247.034 li
43.7212 255.766 mo
47.9443 255.766 li
43.7212 260.357 mo
47.9443 260.357 li
43.7212 263.674 mo
47.9443 263.674 li
43.7212 266.253 mo
47.9443 266.253 li
43.7212 268.351 mo
47.9443 268.351 li
43.7212 270.165 mo
47.9443 270.165 li
43.7212 271.725 mo
47.9443 271.725 li
43.7212 273.085 mo
47.9443 273.085 li
43.7212 274.332 mo
47.9443 274.332 li
43.7212 283.063 mo
47.9443 283.063 li
43.7212 287.655 mo
47.9443 287.655 li
43.7212 290.943 mo
47.9443 290.943 li
43.7212 293.522 mo
47.9443 293.522 li
43.7212 295.648 mo
47.9443 295.648 li
43.7212 297.435 mo
47.9443 297.435 li
43.7212 298.993 mo
47.9443 298.993 li
43.7212 300.383 mo
47.9443 300.383 li
43.7212 301.63 mo
47.9443 301.63 li
39.3555 .25 mo
37.2861 .25 li
37.0879 2.09229 li
37.2861 1.89404 li
37.9102 1.66699 li
38.5337 1.66699 li
39.1289 1.89404 li
39.5542 2.29102 li
39.7524 2.91455 li
39.7524 3.31152 li
39.5542 3.93506 li
39.1289 4.35986 li
38.5337 4.55859 li
37.9102 4.55859 li
37.2861 4.35986 li
37.0879 4.1333 li
36.8896 3.73633 li
31.7588 2.71582 mo
35.4438 2.71582 li
27.1665 2.63086 mo
26.1743 2.97119 li
25.5225 3.96338 li
25.1821 5.60742 li
25.1821 6.59961 li
25.5225 8.27197 li
26.1743 9.26416 li
27.1665 9.57568 li
27.8467 9.57568 li
28.8389 9.26416 li
29.4912 8.27197 li
29.8311 6.59961 li
29.8311 5.60742 li
29.4912 3.96338 li
28.8389 2.97119 li
27.8467 2.63086 li
27.1665 2.63086 li
19.5415 3.96338 mo
20.2217 3.62305 li
21.2139 2.63086 li
21.2139 9.57568 li
43.7212 2.60254 mo
52.168 2.60254 li
38.9302 24.543 mo
38.9302 28.8516 li
38.9302 24.543 mo
36.8896 27.4058 li
39.9507 27.4058 li
31.7588 27.0088 mo
35.4438 27.0088 li
27.1665 26.9238 mo
26.1743 27.2642 li
25.5225 28.2563 li
25.1821 29.9004 li
25.1821 30.8926 li
25.5225 32.5649 li
26.1743 33.5571 li
27.1665 33.8687 li
27.8467 33.8687 li
28.8389 33.5571 li
29.4912 32.5649 li
29.8311 30.8926 li
29.8311 29.9004 li
29.4912 28.2563 li
28.8389 27.2642 li
27.8467 26.9238 li
27.1665 26.9238 li
19.5415 28.2563 mo
20.2217 27.916 li
21.2139 26.9238 li
21.2139 33.8687 li
43.7212 29.8721 mo
52.168 29.8721 li
37.2861 51.812 mo
39.5542 51.812 li
38.335 53.4561 li
38.9307 53.4561 li
39.3555 53.6548 li
39.5542 53.8813 li
39.7524 54.4766 li
39.7524 54.9019 li
39.5542 55.5254 li
39.1289 55.9224 li
38.5337 56.1206 li
37.9102 56.1206 li
37.2861 55.9224 li
37.0879 55.7241 li
36.8896 55.2988 li
31.7588 54.2783 mo
35.4438 54.2783 li
27.1665 54.1934 mo
26.1743 54.5332 li
25.5225 55.5254 li
25.1821 57.1978 li
25.1821 58.1899 li
25.5225 59.834 li
26.1743 60.8262 li
27.1665 61.1665 li
27.8467 61.1665 li
28.8389 60.8262 li
29.4912 59.834 li
29.8311 58.1899 li
29.8311 57.1978 li
29.4912 55.5254 li
28.8389 54.5332 li
27.8467 54.1934 li
27.1665 54.1934 li
19.5415 55.5254 mo
20.2217 55.2139 li
21.2139 54.1934 li
21.2139 61.1665 li
43.7212 57.1694 mo
52.168 57.1694 li
37.0879 80.1304 mo
37.0879 79.9316 li
37.2861 79.5068 li
37.5132 79.3081 li
37.9102 79.1099 li
38.7319 79.1099 li
39.1289 79.3081 li
39.3555 79.5068 li
39.5542 79.9316 li
39.5542 80.3286 li
39.3555 80.7539 li
38.9302 81.3491 li
36.8896 83.4185 li
39.7524 83.4185 li
31.7588 81.5762 mo
35.4438 81.5762 li
27.1665 81.4907 mo
26.1743 81.8311 li
25.5225 82.8232 li
25.1821 84.4673 li
25.1821 85.4595 li
25.5225 87.1318 li
26.1743 88.124 li
27.1665 88.4355 li
27.8467 88.4355 li
28.8389 88.124 li
29.4912 87.1318 li
29.8311 85.4595 li
29.8311 84.4673 li
29.4912 82.8232 li
28.8389 81.8311 li
27.8467 81.4907 li
27.1665 81.4907 li
19.5415 82.8232 mo
20.2217 82.4829 li
21.2139 81.4907 li
21.2139 88.436 li
43.7212 84.4673 mo
52.168 84.4673 li
37.5132 107.201 mo
37.9102 107.003 li
38.5337 106.379 li
38.5337 110.688 li
31.7588 108.845 mo
35.4438 108.845 li
27.1665 108.789 mo
26.1743 109.101 li
25.5225 110.092 li
25.1821 111.765 li
25.1821 112.757 li
25.5225 114.401 li
26.1743 115.393 li
27.1665 115.733 li
27.8467 115.733 li
28.8389 115.393 li
29.4912 114.401 li
29.8311 112.757 li
29.8311 111.765 li
29.4912 110.092 li
28.8389 109.101 li
27.8467 108.789 li
27.1665 108.789 li
19.5415 110.093 mo
20.2217 109.781 li
21.2139 108.789 li
21.2139 115.733 li
43.7212 111.737 mo
52.168 111.737 li
38.1084 133.677 mo
37.5132 133.875 li
37.0879 134.499 li
36.8896 135.52 li
36.8896 136.143 li
37.0879 137.164 li
37.5132 137.787 li
38.1084 137.985 li
38.5337 137.985 li
39.1289 137.787 li
39.5542 137.164 li
39.7524 136.143 li
39.7524 135.52 li
39.5542 134.499 li
39.1289 133.875 li
38.5337 133.677 li
38.1084 133.677 li
32.4956 136.058 mo
31.5034 136.398 li
30.8516 137.39 li
30.5117 139.034 li
30.5117 140.026 li
30.8516 141.699 li
31.5034 142.691 li
32.4956 143.003 li
33.1763 143.003 li
34.168 142.691 li
34.8203 141.699 li
35.1602 140.026 li
35.1602 139.034 li
34.8203 137.39 li
34.168 136.398 li
33.1763 136.058 li
32.4956 136.058 li
24.8706 137.39 mo
25.5508 137.05 li
26.543 136.058 li
26.543 143.003 li
43.7212 139.034 mo
52.168 139.034 li
37.5132 161.768 mo
37.9102 161.57 li
38.5337 160.975 li
38.5337 165.255 li
32.4956 163.355 mo
31.5034 163.667 li
30.8516 164.659 li
30.5117 166.332 li
30.5117 167.324 li
30.8516 168.968 li
31.5034 169.96 li
32.4956 170.301 li
33.1763 170.301 li
34.168 169.96 li
34.8203 168.968 li
35.1602 167.324 li
35.1602 166.332 li
34.8203 164.659 li
34.168 163.667 li
33.1763 163.355 li
32.4956 163.355 li
24.8706 164.659 mo
25.5508 164.348 li
26.543 163.355 li
26.543 170.301 li
43.7212 166.304 mo
52.168 166.304 li
37.0879 189.265 mo
37.0879 189.065 li
37.2861 188.669 li
37.5132 188.442 li
37.9102 188.244 li
38.7319 188.244 li
39.1289 188.442 li
39.3555 188.669 li
39.5542 189.065 li
39.5542 189.463 li
39.3555 189.888 li
38.9302 190.512 li
36.8896 192.553 li
39.7524 192.553 li
32.4956 190.625 mo
31.5034 190.965 li
30.8516 191.957 li
30.5117 193.602 li
30.5117 194.594 li
30.8516 196.266 li
31.5034 197.258 li
32.4956 197.599 li
33.1763 197.599 li
34.168 197.258 li
34.8203 196.266 li
35.1602 194.594 li
35.1602 193.602 li
34.8203 191.957 li
34.168 190.965 li
33.1763 190.625 li
32.4956 190.625 li
24.8706 191.957 mo
25.5508 191.617 li
26.543 190.625 li
26.543 197.599 li
43.7212 193.602 mo
52.168 193.602 li
37.2861 215.542 mo
39.5542 215.542 li
38.335 217.157 li
38.9307 217.157 li
39.3555 217.384 li
39.5542 217.582 li
39.7524 218.206 li
39.7524 218.603 li
39.5542 219.227 li
39.1289 219.623 li
38.5337 219.822 li
37.9102 219.822 li
37.2861 219.623 li
37.0879 219.425 li
36.8896 219.028 li
32.4956 217.923 mo
31.5034 218.234 li
30.8516 219.227 li
30.5117 220.899 li
30.5117 221.892 li
30.8516 223.535 li
31.5034 224.527 li
32.4956 224.867 li
33.1763 224.867 li
34.168 224.527 li
34.8203 223.535 li
35.1602 221.892 li
35.1602 220.899 li
34.8203 219.227 li
34.168 218.234 li
33.1763 217.923 li
32.4956 217.923 li
24.8706 219.227 mo
25.5508 218.915 li
26.543 217.923 li
26.543 224.867 li
43.7212 220.871 mo
52.168 220.871 li
38.9302 242.811 mo
38.9302 247.119 li
38.9302 242.811 mo
36.8896 245.674 li
39.9507 245.674 li
32.4956 245.192 mo
31.5034 245.532 li
30.8516 246.524 li
30.5117 248.168 li
30.5117 249.16 li
30.8516 250.833 li
31.5034 251.825 li
32.4956 252.165 li
33.1763 252.165 li
34.168 251.825 li
34.8203 250.833 li
35.1602 249.16 li
35.1602 248.168 li
34.8203 246.524 li
34.168 245.532 li
33.1763 245.192 li
32.4956 245.192 li
24.8706 246.524 mo
25.5508 246.184 li
26.543 245.192 li
26.543 252.165 li
43.7212 248.168 mo
52.168 248.168 li
39.3555 270.108 mo
37.2861 270.108 li
37.0879 271.951 li
37.2861 271.753 li
37.9102 271.525 li
38.5337 271.525 li
39.1289 271.753 li
39.5542 272.149 li
39.7524 272.773 li
39.7524 273.17 li
39.5542 273.794 li
39.1289 274.19 li
38.5337 274.417 li
37.9102 274.417 li
37.2861 274.19 li
37.0879 273.992 li
36.8896 273.595 li
32.4956 272.489 mo
31.5034 272.83 li
30.8516 273.822 li
30.5117 275.466 li
30.5117 276.458 li
30.8516 278.103 li
31.5034 279.123 li
32.4956 279.435 li
33.1763 279.435 li
34.168 279.123 li
34.8203 278.103 li
35.1602 276.458 li
35.1602 275.466 li
34.8203 273.822 li
34.168 272.83 li
33.1763 272.489 li
32.4956 272.489 li
24.8706 273.822 mo
25.5508 273.481 li
26.543 272.489 li
26.543 279.435 li
43.7212 275.438 mo
52.168 275.438 li
39.5542 294.005 mo
39.3555 293.607 li
38.7319 293.381 li
38.335 293.381 li
37.7114 293.607 li
37.2861 294.203 li
37.0879 295.252 li
37.0879 296.272 li
37.2861 297.095 li
37.7114 297.491 li
38.335 297.689 li
38.5337 297.689 li
39.1289 297.491 li
39.5542 297.095 li
39.7524 296.471 li
39.7524 296.272 li
39.5542 295.648 li
39.1289 295.252 li
38.5337 295.025 li
38.335 295.025 li
37.7114 295.252 li
37.2861 295.648 li
37.0879 296.272 li
32.4956 295.79 mo
31.5034 296.103 li
30.8516 297.095 li
30.5117 298.767 li
30.5117 299.759 li
30.8516 301.403 li
31.5034 302.396 li
32.4956 302.735 li
33.1763 302.735 li
34.168 302.396 li
34.8203 301.403 li
35.1602 299.759 li
35.1602 298.767 li
34.8203 297.095 li
34.168 296.103 li
33.1763 295.79 li
32.4956 295.79 li
24.8706 297.095 mo
25.5508 296.782 li
26.543 295.79 li
26.543 302.735 li
43.7212 302.735 mo
52.168 302.735 li
43.7212 302.735 mo
43.7212 2.60254 li
465.915 2.60254 mo
465.915 5.60742 li
450.833 2.60254 mo
450.833 5.60742 li
435.752 2.60254 mo
435.752 5.60742 li
405.592 2.60254 mo
405.592 5.60742 li
390.512 2.60254 mo
390.512 5.60742 li
375.459 2.60254 mo
375.459 5.60742 li
360.379 2.60254 mo
360.379 5.60742 li
330.219 2.60254 mo
330.219 5.60742 li
315.139 2.60254 mo
315.139 5.60742 li
300.059 2.60254 mo
300.059 5.60742 li
284.977 2.60254 mo
284.977 5.60742 li
254.817 2.60254 mo
254.817 5.60742 li
239.737 2.60254 mo
239.737 5.60742 li
224.657 2.60254 mo
224.657 5.60742 li
209.576 2.60254 mo
209.576 5.60742 li
179.416 2.60254 mo
179.416 5.60742 li
164.364 2.60254 mo
164.364 5.60742 li
149.283 2.60254 mo
149.283 5.60742 li
134.203 2.60254 mo
134.203 5.60742 li
104.042 2.60254 mo
104.042 5.60742 li
88.9619 2.60254 mo
88.9619 5.60742 li
73.8818 2.60254 mo
73.8818 5.60742 li
58.8013 2.60254 mo
58.8013 5.60742 li
420.672 2.60254 mo
420.672 8.61182 li
345.299 2.60254 mo
345.299 8.61182 li
269.897 2.60254 mo
269.897 8.61182 li
194.496 2.60254 mo
194.496 8.61182 li
119.123 2.60254 mo
119.123 8.61182 li
43.7212 2.60254 mo
43.7212 8.61182 li
43.7212 2.60254 mo
465.915 2.60254 li
322.225 322.38 mo
322.877 323.06 li
323.557 324.052 li
324.209 325.384 li
324.549 327.028 li
324.549 328.36 li
324.209 330.005 li
323.557 331.677 li
322.877 332.669 li
322.225 333.321 li
316.584 325.044 mo
317.264 324.704 li
318.256 323.712 li
318.256 330.685 li
307.315 327.681 mo
313.268 327.681 li
304.991 327.028 mo
304.678 326.376 li
303.686 326.036 li
302.667 326.036 li
301.674 326.376 li
301.362 327.028 li
301.674 327.681 li
302.354 328.021 li
303.999 328.36 li
304.678 328.673 li
304.991 329.353 li
304.991 329.664 li
304.678 330.345 li
303.686 330.685 li
302.667 330.685 li
301.674 330.345 li
301.362 329.664 li
298.698 330.005 mo
298.385 330.345 li
298.698 330.685 li
299.038 330.345 li
298.698 330.005 li
292.092 323.712 mo
295.721 323.712 li
293.737 326.376 li
294.729 326.376 li
295.381 326.688 li
295.721 327.028 li
296.061 328.021 li
296.061 328.673 li
295.721 329.665 li
295.069 330.345 li
294.077 330.685 li
293.084 330.685 li
292.092 330.345 li
291.752 330.005 li
291.413 329.353 li
283.135 327.681 mo
289.088 327.681 li
276.842 327.368 mo
277.834 326.376 li
278.514 326.036 li
279.506 326.036 li
280.159 326.376 li
280.499 327.368 li
280.499 330.685 li
273.213 327.368 mo
274.206 326.376 li
274.858 326.036 li
275.85 326.036 li
276.502 326.376 li
276.842 327.368 li
276.842 330.685 li
273.213 326.036 mo
273.213 330.685 li
270.889 327.028 mo
270.209 326.376 li
269.557 326.036 li
268.565 326.036 li
267.913 326.376 li
267.233 327.028 li
266.92 328.021 li
266.92 328.673 li
267.233 329.664 li
267.913 330.345 li
268.565 330.685 li
269.557 330.685 li
270.209 330.345 li
270.889 329.664 li
264.909 322.38 mo
264.256 323.06 li
263.604 324.052 li
262.924 325.384 li
262.612 327.028 li
262.612 328.36 li
262.924 330.005 li
263.604 331.677 li
264.256 332.669 li
264.909 333.321 li
251.018 328.021 mo
254.987 328.021 li
254.987 327.368 li
254.647 326.688 li
254.334 326.376 li
253.655 326.036 li
252.663 326.036 li
252.01 326.376 li
251.331 327.028 li
251.018 328.021 li
251.018 328.673 li
251.331 329.665 li
252.01 330.345 li
252.663 330.685 li
253.655 330.685 li
254.334 330.345 li
254.987 329.665 li
246.71 326.036 mo
249.034 326.036 li
247.702 323.712 mo
247.702 329.353 li
248.043 330.345 li
248.694 330.685 li
249.347 330.685 li
243.054 328.021 mo
243.394 327.028 li
244.046 326.376 li
244.726 326.036 li
245.718 326.036 li
243.054 326.036 mo
243.054 330.685 li
236.761 328.021 mo
240.758 328.021 li
240.758 327.368 li
240.417 326.688 li
240.077 326.376 li
239.425 326.036 li
238.433 326.036 li
237.753 326.376 li
237.101 327.028 li
236.761 328.021 li
236.761 328.673 li
237.101 329.665 li
237.753 330.345 li
238.433 330.685 li
239.425 330.685 li
240.077 330.345 li
240.758 329.665 li
230.808 327.028 mo
231.46 326.376 li
232.14 326.036 li
233.132 326.036 li
233.784 326.376 li
234.465 327.028 li
234.776 328.021 li
234.776 328.673 li
234.465 329.664 li
233.784 330.345 li
233.132 330.685 li
232.14 330.685 li
231.46 330.345 li
230.808 329.664 li
230.808 326.036 mo
230.808 333.321 li
219.214 328.021 mo
223.183 328.021 li
223.183 327.368 li
222.871 326.688 li
222.531 326.376 li
221.879 326.036 li
220.858 326.036 li
220.206 326.376 li
219.554 327.028 li
219.214 328.021 li
219.214 328.673 li
219.554 329.665 li
220.206 330.345 li
220.858 330.685 li
221.879 330.685 li
222.531 330.345 li
223.183 329.665 li
216.89 327.028 mo
216.238 326.376 li
215.586 326.036 li
214.565 326.036 li
213.913 326.376 li
213.261 327.028 li
212.921 328.021 li
212.921 328.673 li
213.261 329.664 li
213.913 330.345 li
214.565 330.685 li
215.586 330.685 li
216.238 330.345 li
216.89 329.664 li
216.89 323.712 mo
216.89 330.685 li
205.636 326.036 mo
201.979 330.685 li
201.979 326.036 mo
205.636 330.685 li
199.684 326.036 mo
199.684 330.685 li
196.027 326.036 mo
196.027 329.353 li
196.367 330.345 li
197.019 330.685 li
198.011 330.685 li
198.691 330.345 li
199.684 329.353 li
193.391 327.028 mo
192.71 326.376 li
192.058 326.036 li
191.066 326.036 li
190.414 326.376 li
189.734 327.028 li
189.394 328.021 li
189.394 328.673 li
189.734 329.664 li
190.414 330.345 li
191.066 330.685 li
192.058 330.685 li
192.71 330.345 li
193.391 329.664 li
193.391 326.036 mo
193.391 330.685 li
183.441 323.712 mo
188.09 323.712 li
185.765 323.712 mo
185.765 330.685 li
465.915 302.735 mo
465.915 299.73 li
450.833 302.735 mo
450.833 299.73 li
435.752 302.735 mo
435.752 299.73 li
405.592 302.735 mo
405.592 299.73 li
390.512 302.735 mo
390.512 299.73 li
375.459 302.735 mo
375.459 299.73 li
360.379 302.735 mo
360.379 299.73 li
330.219 302.735 mo
330.219 299.73 li
315.139 302.735 mo
315.139 299.73 li
300.059 302.735 mo
300.059 299.73 li
284.977 302.735 mo
284.977 299.73 li
254.817 302.735 mo
254.817 299.73 li
239.737 302.735 mo
239.737 299.73 li
224.657 302.735 mo
224.657 299.73 li
209.576 302.735 mo
209.576 299.73 li
179.416 302.735 mo
179.416 299.73 li
164.364 302.735 mo
164.364 299.73 li
149.283 302.735 mo
149.283 299.73 li
134.203 302.735 mo
134.203 299.73 li
104.042 302.735 mo
104.042 299.73 li
88.9619 302.735 mo
88.9619 299.73 li
73.8818 302.735 mo
73.8818 299.73 li
58.8013 302.735 mo
58.8013 299.73 li
428.95 308.348 mo
428.327 308.575 li
427.93 309.17 li
427.702 310.219 li
427.702 310.814 li
427.93 311.835 li
428.327 312.458 li
428.95 312.656 li
429.346 312.656 li
429.971 312.458 li
430.368 311.835 li
430.594 310.814 li
430.594 310.219 li
430.368 309.17 li
429.971 308.575 li
429.346 308.348 li
428.95 308.348 li
423.819 309.396 mo
423.819 309.17 li
424.018 308.773 li
424.215 308.575 li
424.641 308.348 li
425.463 308.348 li
425.86 308.575 li
426.086 308.773 li
426.286 309.17 li
426.286 309.595 li
426.086 309.992 li
425.663 310.615 li
423.622 312.656 li
426.483 312.656 li
419.227 310.758 mo
418.235 311.069 li
417.583 312.062 li
417.243 313.733 li
417.243 314.726 li
417.583 316.37 li
418.235 317.362 li
419.227 317.702 li
419.879 317.702 li
420.899 317.362 li
421.551 316.37 li
421.891 314.726 li
421.891 313.733 li
421.551 312.062 li
420.899 311.069 li
419.879 310.758 li
419.227 310.758 li
411.602 312.062 mo
412.282 311.749 li
413.274 310.758 li
413.274 317.702 li
420.672 302.735 mo
420.672 296.726 li
354.795 308.348 mo
352.727 308.348 li
352.528 310.219 li
352.727 309.992 li
353.35 309.794 li
353.973 309.794 li
354.569 309.992 li
354.995 310.417 li
355.192 311.013 li
355.192 311.438 li
354.995 312.062 li
354.569 312.458 li
353.973 312.656 li
353.35 312.656 li
352.727 312.458 li
352.528 312.26 li
352.329 311.835 li
348.842 309.17 mo
349.239 308.972 li
349.864 308.348 li
349.864 312.656 li
343.825 310.758 mo
342.833 311.069 li
342.182 312.062 li
341.84 313.733 li
341.84 314.726 li
342.182 316.37 li
342.833 317.362 li
343.825 317.702 li
344.506 317.702 li
345.499 317.362 li
346.149 316.37 li
346.491 314.726 li
346.491 313.733 li
346.149 312.062 li
345.499 311.069 li
344.506 310.758 li
343.825 310.758 li
336.229 312.062 mo
336.881 311.749 li
337.874 310.758 li
337.874 317.702 li
345.299 302.735 mo
345.299 296.726 li
278.174 308.348 mo
277.551 308.575 li
277.125 309.17 li
276.928 310.219 li
276.928 310.814 li
277.125 311.835 li
277.551 312.458 li
278.174 312.656 li
278.571 312.656 li
279.196 312.458 li
279.592 311.835 li
279.792 310.814 li
279.792 310.219 li
279.592 309.17 li
279.196 308.575 li
278.571 308.348 li
278.174 308.348 li
273.442 309.17 mo
273.866 308.972 li
274.461 308.348 li
274.461 312.656 li
268.452 310.758 mo
267.459 311.069 li
266.78 312.062 li
266.467 313.733 li
266.467 314.726 li
266.78 316.37 li
267.459 317.362 li
268.452 317.702 li
269.104 317.702 li
270.096 317.362 li
270.776 316.37 li
271.088 314.726 li
271.088 313.733 li
270.776 312.062 li
270.096 311.069 li
269.104 310.758 li
268.452 310.758 li
260.827 312.062 mo
261.479 311.749 li
262.499 310.758 li
262.499 317.702 li
269.897 302.735 mo
269.897 296.726 li
201.951 308.348 mo
199.91 308.348 li
199.684 310.219 li
199.91 309.992 li
200.505 309.794 li
201.129 309.794 li
201.753 309.992 li
202.149 310.417 li
202.348 311.013 li
202.348 311.438 li
202.149 312.062 li
201.753 312.458 li
201.129 312.656 li
200.505 312.656 li
199.91 312.458 li
199.684 312.26 li
199.485 311.835 li
195.12 310.758 mo
194.099 311.069 li
193.447 312.062 li
193.107 313.733 li
193.107 314.726 li
193.447 316.37 li
194.099 317.362 li
195.12 317.702 li
195.771 317.702 li
196.764 317.362 li
197.416 316.37 li
197.756 314.726 li
197.756 313.733 li
197.416 312.062 li
196.764 311.069 li
195.771 310.758 li
195.12 310.758 li
187.495 312.062 mo
188.146 311.749 li
189.139 310.758 li
189.139 317.702 li
194.496 302.735 mo
194.496 296.726 li
125.331 308.348 mo
124.707 308.575 li
124.31 309.17 li
124.112 310.219 li
124.112 310.814 li
124.31 311.835 li
124.707 312.458 li
125.331 312.656 li
125.728 312.656 li
126.351 312.458 li
126.776 311.835 li
126.975 310.814 li
126.975 310.219 li
126.776 309.17 li
126.351 308.575 li
125.728 308.348 li
125.331 308.348 li
119.718 310.758 mo
118.726 311.069 li
118.045 312.062 li
117.734 313.733 li
117.734 314.726 li
118.045 316.37 li
118.726 317.362 li
119.718 317.702 li
120.37 317.702 li
121.362 317.362 li
122.042 316.37 li
122.354 314.726 li
122.354 313.733 li
122.042 312.062 li
121.362 311.069 li
120.37 310.758 li
119.718 310.758 li
112.093 312.062 mo
112.773 311.749 li
113.765 310.758 li
113.765 317.702 li
119.123 302.735 mo
119.123 296.726 li
53.8408 308.348 mo
51.7715 308.348 li
51.5728 310.219 li
51.7715 309.992 li
52.395 309.794 li
53.0186 309.794 li
53.6138 309.992 li
54.0391 310.417 li
54.2373 311.013 li
54.2373 311.438 li
54.0391 312.062 li
53.6138 312.458 li
53.0186 312.656 li
52.395 312.656 li
51.7715 312.458 li
51.5728 312.26 li
51.3745 311.835 li
46.2437 310.814 mo
49.9287 310.814 li
41.6519 310.758 mo
40.6597 311.069 li
40.0078 312.062 li
39.6675 313.733 li
39.6675 314.726 li
40.0078 316.37 li
40.6597 317.362 li
41.6519 317.702 li
42.332 317.702 li
43.3242 317.362 li
43.9761 316.37 li
44.3164 314.726 li
44.3164 313.733 li
43.9761 312.062 li
43.3242 311.069 li
42.332 310.758 li
41.6519 310.758 li
34.0264 312.062 mo
34.7065 311.749 li
35.6987 310.758 li
35.6987 317.702 li
43.7212 302.735 mo
43.7212 296.726 li
43.7212 302.735 mo
465.915 302.735 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
465.915 20.6875 mo
461.69 20.6875 li
465.915 22.8135 mo
461.69 22.8135 li
465.915 24.5996 mo
461.69 24.5996 li
465.915 26.1587 mo
461.69 26.1587 li
465.915 27.5474 mo
461.69 27.5474 li
465.915 28.7666 mo
461.69 28.7666 li
465.915 37.4971 mo
461.69 37.4971 li
465.915 42.0894 mo
461.69 42.0894 li
465.915 45.3774 mo
461.69 45.3774 li
465.915 47.957 mo
461.69 47.957 li
465.915 50.083 mo
461.69 50.083 li
465.915 51.8687 mo
461.69 51.8687 li
465.915 53.4277 mo
461.69 53.4277 li
465.915 54.8169 mo
461.69 54.8169 li
465.915 56.064 mo
461.69 56.064 li
465.915 64.7666 mo
461.69 64.7666 li
465.915 69.3584 mo
461.69 69.3584 li
465.915 72.6753 mo
461.69 72.6753 li
465.915 75.2549 mo
461.69 75.2549 li
465.915 77.3809 mo
461.69 77.3809 li
465.915 79.1665 mo
461.69 79.1665 li
465.915 80.7256 mo
461.69 80.7256 li
465.915 82.1147 mo
461.69 82.1147 li
465.915 83.3335 mo
461.69 83.3335 li
465.915 92.064 mo
461.69 92.064 li
465.915 96.6563 mo
461.69 96.6563 li
465.915 99.9443 mo
461.69 99.9443 li
465.915 102.552 mo
461.69 102.552 li
465.915 104.65 mo
461.69 104.65 li
465.915 106.464 mo
461.69 106.464 li
465.915 108.023 mo
461.69 108.023 li
465.915 109.384 mo
461.69 109.384 li
465.915 110.631 mo
461.69 110.631 li
465.915 119.333 mo
461.69 119.333 li
465.915 123.954 mo
461.69 123.954 li
465.915 127.242 mo
461.69 127.242 li
465.915 129.822 mo
461.69 129.822 li
465.915 131.948 mo
461.69 131.948 li
465.915 133.733 mo
461.69 133.733 li
465.915 135.292 mo
461.69 135.292 li
465.915 136.682 mo
461.69 136.682 li
465.915 137.9 mo
461.69 137.9 li
465.915 146.631 mo
461.69 146.631 li
465.915 151.223 mo
461.69 151.223 li
465.915 154.54 mo
461.69 154.54 li
465.915 157.119 mo
461.69 157.119 li
465.915 159.217 mo
461.69 159.217 li
465.915 161.031 mo
461.69 161.031 li
465.915 162.59 mo
461.69 162.59 li
465.915 163.951 mo
461.69 163.951 li
465.915 165.198 mo
461.69 165.198 li
465.915 173.929 mo
461.69 173.929 li
465.915 178.521 mo
461.69 178.521 li
465.915 181.81 mo
461.69 181.81 li
465.915 184.389 mo
461.69 184.389 li
465.915 186.515 mo
461.69 186.515 li
465.915 188.301 mo
461.69 188.301 li
465.915 189.859 mo
461.69 189.859 li
465.915 191.249 mo
461.69 191.249 li
465.915 192.468 mo
461.69 192.468 li
465.915 201.198 mo
461.69 201.198 li
465.915 205.79 mo
461.69 205.79 li
465.915 209.106 mo
461.69 209.106 li
465.915 211.687 mo
461.69 211.687 li
465.915 213.784 mo
461.69 213.784 li
465.915 215.599 mo
461.69 215.599 li
465.915 217.157 mo
461.69 217.157 li
465.915 218.518 mo
461.69 218.518 li
465.915 219.765 mo
461.69 219.765 li
465.915 228.496 mo
461.69 228.496 li
465.915 233.088 mo
461.69 233.088 li
465.915 236.376 mo
461.69 236.376 li
465.915 238.956 mo
461.69 238.956 li
465.915 241.082 mo
461.69 241.082 li
465.915 242.867 mo
461.69 242.867 li
465.915 244.427 mo
461.69 244.427 li
465.915 245.815 mo
461.69 245.815 li
465.915 247.034 mo
461.69 247.034 li
465.915 255.766 mo
461.69 255.766 li
465.915 260.357 mo
461.69 260.357 li
465.915 263.674 mo
461.69 263.674 li
465.915 266.253 mo
461.69 266.253 li
465.915 268.351 mo
461.69 268.351 li
465.915 270.165 mo
461.69 270.165 li
465.915 271.725 mo
461.69 271.725 li
465.915 273.085 mo
461.69 273.085 li
465.915 274.332 mo
461.69 274.332 li
465.915 283.063 mo
461.69 283.063 li
465.915 287.655 mo
461.69 287.655 li
465.915 290.943 mo
461.69 290.943 li
465.915 293.522 mo
461.69 293.522 li
465.915 295.648 mo
461.69 295.648 li
465.915 297.435 mo
461.69 297.435 li
465.915 298.993 mo
461.69 298.993 li
465.915 300.383 mo
461.69 300.383 li
465.915 301.63 mo
461.69 301.63 li
465.915 2.60254 mo
457.467 2.60254 li
465.915 29.8721 mo
457.467 29.8721 li
465.915 57.1694 mo
457.467 57.1694 li
465.915 84.4673 mo
457.467 84.4673 li
465.915 111.737 mo
457.467 111.737 li
465.915 139.034 mo
457.467 139.034 li
465.915 166.304 mo
457.467 166.304 li
465.915 193.602 mo
457.467 193.602 li
465.915 220.871 mo
457.467 220.871 li
465.915 248.168 mo
457.467 248.168 li
465.915 275.438 mo
457.467 275.438 li
465.915 302.735 mo
457.467 302.735 li
465.915 302.735 mo
465.915 2.60254 li
.180664 114.089 mo
.83252 113.409 li
1.82471 112.757 li
3.15723 112.105 li
4.80127 111.765 li
6.1333 111.765 li
7.80615 112.105 li
9.4502 112.757 li
10.4424 113.409 li
11.0942 114.089 li
5.82178 118.058 mo
4.80127 117.718 li
4.14941 117.066 li
3.80908 116.414 li
3.80908 115.394 li
3.80908 118.058 mo
8.45801 118.058 li
4.80127 120.694 mo
4.14941 121.375 li
3.80908 122.026 li
3.80908 123.019 li
4.14941 123.699 li
4.80127 124.351 li
5.82178 124.691 li
6.47363 124.691 li
7.46582 124.351 li
8.11768 123.699 li
8.45801 123.019 li
8.45801 122.026 li
8.11768 121.375 li
7.46582 120.694 li
3.80908 120.694 mo
8.45801 120.694 li
4.80127 130.644 mo
4.14941 129.992 li
3.80908 129.312 li
3.80908 128.319 li
4.14941 127.667 li
4.80127 126.987 li
5.82178 126.675 li
6.47363 126.675 li
7.46582 126.987 li
8.11768 127.667 li
8.45801 128.319 li
8.45801 129.312 li
8.11768 129.992 li
7.46582 130.644 li
1.51318 130.644 mo
8.45801 130.644 li
5.1416 136.937 mo
4.14941 135.944 li
3.80908 135.292 li
3.80908 134.272 li
4.14941 133.62 li
5.1416 133.28 li
8.45801 133.28 li
5.1416 140.565 mo
4.14941 139.573 li
3.80908 138.921 li
3.80908 137.929 li
4.14941 137.277 li
5.1416 136.937 li
8.45801 136.937 li
3.80908 140.565 mo
8.45801 140.565 li
.180664 142.89 mo
.83252 143.57 li
1.82471 144.222 li
3.15723 144.874 li
4.80127 145.214 li
6.1333 145.214 li
7.80615 144.874 li
9.4502 144.222 li
10.4424 143.57 li
11.0942 142.89 li
5.1416 156.808 mo
4.14941 155.815 li
3.80908 155.164 li
3.80908 154.171 li
4.14941 153.491 li
5.1416 153.151 li
8.45801 153.151 li
3.80908 156.808 mo
8.45801 156.808 li
3.80908 161.768 mo
4.14941 162.449 li
4.80127 163.101 li
5.82178 163.44 li
6.47363 163.44 li
7.46582 163.101 li
8.11768 162.449 li
8.45801 161.768 li
8.45801 160.776 li
8.11768 160.124 li
7.46582 159.444 li
6.47363 159.132 li
5.82178 159.132 li
4.80127 159.444 li
4.14941 160.124 li
3.80908 160.776 li
3.80908 161.768 li
3.80908 165.736 mo
8.45801 165.736 li
1.51318 166.077 mo
1.82471 165.736 li
1.51318 165.425 li
1.17285 165.736 li
1.51318 166.077 li
4.80127 168.062 mo
4.14941 168.401 li
3.80908 169.394 li
3.80908 170.386 li
4.14941 171.378 li
4.80127 171.718 li
5.48145 171.378 li
5.82178 170.726 li
6.1333 169.054 li
6.47363 168.401 li
7.12549 168.062 li
7.46582 168.062 li
8.11768 168.401 li
8.45801 169.394 li
8.45801 170.386 li
8.11768 171.378 li
7.46582 171.718 li
4.80127 173.702 mo
4.14941 174.042 li
3.80908 175.034 li
3.80908 176.026 li
4.14941 177.019 li
4.80127 177.33 li
5.48145 177.019 li
5.82178 176.338 li
6.1333 174.694 li
6.47363 174.042 li
7.12549 173.702 li
7.46582 173.702 li
8.11768 174.042 li
8.45801 175.034 li
8.45801 176.026 li
8.11768 177.019 li
7.46582 177.33 li
5.82178 183.312 mo
5.82178 179.343 li
5.1416 179.343 li
4.48926 179.655 li
4.14941 179.995 li
3.80908 180.646 li
3.80908 181.639 li
4.14941 182.319 li
4.80127 182.972 li
5.82178 183.312 li
6.47363 183.312 li
7.46582 182.972 li
8.11768 182.319 li
8.45801 181.639 li
8.45801 180.646 li
8.11768 179.995 li
7.46582 179.343 li
5.82178 187.28 mo
4.80127 186.939 li
4.14941 186.288 li
3.80908 185.636 li
3.80908 184.615 li
3.80908 187.28 mo
8.45801 187.28 li
1.51318 194.225 mo
1.51318 191.249 li
1.82471 190.257 li
2.16504 189.916 li
2.81689 189.604 li
3.80908 189.604 li
4.48926 189.916 li
4.80127 190.257 li
5.1416 191.249 li
5.1416 194.225 li
1.51318 194.225 mo
8.45801 194.225 li
43.7212 10.1992 mo
47.9443 10.1992 li
43.7212 14.7915 mo
47.9443 14.7915 li
43.7212 18.1079 mo
47.9443 18.1079 li
43.7212 20.6875 mo
47.9443 20.6875 li
43.7212 22.8135 mo
47.9443 22.8135 li
43.7212 24.5996 mo
47.9443 24.5996 li
43.7212 26.1587 mo
47.9443 26.1587 li
43.7212 27.5474 mo
47.9443 27.5474 li
43.7212 28.7666 mo
47.9443 28.7666 li
43.7212 37.4971 mo
47.9443 37.4971 li
43.7212 42.0894 mo
47.9443 42.0894 li
43.7212 45.3774 mo
47.9443 45.3774 li
43.7212 47.957 mo
47.9443 47.957 li
43.7212 50.083 mo
47.9443 50.083 li
43.7212 51.8687 mo
47.9443 51.8687 li
43.7212 53.4277 mo
47.9443 53.4277 li
43.7212 54.8169 mo
47.9443 54.8169 li
43.7212 56.064 mo
47.9443 56.064 li
43.7212 64.7666 mo
47.9443 64.7666 li
43.7212 69.3584 mo
47.9443 69.3584 li
43.7212 72.6753 mo
47.9443 72.6753 li
43.7212 75.2549 mo
47.9443 75.2549 li
43.7212 77.3809 mo
47.9443 77.3809 li
43.7212 79.1665 mo
47.9443 79.1665 li
43.7212 80.7256 mo
47.9443 80.7256 li
43.7212 82.1147 mo
47.9443 82.1147 li
43.7212 83.3335 mo
47.9443 83.3335 li
43.7212 92.064 mo
47.9443 92.064 li
43.7212 96.6563 mo
47.9443 96.6563 li
43.7212 99.9443 mo
47.9443 99.9443 li
43.7212 102.552 mo
47.9443 102.552 li
43.7212 104.65 mo
47.9443 104.65 li
43.7212 106.464 mo
47.9443 106.464 li
43.7212 108.023 mo
47.9443 108.023 li
43.7212 109.384 mo
47.9443 109.384 li
43.7212 110.631 mo
47.9443 110.631 li
43.7212 119.333 mo
47.9443 119.333 li
43.7212 123.954 mo
47.9443 123.954 li
43.7212 127.242 mo
47.9443 127.242 li
43.7212 129.822 mo
47.9443 129.822 li
43.7212 131.948 mo
47.9443 131.948 li
43.7212 133.733 mo
47.9443 133.733 li
43.7212 135.292 mo
47.9443 135.292 li
43.7212 136.682 mo
47.9443 136.682 li
43.7212 137.9 mo
47.9443 137.9 li
43.7212 146.631 mo
47.9443 146.631 li
43.7212 151.223 mo
47.9443 151.223 li
43.7212 154.54 mo
47.9443 154.54 li
43.7212 157.119 mo
47.9443 157.119 li
43.7212 159.217 mo
47.9443 159.217 li
43.7212 161.031 mo
47.9443 161.031 li
43.7212 162.59 mo
47.9443 162.59 li
43.7212 163.951 mo
47.9443 163.951 li
43.7212 165.198 mo
47.9443 165.198 li
43.7212 173.929 mo
47.9443 173.929 li
43.7212 178.521 mo
47.9443 178.521 li
43.7212 181.81 mo
47.9443 181.81 li
43.7212 184.389 mo
47.9443 184.389 li
43.7212 186.515 mo
47.9443 186.515 li
43.7212 188.301 mo
47.9443 188.301 li
43.7212 189.859 mo
47.9443 189.859 li
43.7212 191.249 mo
47.9443 191.249 li
43.7212 192.468 mo
47.9443 192.468 li
43.7212 201.198 mo
47.9443 201.198 li
43.7212 205.79 mo
47.9443 205.79 li
43.7212 209.106 mo
47.9443 209.106 li
43.7212 211.687 mo
47.9443 211.687 li
43.7212 213.784 mo
47.9443 213.784 li
@
465.915 10.1992 mo
461.69 10.1992 li
465.915 14.7915 mo
461.69 14.7915 li
465.915 18.1079 mo
461.69 18.1079 li
@
465.915 296.471 mo
465.036 296.188 li
463.504 295.733 li
461.946 295.252 li
460.385 294.798 li
458.77 294.316 li
457.182 293.863 li
455.567 293.268 li
453.952 292.729 li
452.307 292.332 li
450.606 291.851 li
448.963 291.34 li
447.233 290.802 li
445.504 290.263 li
443.803 289.667 li
442.075 289.072 li
440.344 288.363 li
438.559 287.627 li
436.831 286.918 li
434.987 286.351 li
433.118 285.728 li
431.331 285.075 li
429.432 284.48 li
427.504 283.885 li
425.577 283.176 li
423.819 282.212 li
422.034 281.249 li
420.219 280.257 li
418.434 279.293 li
416.62 278.301 li
414.805 277.195 li
412.991 276.09 li
411.149 274.984 li
409.334 273.879 li
407.547 272.772 li
405.792 271.639 li
403.977 270.505 li
402.19 269.343 li
400.405 268.181 li
398.76 266.934 li
397.088 265.687 li
395.387 264.411 li
393.686 263.163 li
392.071 261.859 li
390.456 260.584 li
388.67 259.365 li
386.969 258.118 li
385.352 256.757 li
384.106 255.283 li
382.915 253.78 li
381.696 252.307 li
380.506 250.861 li
378.749 249.557 li
377.047 248.253 li
375.403 246.949 li
373.788 245.646 li
372.059 244.37 li
370.329 243.094 li
368.657 241.818 li
366.985 240.543 li
365.37 239.268 li
363.583 238.021 li
361.825 236.744 li
360.096 235.497 li
358.368 234.25 li
356.524 232.975 li
354.766 231.756 li
352.981 230.508 li
351.139 229.261 li
349.268 228.014 li
347.254 226.767 li
345.27 225.491 li
343.344 224.187 li
341.473 222.911 li
339.545 221.636 li
337.561 220.332 li
335.52 219 li
333.393 217.667 li
331.182 216.307 li
328.915 214.975 li
326.506 213.613 li
323.983 212.225 li
321.403 210.808 li
318.823 209.39 li
316.018 207.973 li
313.012 206.471 li
309.895 204.939 li
306.833 203.466 li
303.545 201.878 li
300.286 200.319 li
296.997 198.731 li
293.368 197.088 li
289.825 195.415 li
286.198 193.771 li
282.456 192.042 li
278.856 190.313 li
275.54 188.612 li
272.334 186.911 li
269.217 185.211 li
266.467 183.538 li
263.973 181.894 li
261.932 180.335 li
260.118 178.776 li
258.53 177.217 li
257.114 175.602 li
255.895 173.957 li
254.874 172.341 li
253.995 170.697 li
253.202 169.053 li
252.522 167.438 li
251.84 165.85 li
251.217 164.263 li
250.651 162.675 li
250.111 161.088 li
249.602 159.557 li
249.177 158.026 li
248.751 156.524 li
248.354 155.021 li
248.015 153.632 li
247.674 152.215 li
247.277 150.798 li
246.852 149.38 li
246.398 147.963 li
245.888 146.546 li
245.35 145.1 li
244.782 143.655 li
244.188 142.209 li
243.592 140.763 li
242.94 139.317 li
241.807 137.532 li
240.984 136.001 li
240.247 134.499 li
239.453 132.968 li
238.604 131.466 li
237.725 129.963 li
236.846 128.461 li
235.91 126.958 li
234.833 125.343 li
233.614 123.67 li
232.367 121.97 li
230.95 120.155 li
229.447 118.285 li
227.888 116.385 li
226.159 114.344 li
224.373 112.332 li
222.332 110.121 li
220.178 107.853 li
217.627 105.387 li
214.877 102.779 li
211.873 100.086 li
208.839 97.478 li
205.721 94.8984 li
202.433 92.3193 li
198.975 89.7114 li
195.46 87.2168 li
191.945 84.8354 li
188.486 82.6528 li
184.745 80.4985 li
180.918 78.543 li
176.723 76.5586 li
172.442 74.8008 li
168.077 73.2705 li
163.287 71.7681 li
158.014 70.2373 li
152.288 68.7632 li
146.222 67.4307 li
139.674 66.127 li
132.729 64.7949 li
125.614 63.4624 li
118.868 62.1582 li
113.425 60.9111 li
109.967 59.7773 li
108.011 58.6152 li
106.792 57.4814 li
105.715 56.2622 li
104.751 55.1001 li
103.9 54.0513 li
103.022 53.0024 li
102.115 51.9253 li
101.151 50.8765 li
100.244 49.856 li
99.4219 48.9204 li
98.5713 47.957 li
97.7212 47.0215 li
96.8706 46.0576 li
96.02 45.1221 li
95.3682 44.3286 li
94.7163 43.5063 li
94.0645 42.7129 li
93.4121 41.9189 li
92.7319 41.0972 li
92.2217 40.3882 li
91.7114 39.6797 li
91.2012 38.9712 li
90.6909 38.2622 li
90.1523 37.5537 li
89.7554 36.9302 li
89.3872 36.335 li
88.9902 35.7393 li
88.6216 35.144 li
88.2246 34.5488 li
87.9131 34.0103 li
87.6011 33.4717 li
87.2612 32.9331 li
86.9209 32.3662 li
86.5806 31.8276 li
86.4956 31.459 li
86.3823 31.0908 li
86.2974 30.7222 li
86.1841 30.3252 li
86.0137 29.9287 li
85.7871 29.5034 li
85.5889 29.0781 li
85.3335 28.6528 li
85.1353 28.2275 li
85.022 27.8877 li
84.9082 27.5757 li
84.7949 27.2354 li
84.6533 26.8955 li
84.4834 26.5552 li
84.3413 26.2148 li
84.1431 25.875 li
83.9443 25.5347 li
83.7461 25.166 li
83.5479 24.8262 li
83.2925 24.4858 li
83.0659 24.1455 li
82.8105 23.8057 li
82.5557 23.4937 li
82.272 23.1538 li
82.0737 22.8701 li
81.9604 22.6719 li
81.8755 22.4448 li
81.79 22.2466 li
81.6768 22.0195 li
81.5352 21.7646 li
81.3936 21.5381 li
81.3086 21.3394 li
81.1948 21.1694 li
81.0815 20.9707 li
80.9399 20.7725 li
80.7983 20.5742 li
80.5713 20.3472 li
80.3447 20.1206 li
80.061 19.8936 li
79.7778 19.6387 li
79.4658 19.4121 li
79.1255 19.1567 li
78.7856 18.9302 li
78.502 18.7598 li
78.2471 18.5898 li
77.9634 18.4482 li
77.7368 18.335 li
77.4531 18.2212 li
77.1982 18.1079 li
76.9429 18.0229 li
76.6313 17.9097 li
76.2061 17.7676 li
75.6958 17.5693 li
75.1855 17.3994 li
74.7036 17.2578 li
74.2217 17.144 li
73.6831 17.0308 li
73.0029 16.8325 li
72.2661 16.6338 li
71.5288 16.4922 li
70.7637 16.3506 li
69.9697 16.209 li
69.0625 16.0386 li
68.0991 15.8687 li
67.0786 15.7554 li
66.0298 15.6133 li
64.9243 15.5 li
63.6201 15.3301 li
62.2598 15.1885 li
60.8423 15.0464 li
59.3682 14.9331 li
57.7524 14.8481 li
56.1084 14.7632 li
54.3511 14.7065 li
52.395 14.5928 li
50.2407 14.4795 li
48.0015 14.3945 li
45.6484 14.3379 li
43.7212 14.2813 li
@
[5.6693 2.83465 1.41733 2.83465 ] 0 dsh
43.7212 237.425 mo
52.9053 236.745 li
68.8643 235.497 li
83.3779 234.25 li
96.6157 232.975 li
108.266 231.756 li
118.924 230.509 li
128.647 229.261 li
137.491 228.014 li
145.513 226.767 li
152.77 225.491 li
159.318 224.188 li
165.016 222.911 li
170.118 221.636 li
174.71 220.332 li
178.82 219 li
182.505 217.667 li
185.822 216.307 li
188.685 214.975 li
191.265 213.614 li
193.589 212.225 li
195.63 210.808 li
197.416 209.391 li
199.031 207.973 li
200.449 206.471 li
201.724 204.94 li
202.802 203.466 li
203.793 201.879 li
204.672 200.319 li
205.409 198.732 li
206.062 197.088 li
206.6 195.415 li
206.997 193.771 li
207.337 192.042 li
207.621 190.313 li
207.847 188.612 li
208.045 186.911 li
208.244 185.211 li
208.471 183.538 li
208.669 181.895 li
208.896 180.335 li
209.066 178.776 li
209.236 177.217 li
209.35 175.602 li
209.435 173.957 li
209.463 172.342 li
209.52 170.697 li
209.548 169.054 li
209.576 167.438 li
209.576 165.851 li
209.604 164.263 li
209.604 162.675 li
209.633 161.088 li
209.689 159.557 li
209.718 158.026 li
209.775 156.524 li
209.86 155.021 li
209.945 153.633 li
210.03 152.215 li
210.115 150.798 li
210.2 149.381 li
210.257 147.963 li
210.285 146.546 li
210.285 145.101 li
210.285 143.655 li
210.257 142.209 li
210.2 140.764 li
210.115 139.318 li
209.803 137.532 li
209.576 136.001 li
209.293 134.499 li
208.953 132.968 li
208.584 131.466 li
208.131 129.963 li
207.649 128.461 li
207.11 126.958 li
206.458 125.343 li
205.75 123.67 li
204.956 121.97 li
204.077 120.156 li
203.113 118.285 li
202.093 116.385 li
200.959 114.345 li
199.797 112.332 li
198.436 110.121 li
196.99 107.853 li
195.346 105.387 li
193.532 102.779 li
191.491 100.086 li
189.28 97.4785 li
186.899 94.8989 li
184.348 92.3193 li
181.598 89.7114 li
178.679 87.2168 li
175.589 84.8359 li
172.386 82.6533 li
168.842 80.499 li
165.072 78.543 li
160.962 76.5586 li
156.71 74.8013 li
152.203 73.2705 li
147.356 71.7681 li
142.083 70.2373 li
136.357 68.7632 li
130.206 67.4312 li
123.63 66.127 li
116.656 64.7949 li
109.598 63.4624 li
102.965 62.1587 li
97.5791 60.9116 li
94.1211 59.7773 li
92.25 58.6152 li
91.1162 57.4814 li
90.1523 56.2627 li
89.2739 55.1006 li
88.4517 54.0518 li
87.6299 53.0029 li
86.751 51.9258 li
85.9004 50.877 li
85.022 49.8564 li
84.1997 48.9209 li
83.4063 47.957 li
82.584 47.0215 li
81.7617 46.0576 li
80.9399 45.1226 li
80.2598 44.3286 li
79.5508 43.5068 li
78.8706 42.7129 li
78.1904 41.9194 li
77.5098 41.0972 li
76.8862 40.3887 li
76.291 39.6797 li
75.6958 38.9712 li
75.1006 38.2627 li
74.5337 37.5537 li
73.9951 36.9302 li
73.4849 36.335 li
73.0029 35.7397 li
72.4927 35.1445 li
71.9824 34.5493 li
71.5288 34.0107 li
71.0752 33.4722 li
70.5933 32.9336 li
70.1396 32.3662 li
69.6577 31.8281 li
69.3179 31.4595 li
69.0059 31.0908 li
68.6943 30.7222 li
68.354 30.3257 li
68.0137 29.9287 li
67.6172 29.5034 li
67.2485 29.0781 li
66.8516 28.6533 li
66.4546 28.228 li
66.1431 27.8877 li
65.8027 27.5757 li
65.4912 27.2358 li
65.1509 26.8955 li
64.8105 26.5557 li
64.4424 26.2153 li
64.1021 25.875 li
63.7334 25.5352 li
63.3369 25.1665 li
62.9683 24.8262 li
62.5713 24.4863 li
62.146 24.146 li
61.749 23.8057 li
61.3242 23.4941 li
60.8706 23.1538 li
60.4736 22.8701 li
60.1333 22.6719 li
59.7935 22.4453 li
59.4814 22.2466 li
59.1416 22.02 li
58.8013 21.7646 li
58.4609 21.5381 li
58.1494 21.3398 li
57.8091 21.1694 li
57.4688 20.9712 li
57.1289 20.7725 li
56.7603 20.5742 li
56.3633 20.3477 li
55.9385 20.1206 li
55.5132 19.894 li
55.0313 19.6387 li
54.5493 19.4121 li
54.0674 19.1572 li
53.5571 18.9302 li
53.0752 18.7603 li
52.5933 18.5898 li
52.1113 18.4482 li
51.6294 18.335 li
51.1191 18.2217 li
50.6377 18.1084 li
50.0991 18.0229 li
49.5605 17.9097 li
48.9648 17.7681 li
48.2847 17.5693 li
47.6045 17.3994 li
46.9243 17.2578 li
46.2153 17.1445 li
45.4785 17.0313 li
44.6563 16.8325 li
43.749 16.6343 li
43.7207 16.6343 li
@
[1.13386 2.83465 ] 0 dsh
452.167 302.735 mo
451.145 302.424 li
449.444 301.8 li
447.686 301.262 li
445.93 300.808 li
444.172 300.326 li
442.358 299.9 li
440.543 299.447 li
438.702 298.908 li
436.858 298.313 li
434.959 297.916 li
433.061 297.604 li
431.133 297.151 li
429.176 296.669 li
427.221 296.188 li
425.208 295.733 li
423.196 295.252 li
421.155 294.798 li
419.057 294.316 li
416.987 293.862 li
414.862 293.268 li
412.792 292.729 li
410.61 292.332 li
408.37 291.851 li
406.188 291.34 li
403.948 290.802 li
401.68 290.263 li
399.442 289.667 li
397.174 289.072 li
394.905 288.363 li
392.61 287.627 li
390.37 286.918 li
387.905 286.351 li
385.467 285.728 li
383.114 285.075 li
380.59 284.48 li
378.01 283.885 li
375.489 283.176 li
373.278 282.212 li
371.01 281.249 li
368.743 280.257 li
366.446 279.293 li
364.178 278.301 li
361.967 277.195 li
359.7 276.09 li
357.432 274.984 li
355.165 273.878 li
352.981 272.772 li
350.827 271.639 li
348.645 270.505 li
346.461 269.343 li
344.25 268.181 li
342.323 266.934 li
340.311 265.687 li
338.327 264.411 li
336.313 263.163 li
334.415 261.859 li
332.487 260.584 li
330.333 259.365 li
328.292 258.118 li
326.42 256.757 li
325.059 255.283 li
323.756 253.78 li
322.452 252.307 li
321.12 250.861 li
319.022 249.557 li
316.981 248.253 li
314.969 246.949 li
313.012 245.646 li
310.887 244.37 li
308.76 243.094 li
306.663 241.818 li
304.594 240.543 li
302.524 239.268 li
300.286 238.021 li
298.018 236.744 li
295.834 235.497 li
293.567 234.25 li
291.186 232.975 li
288.889 231.756 li
286.565 230.508 li
284.1 229.261 li
281.633 228.014 li
278.969 226.767 li
276.303 225.491 li
273.725 224.187 li
271.229 222.911 li
268.651 221.636 li
265.958 220.332 li
263.237 219 li
260.374 217.667 li
257.424 216.307 li
254.364 214.975 li
251.104 213.613 li
247.73 212.225 li
244.244 210.808 li
240.758 209.39 li
236.959 207.973 li
232.905 206.471 li
228.682 204.939 li
224.515 203.466 li
220.064 201.878 li
215.643 200.319 li
211.192 198.731 li
206.203 197.088 li
201.384 195.415 li
196.395 193.771 li
191.236 192.042 li
186.19 190.313 li
181.655 188.612 li
177.148 186.911 li
172.471 185.211 li
168.531 183.538 li
164.59 181.894 li
161.416 180.335 li
158.212 178.776 li
154.953 177.217 li
151.551 175.601 li
148.093 173.957 li
144.748 172.341 li
141.403 170.697 li
138.058 169.053 li
134.855 167.438 li
131.624 165.85 li
128.562 164.263 li
125.671 162.675 li
122.751 161.088 li
120.086 159.557 li
117.677 158.026 li
115.296 156.524 li
113.057 155.021 li
111.242 153.632 li
109.457 152.215 li
107.642 150.798 li
105.856 149.38 li
104.014 147.963 li
102.2 146.546 li
100.272 145.1 li
98.3447 143.655 li
96.417 142.209 li
94.4893 140.763 li
92.562 139.317 li
89.1318 137.532 li
86.8359 136.001 li
84.71 134.499 li
82.584 132.968 li
80.4014 131.465 li
78.1621 129.963 li
75.894 128.461 li
73.6265 126.958 li
70.9053 125.343 li
67.9004 123.67 li
64.8389 121.97 li
61.4092 120.155 li
57.6392 118.285 li
53.8125 116.385 li
49.5601 114.344 li
45.2515 112.332 li
43.7207 111.68 li
@
[5.6693 5.6693 ] 0 dsh
428.467 302.735 mo
427.448 302.424 li
425.719 301.8 li
423.989 301.262 li
422.231 300.808 li
420.475 300.326 li
418.661 299.9 li
416.846 299.447 li
415.002 298.908 li
413.161 298.313 li
411.262 297.916 li
409.362 297.604 li
407.434 297.151 li
405.508 296.669 li
403.551 296.188 li
401.51 295.733 li
399.526 295.252 li
397.485 294.798 li
395.387 294.316 li
393.29 293.862 li
391.192 293.268 li
389.124 292.729 li
386.913 292.332 li
384.702 291.851 li
382.518 291.34 li
380.28 290.802 li
378.01 290.263 li
375.772 289.667 li
373.504 289.072 li
371.237 288.363 li
368.969 287.627 li
366.702 286.918 li
364.262 286.351 li
361.825 285.728 li
359.444 285.075 li
356.922 284.48 li
354.37 283.885 li
351.848 283.176 li
349.637 282.212 li
347.37 281.249 li
345.1 280.257 li
342.805 279.293 li
340.538 278.301 li
338.327 277.195 li
336.059 276.09 li
333.792 274.984 li
331.524 273.878 li
329.34 272.772 li
327.186 271.639 li
325.002 270.505 li
322.821 269.343 li
320.637 268.181 li
318.682 266.934 li
316.668 265.687 li
314.686 264.411 li
312.672 263.163 li
310.774 261.859 li
308.846 260.584 li
306.692 259.365 li
304.651 258.118 li
302.78 256.757 li
301.418 255.283 li
300.116 253.78 li
298.811 252.307 li
297.479 250.861 li
295.381 249.557 li
293.34 248.253 li
291.327 246.949 li
289.344 245.646 li
287.247 244.37 li
285.12 243.094 li
283.022 241.818 li
280.924 240.543 li
278.883 239.268 li
276.645 238.021 li
274.375 236.744 li
272.194 235.497 li
269.926 234.25 li
267.545 232.975 li
265.249 231.756 li
262.924 230.508 li
260.458 229.261 li
257.993 228.014 li
255.327 226.767 li
252.663 225.491 li
250.083 224.187 li
247.589 222.911 li
245.01 221.636 li
242.345 220.332 li
239.596 219 li
236.761 217.667 li
233.813 216.307 li
230.723 214.975 li
227.491 213.613 li
224.118 212.225 li
220.631 210.808 li
217.145 209.39 li
213.347 207.973 li
209.293 206.471 li
205.098 204.939 li
200.931 203.466 li
196.48 201.878 li
192.03 200.319 li
187.58 198.731 li
182.619 197.088 li
177.8 195.415 li
172.811 193.771 li
167.652 192.042 li
162.606 190.313 li
158.071 188.612 li
153.563 186.911 li
148.887 185.211 li
144.946 183.538 li
141.035 181.894 li
137.86 180.335 li
134.628 178.776 li
131.396 177.217 li
127.995 175.601 li
124.537 173.957 li
121.192 172.341 li
117.847 170.697 li
114.502 169.053 li
111.299 167.438 li
108.067 165.85 li
105.006 164.263 li
102.115 162.675 li
99.2236 161.088 li
96.5303 159.557 li
94.1494 158.026 li
91.7397 156.524 li
89.5288 155.021 li
87.7148 153.632 li
85.9287 152.215 li
84.1147 150.798 li
82.3008 149.38 li
80.4863 147.963 li
78.644 146.546 li
76.7163 145.1 li
74.8169 143.655 li
72.8896 142.209 li
70.9619 140.763 li
69.0342 139.317 li
65.6045 137.532 li
63.3086 136.001 li
61.1826 134.499 li
59.0566 132.968 li
56.8735 131.465 li
54.606 129.963 li
52.3667 128.461 li
50.0703 126.958 li
47.3774 125.343 li
44.373 123.67 li
43.7207 123.33 li
@
.85 lw
[5.6693 2.83465 1.41733 2.83465 ] 0 dsh
465.915 296.499 mo
465.006 296.188 li
463.475 295.733 li
461.917 295.252 li
460.358 294.798 li
458.77 294.316 li
457.182 293.863 li
455.54 293.268 li
453.952 292.729 li
452.307 292.332 li
450.606 291.851 li
448.934 291.34 li
447.233 290.802 li
445.504 290.263 li
443.803 289.668 li
442.075 289.072 li
440.317 288.363 li
438.559 287.627 li
436.831 286.918 li
434.987 286.351 li
433.118 285.728 li
431.331 285.075 li
429.432 284.48 li
427.504 283.885 li
425.577 283.176 li
423.819 282.212 li
422.034 281.249 li
420.219 280.257 li
418.434 279.293 li
416.62 278.301 li
414.805 277.195 li
412.991 276.09 li
411.149 274.984 li
409.305 273.879 li
407.547 272.772 li
405.762 271.639 li
403.977 270.505 li
402.19 269.343 li
400.405 268.181 li
398.76 266.934 li
397.059 265.687 li
395.387 264.411 li
393.686 263.163 li
392.071 261.859 li
390.456 260.584 li
388.67 259.365 li
386.969 258.118 li
385.352 256.757 li
384.106 255.283 li
382.915 253.781 li
381.696 252.307 li
380.506 250.861 li
378.749 249.558 li
377.047 248.253 li
375.403 246.949 li
373.758 245.646 li
372.059 244.37 li
370.329 243.094 li
368.657 241.818 li
366.985 240.543 li
365.368 239.268 li
363.583 238.021 li
361.825 236.744 li
360.096 235.497 li
358.338 234.25 li
356.524 232.975 li
354.766 231.756 li
352.981 230.508 li
351.139 229.261 li
349.268 228.014 li
347.254 226.767 li
345.27 225.491 li
343.344 224.187 li
341.473 222.911 li
339.545 221.636 li
337.561 220.332 li
335.52 219 li
333.393 217.667 li
331.182 216.307 li
328.915 214.975 li
326.506 213.614 li
323.983 212.225 li
321.403 210.808 li
318.823 209.391 li
316.018 207.973 li
313.012 206.471 li
309.895 204.939 li
306.833 203.466 li
303.545 201.878 li
300.286 200.319 li
296.997 198.731 li
293.368 197.088 li
289.825 195.415 li
286.198 193.771 li
282.456 192.042 li
278.856 190.313 li
275.54 188.612 li
272.334 186.911 li
269.217 185.211 li
266.467 183.538 li
263.973 181.895 li
261.932 180.335 li
260.118 178.776 li
258.53 177.217 li
257.084 175.602 li
255.895 173.957 li
254.846 172.341 li
253.967 170.697 li
253.202 169.053 li
252.493 167.438 li
251.84 165.85 li
251.217 164.263 li
250.651 162.675 li
250.083 161.088 li
249.602 159.557 li
249.148 158.026 li
248.723 156.524 li
248.326 155.021 li
248.015 153.633 li
247.646 152.215 li
247.249 150.798 li
246.823 149.38 li
246.37 147.963 li
245.888 146.546 li
245.321 145.1 li
244.754 143.655 li
244.159 142.209 li
243.535 140.763 li
242.912 139.317 li
241.75 137.532 li
240.956 136.001 li
240.162 134.499 li
239.368 132.968 li
238.547 131.466 li
237.668 129.963 li
236.761 128.461 li
235.825 126.958 li
234.748 125.343 li
233.501 123.67 li
232.253 121.97 li
230.864 120.155 li
229.306 118.285 li
227.775 116.385 li
226.017 114.344 li
224.231 112.332 li
222.162 110.121 li
219.979 107.853 li
217.4 105.387 li
214.594 102.779 li
211.561 100.086 li
208.499 97.478 li
205.353 94.8984 li
202.008 92.3193 li
198.493 89.7114 li
194.95 87.2168 li
191.378 84.8354 li
187.891 82.6528 li
184.149 80.4985 li
180.323 78.543 li
176.099 76.5586 li
171.819 74.8008 li
167.454 73.2705 li
162.663 71.7681 li
157.419 70.2373 li
151.693 68.7632 li
145.626 67.4307 li
139.107 66.127 li
132.134 64.7949 li
125.019 63.4624 li
118.272 62.1587 li
112.801 60.9111 li
109.343 59.7773 li
107.387 58.6152 li
106.168 57.4814 li
105.091 56.2622 li
104.099 55.1001 li
103.249 54.0513 li
102.37 53.0024 li
101.435 51.9253 li
100.499 50.8765 li
99.5635 49.856 li
98.7417 48.9209 li
97.8911 47.957 li
97.0405 47.0215 li
96.1904 46.0576 li
95.3398 45.1221 li
94.688 44.3286 li
94.0361 43.5063 li
93.3838 42.7129 li
92.7319 41.9189 li
92.0801 41.0972 li
91.5415 40.3882 li
91.0596 39.6797 li
90.5493 38.9712 li
90.0391 38.2622 li
89.5288 37.5537 li
89.1318 36.9302 li
88.792 36.335 li
88.4233 35.7397 li
88.0264 35.144 li
87.6577 34.5488 li
87.3462 34.0103 li
87.0342 33.4717 li
86.7227 32.9331 li
86.4106 32.3662 li
86.0708 31.8276 li
85.9854 31.459 li
85.9287 31.0908 li
85.8438 30.7222 li
85.7305 30.3252 li
85.5605 29.9287 li
85.3618 29.5034 li
85.1636 29.0781 li
84.9365 28.6528 li
84.7383 28.2275 li
84.6533 27.8877 li
84.54 27.5757 li
84.4263 27.2354 li
84.2847 26.8955 li
84.1714 26.5552 li
84.0015 26.2148 li
83.8311 25.875 li
83.6611 25.5347 li
83.4629 25.166 li
83.2358 24.8262 li
83.0093 24.4858 li
82.7822 24.146 li
82.5557 23.8057 li
82.3003 23.4937 li
82.0171 23.1538 li
81.8188 22.8701 li
81.7334 22.6719 li
81.6484 22.4448 li
81.5918 22.2466 li
81.4502 22.0195 li
81.3369 21.7646 li
81.1948 21.5381 li
81.1099 21.3394 li
80.9966 21.1694 li
80.8833 20.9712 li
80.77 20.7725 li
80.6279 20.5742 li
80.4014 20.3472 li
80.1743 20.1206 li
79.9194 19.8936 li
79.6357 19.6387 li
79.3242 19.4121 li
78.9839 19.1567 li
78.644 18.9302 li
78.3887 18.7598 li
78.1055 18.5898 li
77.8501 18.4482 li
77.5952 18.335 li
77.3398 18.2212 li
77.085 18.1079 li
76.8296 18.0229 li
76.5181 17.9097 li
76.0928 17.7676 li
75.6108 17.5693 li
75.0723 17.3994 li
74.6187 17.2578 li
74.1367 17.144 li
73.5981 17.0308 li
72.918 16.8325 li
72.1807 16.6338 li
71.4438 16.4922 li
70.707 16.3506 li
69.8848 16.209 li
69.0059 16.0386 li
68.0142 15.8687 li
67.022 15.7554 li
65.9731 15.6133 li
64.8394 15.5 li
63.5635 15.3301 li
62.1748 15.1885 li
60.7573 15.0464 li
59.2832 14.9331 li
57.6958 14.8481 li
56.0518 14.7632 li
54.2944 14.7065 li
52.3384 14.5928 li
50.1558 14.4795 li
47.9448 14.3945 li
45.5918 14.3379 li
43.7212 14.2813 li
@
.5 lw
[11.3386 5.6693 ] 0 dsh
423.11 302.735 mo
422.317 302.424 li
420.928 301.8 li
419.54 301.262 li
418.149 300.808 li
416.76 300.326 li
415.344 299.9 li
413.897 299.447 li
412.452 298.908 li
410.979 298.313 li
409.504 297.916 li
408.03 297.604 li
406.499 297.151 li
404.997 296.669 li
403.467 296.188 li
401.879 295.733 li
400.321 295.252 li
398.733 294.798 li
397.088 294.316 li
395.473 293.862 li
393.799 293.268 li
392.184 292.729 li
390.483 292.332 li
388.754 291.851 li
387.053 291.34 li
385.295 290.802 li
383.54 290.263 li
381.782 289.667 li
379.995 289.072 li
378.209 288.363 li
376.395 287.627 li
374.61 286.918 li
372.709 286.351 li
370.811 285.728 li
368.94 285.075 li
366.985 284.48 li
365 283.885 li
363.043 283.176 li
361.231 282.212 li
359.387 281.249 li
357.545 280.257 li
355.702 279.293 li
353.86 278.301 li
352.018 277.195 li
350.147 276.09 li
348.276 274.984 li
346.377 273.878 li
344.563 272.772 li
342.719 271.639 li
340.877 270.505 li
339.036 269.343 li
337.135 268.181 li
335.407 266.934 li
333.649 265.687 li
331.834 264.411 li
330.02 263.163 li
328.235 261.859 li
326.45 260.584 li
324.465 259.365 li
322.565 258.118 li
320.694 256.757 li
319.135 255.283 li
317.547 253.78 li
316.018 252.307 li
314.487 250.861 li
312.502 249.557 li
310.575 248.253 li
308.733 246.949 li
306.918 245.646 li
305.047 244.37 li
303.206 243.094 li
301.391 241.818 li
299.633 240.543 li
297.905 239.268 li
296.034 238.021 li
294.219 236.744 li
292.434 235.497 li
290.62 234.25 li
288.719 232.975 li
286.905 231.756 li
285.092 230.508 li
283.165 229.261 li
281.264 228.014 li
279.167 226.767 li
277.125 225.491 li
275.141 224.187 li
273.243 222.911 li
271.258 221.636 li
269.19 220.332 li
267.12 219 li
264.938 217.667 li
262.668 216.307 li
260.317 214.975 li
257.823 213.613 li
255.243 212.225 li
252.579 210.808 li
249.885 209.39 li
246.994 207.973 li
243.876 206.471 li
240.673 204.939 li
237.47 203.466 li
234.067 201.878 li
230.694 200.319 li
227.293 198.731 li
223.523 197.088 li
219.838 195.415 li
216.068 193.771 li
212.184 192.042 li
208.414 190.313 li
204.984 188.612 li
201.667 186.911 li
198.379 185.211 li
195.545 183.538 li
192.937 181.894 li
190.839 180.335 li
188.94 178.776 li
187.296 177.217 li
185.793 175.601 li
184.49 173.957 li
183.384 172.341 li
182.42 170.697 li
181.57 169.053 li
180.805 167.438 li
180.068 165.85 li
179.387 164.263 li
178.764 162.675 li
178.14 161.088 li
177.602 159.557 li
177.12 158.026 li
176.666 156.524 li
176.241 155.021 li
175.901 153.632 li
175.532 152.215 li
175.107 150.798 li
174.682 149.38 li
174.2 147.963 li
173.718 146.546 li
173.151 145.1 li
172.556 143.655 li
171.96 142.209 li
171.309 140.763 li
170.657 139.317 li
169.438 137.532 li
168.587 136.001 li
167.822 134.499 li
167 132.968 li
166.149 131.465 li
165.214 129.963 li
164.307 128.461 li
163.343 126.958 li
162.209 125.343 li
160.934 123.67 li
159.63 121.97 li
158.156 120.155 li
156.54 118.285 li
154.896 116.385 li
153.053 114.344 li
151.183 112.332 li
149 110.121 li
146.704 107.853 li
144.011 105.387 li
141.035 102.779 li
137.832 100.086 li
134.628 97.478 li
131.34 94.8984 li
127.882 92.3188 li
124.282 89.7109 li
120.653 87.2168 li
117.082 84.8354 li
113.68 82.6528 li
110.023 80.4985 li
106.395 78.5425 li
102.455 76.5586 li
98.5146 74.8008 li
94.5181 73.27 li
90.1523 71.7681 li
85.3335 70.2373 li
80.061 68.7632 li
74.3921 67.4307 li
68.269 66.127 li
61.6929 64.7944 li
54.9463 63.4624 li
48.5684 62.1582 li
43.7212 60.9961 li
@
318.11 38.9336 mo
342.61 38.9336 li
@
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Protected by U.S. Patents D454,582. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 53 /five putdup 54 /six putdup 57 /nine putdup 82 /R putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings5 dict dup begin/five <1C60D8A8C9B7BA8F622456C4991FA35B552AABDBA410C5FE2A289D1C4B46CC6EA81B6F378E0E9FBB887620926C1C295BED9DF5CC60E1506BC8F14C40DD7EC5F146AE0B602E11477020F8E0DC1E61B7E5001ACA3564CDADF4245B4EB166D458A0663DB06F2579480E048AFCB0FC> |-/six <1C60D8A8C9B7BA8F6239473257A8A6F62043E414325CA26487C2B24B191B168E0DA687FF84130E464A581CEABD7A1831A83A01C968043ECE2E73D7C0CF5C7A53E3098E1CA41D075CF1B0FAA4D3D63203DF5A7A1EBF70F4DE9A7FD3C13CDDAF688040D9BEE80C42C7397D37BC0163DE0936D86331F997A056B7561C404EF4CCB6BEFB2D969A52553626DC842C> |-/nine <1C60D8A8C9B7BA8F63126F4A1F6CE00289C1CCAFA389E5E5FA018A9CA94A9AB8FCD76431E4E0F7BC7A33615EC70702BC420EB4D303A110985122EC77C7B03EB8C71982B066BE2C1A366D2D1F4CF54461387C6A50BE96E3793F2EC562860986B8187C9036DC54CA8C289E1AE1DBD61F35DAC84B3776130ECC3480C8D38B2E2C8B3A54D553A0E087E1F35341759A> |-/R <1C60D8A8C9B7818197CA8C10BDEF0792283B4AD60A4778EF579EA03A9938895E46A3DD671B55D56CE5AC1FF66AA5C5464B6272AB067D7AABFB9BA4824D96D968B50E7E75C15CA7D5303E4D6EB750FDAD2DAE18E237F2D0B786B8A46E9DCB053FB02CA78233BC22EC230776B8699564C207758BBC5B113141> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/RJHSKZ+MyriadPro-Regular /MyriadPro-Regular findfont ct_VMDictPut/RJHSKZ+MyriadPro-Regular*1 [53{/.notdef}rp /five /six 2{/.notdef}rp /nine 24{/.notdef}rp /R 173{/.notdef}rp]RJHSKZ+MyriadPro-Regular nfRJHSKZ+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf354.61 42.4546 mo(R659)[6.45605 6.15625 6.15625 0 ]xsh.85 lw
[] 0 dsh
318.11 24.231 mo
342.61 24.231 li
@
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginRJHSKZ+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B896187A> |-/parenleft <1C60D8A8C9B84E0A47D7FED6098F93D599A35099EC3AF2C571CF0E48D8A711D412E34AAB2732DF92ADCDC95C7C6D97E8C44CE2751654BC55BD12CD842E> |-/parenright <1C60D8A8C9B84E0A47D7FED609B3683507871E5C5015E3549BF91653A329EF8D5BF37DF948A5A8471707D087A577F9EE79FD91DC92667BCDE588EC87D3> |-/zero <1C60D8A8C9B7BA8F6239473D6D0952B7B27F0FFDEC3D4AC868BB2F3F35FB5E9F1C0F84AF60C7D8EABDB59B8E1F960151F9511E55A6B26091EC60E1C90C277465A6CD6BF415E99C1E3222E5D8229E07EB706E217942A6C6EE460AA0> |-/eight <1C60D8A8C9B7BA8F623D810BCFAA50091BF89AB5BE3357ACF7A8EC11C35A526108259CA49EFD17EA8971235551BABBA49C018C3375128659D5D7051D45E4C4ECFE02CC0D35373F3D4B2DC792F4C41BCD9DEAF2AC24EA7A456EB3C15513EE5D201ACCA4975153635E279761AFF1AF1596B3D3861988A67B17B4B842347EAF131C1ABA71797B1264826F04BDED0719803E211C51F417CEBD773552253C6786889CD2B3EB81707FCE2453D0BD7C65B6D6DB5614A7F2FDB700BE408D6F36A3C20DDE8F30CA7C808E9263350AB2907E45DC2CA6BBA6B44E98822CA142BAF4C98107A946AA8711E8E6F4BC5EB9C6DC60704FA7E3779BF270D263AF4819BBE793351D4C> |-/T <1C60D8A8C9B7AA91799D50BEC147DC15659E7F5EC34F826A01358F7E6EB53E56E1831B0550D2FE4055F5> |-/a <1C60D8A8C9B75946039FC5B56ED6A50878B478B1780B40C4125CE8039A261528F027CE6FDEC5783823498623E2545F156FE1817CCA8E4CEF932EAF146EA4E45F8E44AF7B3429BDE6EAD3417E01676A62E7E41175148C72742B2C6CC241FF06B9AE6A99EACBD61DC0A967A1A9EA490A3B86CCCCBA356FE0C46F09ED4CCD9D7FD84EFCB667453A166D73A23A48C3A48DCEEFA9A85E6DA8EDA33C7A566D88393EC5B1BCAE7CEACDFA7D9A043D> |-/l <1C60D8A8C9B87EB6C12D27FEBAAD9108B57B5CEF2AA76DC2FD884A8623> |-/o <1C60D8A8C9B7967683396363C4C5A9E451FFBD75248EC3A8EC4B566E5BD4E7BBB72EB29C672F7BE91209F1171F84980F7DA08B43C90BC9E3BDC65B190F81C7A4B1ED6D074E407F8CF228B147D6A94BC016CC67> |-/t <1C60D8A8C9B821B37F30E246C711EE3A9B1905ECA3B2281EC66105C6FB87D8A11F34421A86A4C8EB1634F07587A29F1959067E8F5C01D391C88E6402088837AF0D6E016A2B2057BCC898EDBE8C7509BAF139B3EFB89894D72C8915100CD3D16C57> |-systemdict /gcheck known {setglobal} if end {end} ifendRJHSKZ+MyriadPro-Regular /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 48 /zero putdup 56 /eight putdup 84 /T putdup 97 /a putdup 108 /l putdup 111 /o putdup 116 /t putpop%ADOEndSubsetFont
/RJHSKZ+MyriadPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero 4{/.notdef}rp /five /six /.notdef /eight /nine 24{/.notdef}rp /R /.notdef /T 12{/.notdef}rp /a 10{/.notdef}rp /l 2{/.notdef}rp /o 4{/.notdef}rp /t 139{/.notdef}rp]RJHSKZ+MyriadPro-Regular nfRJHSKZ+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf354.61 26.6294 mo(Total \(R580\))[5.1123 6.58789 3.97168 5.78418 2.83203 2.54395 3.4082 6.45605 6.15625 6.15625 6.15625 0 ]xsh.5 lw
[5.6693 2.83465 1.41733 2.83465 ] 0 dsh
319.11 53.4336 mo
343.61 53.4336 li
@
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginRJHSKZ+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7BA8F694E6FA15FFB6B382A3EE4F45111A59DACAF941116582617B9738BB5AF1D396C826652BF6DBB46CC2019C22EEDB26045C1BEFE4887D256AE5DA3C25CAA99D62ED97486E7939D89DEC92F35F04285> |-/seven <1C60D8A8C9B7BA8F425ECEA3CCEB01EB08904B1DBA8C9FADA482DD5BD7B85932F4448BE6EA91291DDC2715CACD23> |-/J <1C60D8A8C9B7299ACC7A42E6AE29E0787D9DA7475BC8B52E05061F7086AAFF48958D5796C25528B68A53A127F22B73E1B82D000FDDD8C93746C59D7317> |-systemdict /gcheck known {setglobal} if end {end} ifendRJHSKZ+MyriadPro-Regular /Encoding getdup 50 /two putdup 55 /seven putdup 74 /J putpop%ADOEndSubsetFont
/RJHSKZ+MyriadPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /.notdef /two 2{/.notdef}rp /five /six /seven /eight /nine 16{/.notdef}rp /J 7{/.notdef}rp /R /.notdef /T 12{/.notdef}rp /a 10{/.notdef}rp /l 2{/.notdef}rp /o 4{/.notdef}rp /t 139{/.notdef}rp]RJHSKZ+MyriadPro-Regular nfRJHSKZ+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf353.61 56.4546 mo(J27)[4.43945 6.15625 0 ]xsh[1.13386 2.83465 ] 0 dsh
319.36 66.7607 mo
343.86 66.7607 li
@
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginRJHSKZ+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7BA8F425ECEA255C7F445C46B341EF282C71048D555A5D598E89496E7235E7E5E61E755DE1DD927709B69AF39C5FFA2F961FADB> |-systemdict /gcheck known {setglobal} if end {end} ifendRJHSKZ+MyriadPro-Regular /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/RJHSKZ+MyriadPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two 2{/.notdef}rp /five /six /seven /eight /nine 16{/.notdef}rp /J 7{/.notdef}rp /R /.notdef /T 12{/.notdef}rp /a 10{/.notdef}rp /l 2{/.notdef}rp /o 4{/.notdef}rp /t 139{/.notdef}rp]RJHSKZ+MyriadPro-Regular nfRJHSKZ+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf352.86 69.7817 mo(R100)[6.45605 6.15625 6.15625 0 ]xsh[5.6693 5.6693 ] 0 dsh
318.86 80.0049 mo
343.36 80.0049 li
@
%ADOBeginSubsetFont: MyriadPro-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginRJHSKZ+MyriadPro-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7BA8F622456C4A5B0CA9B1BA284AF806928062A6B7B09FB3F0AFA0642E6C0751425F2912B774695F4573A7ED10CC8657328CADE6CD5BA97A6C5BF6C1485B23CC65AC596605B697818C329637772F63BFEC9BF78A141357498BBAC8062C44F8B28D5A5EFBE38074FF4A38C9291B6291D33E32B9904245459FFD3AE6CFBA6472FEF21B7BFBB29FDDBA248755ED07D6E4AD20219> |-/H <1C60D8A8C9B6415B1C8023DCDB0FF1D084A484AF3579A723AF8D5247ABB5D292AC378AF267DE95E8DC7174E8DD00326C723C8D6F70CCD88C857300A53452> |-/N <1C60D8A8C9B647206730D8F66F8AC61925B6B1318E1FB010B62374917FD833E1AD6BC7D55692C9AE2F77E568D5881F8457D1A44289B0DB31B4E1DC1F3487A85D6C086A5A13FB7D7B66A3F61EF4969C1AE080F7AF6D145220EBF9A7BF4151121C2FA015E52FB7E43B5305D938D71B0B61429953BBCCA81012B7A0E4> |-systemdict /gcheck known {setglobal} if end {end} ifendRJHSKZ+MyriadPro-Regular /Encoding getdup 51 /three putdup 72 /H putdup 78 /N putpop%ADOEndSubsetFont
/RJHSKZ+MyriadPro-Regular*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero /one /two /three /.notdef /five /six /seven /eight /nine 14{/.notdef}rp /H /.notdef /J 3{/.notdef}rp /N 3{/.notdef}rp /R /.notdef /T 12{/.notdef}rp /a 10{/.notdef}rp /l 2{/.notdef}rp /o 4{/.notdef}rp /t 139{/.notdef}rp]RJHSKZ+MyriadPro-Regular nfRJHSKZ+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf352.36 83.0259 mo(R101)[6.45605 6.15625 6.15625 0 ]xsh372.456 115.954 mo(NH)[7.89551 0 ]xsh388.175 118.954 mo(3)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/RJHSKZ+MyriadPro-Regular*1 uf/RJHSKZ+MyriadPro-Regular uf/MyriadPro-Regular ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Olivia Venot) ()%%Title: (taux_loss_NH3.eps)%%CreationDate: 05/07/12 15:38%%Canvassize: 16383%AI9_DataStream%Gb!R&q0q>7Z7,Xa!:N/W&dSV&)eUK/a?4XoR6#$p84&(3@9@l[o>c9Oo,Qr4DO"bSZE]B,p>,Un]mbli>`q^UW`#fqAL.u$m6Rf(%BYElCs1&osNOZ"/F[_:jVA)ZKp)B@kSd-Gik;<Cc)R?.>XHHR@99-'-Q'J2Y#.7(jf>1P%eN`N2?gGC3Z/'5?HY`0-B(bgqG[,-q%qG;S1GILGO!UT)_rI*%oFp3u.6)W1Je8)mnK`h:agh>9^mI"&`+.&h*KS?`&]K9d`CSufgQ[3ibYVWOdI4!$?pT!]T[5dtWM[s!p%bsAI\%OfnD#@Hu1LC_UAo)5TFmfNRj!u[1NT%k?C6\A;6^Z<:D^%4Jgh1[>n;KdQGG3>p[rIh`pr+F)C<\^_(>a+f]W_5+$qGI:X%1opR9+gEKtNAX:f/!?&Q9J&J6@b63OP8^KfOj33X'jiiWMkV_A,B)2\nk)sF24U)6s4+(J""7?$D7'0,h?P@NH/k0Q[*\2I2?!ts%,\rhod80W"EmUn3Y?QuMV+0FZU/b"C[<cmGY42;LB(at$2)O6=;Lfk>mX)VXgsp9PqMfZ6/Y6T<^mlEHs/pR:%aI-.erTM6_0At7%3@9C/'U+\MM9CX9O6?+H>gAOn1_!9IH/CCSU`EiafGNoX=<heqF*?,O]Jj#02NHp@V;%q/;f=/U4T-B3BCj"?(Aj``$UaCWlRa'*%i5O]4duG\b:Te@95<aT\>L`r)9igh)$Q97LG3aZIWS4OBT9?4npZqj<n,D-5Ng/IoWoBpbi2:/FB<fNM<>GP6.R$j4I&a4=Bt921%Be@4f.)Wi-L4N0UJP_(u0!dGf$XkRo@4_2/[4Mc[/.80@)h&u1Z%u5q,1\:\nO^!A0]b&R/XHnKCR<6>]Nh=V.)ls.M@]*:5/iuW%\Z3X^pk_g,-N$7[*"s8?I>/u`:P?Ori?sYT;1dB<1#XMZ_@b`S[RB@J>K.96-]T/G@O[<DqkV`;r?E#:$U56#>fJNW5DV=r0r6(j%&q88tFQ=-_MEAe:p5YNH3FWQl+%"r]n.T$#1It#1T@"Oo^BfPR@l$fX6L3Y+n.U<1kihs)-cI&un.VL7I/$9GO`Cc)/+"F*A3>C0%1]Cg(7e*6Q7jptg7Me++MEPEDnY6!1QJ$X_#ked;E-.$pEHG<PNg`/Nn_ki^;?"T*;4>kCpk^[a\laQ(2No.R3SFSsDT9SQ<uACi%k*/dm0/0qEF%Y[lZ(k9rrDL3Mk%mN>fI6.n`HnGae,&\srC8T?P"E3Pc8h^1D4sZ&;>t^6S^rWDR'\o;`TZCP536\%pC@43D23n6%UcYp,W9h_1@`0[O[2j!9>T(8W?eR-7$#9P:LOZ:(PjNsX6D$5eks&Fgn=T<=rei(ESX)6bks*Xm^R`.3?Tq88kOYeD]`#$1TMM)m%o\]'hrU'NZs'gg_M3^,Nl+anpqV1g=s%3,1e`So9pdsY6rarq/?PoE0'fE[0P0@sWON0-O/4gcWjo;etiEr)mGDYg5jSr?:mn$?6%DB-U/a8bJi]-J91GQcV>ZepqAj(LF7f'qS=WQ$@JBp$]:`NT?[_M&fBMU$Uk[/W`er/:S8oJ,b/G5"O88qnYCA*qZV>+o1Z9=e$B%S#'6(/E't2Ins.i&shQb?%G%`Si/.R7_,>K\74>*:)%oR93\)Q33D1!dS:,G014XR)9,Q0+1sI_YN4XMSW+Sn`]!&eluC\X1V?;K%N/BN9EG+6#+,;@'dMJU/#2#tYVJqL0_XQM2Z_ZXsPE!=^P"e^op)HEV-+2gqF,p8AQH9?sMq=g`TPm3hRhlm[F?4H"$ac4D0Gekh%h1Il:WZVn4M?Fa=Sf,GhkG34OgUgYYP;G=1H&]5qSf*r(9Oslnai"$-HY:Qbhd$I"0X_+E/?,EeS.jt)j?WY2bREm(e$eVC$S]Z<%<(\PTqol$D57#ooeC!K-CRdG]-KkFuE^m.QPi;j1:GQ^h^hB=kTN&AiQ6"*r]$hn!3$#>b\HSb4>TBT,"oV/8E*@t1.fHE4Y]!,9%JK%;&%7C*bRT.S":8QC;'KiU)RkPm[p,N)@[T;I2jtl,X.0=>lF(/##dFtm8lWIF9K_Cd^[&&Y_XZ.q-AU;UP<a;)K_N<Xr=cdjp%EBERQoSI$s."P:6o1%=dMRB4#-jH>O9Z8:2`M+pqapuO\X$%CLcC#0MaZO%%<)ZW\+PXIr/[Do`G3uQ.H6E.PeMs^OZX,W#WI'5=%'R6TdpTqnD-+,<*eu#jLMKlaP'A=]mQ/O@\<m<5L_@"3\au\-+!f^%5e6SOo7!L%;(6N(Z`G61&>o.smoh8JGm+u4YKoaHb@8qtO%d7j_:Nrn>WLB^R^ECS-Nl/G,tL>Y'6[gf<?0$N]`Q(n&C_4bc:j'PF?K!;Cs*Ug'@giaO//=1IQN@[St@%WthFH<iMT\SS7S7ahM%WbAT$1lZ!TqGE5fHI#r$Tm`,nL<qHG()r#b=1WoB>K<[9q/Vcd$UN+>1<#cc)'3\>3tul5=MR34T/#2td(<@S5Waef:5QI)\<E7-%/rPMM)V-j<F\i&*'s/U!,LnE2cP;L@bC@,Y*GQ0sb])05LLs+dD%,*na=[>SY5;q[Cah,Tf<Mj(R8OlG>Q/c%T#uER#)loDA;+eS%1)dHUi@$7/\a4lUX$#F-UAr;hFu>:,(8rbjl`f`EFe[1k\!1W4K?/Y!6iG.MCsC"$5rMJpNCtn6Z*sB2N^[Tc)=uTef^#t]eg,.,%:^bCJm@#iC0@kpFmSe/B&`)Hoq(h+;VVu*I4^tnf)7PO8p53RgeV0@Z2Klc;d8f)$PeE"8esFDDGIAD4[cSX+$t%10LQ_(oY1g7D%P1-VQnR\.h2i"X?h.#!d"hchD<h;pCTt4sVp7Z#8m?)L]gD!$K(7A_XTfSB37UM1H`VU8BaXfG1OeA,pC1Xr"'\j&#.3Ru(\:!%P%`$ER7V[EFhE/Wm4eJ+=ja"H8#X)CM_G[r&kJ$7a<]`8#hf65.een0*6ag@i*e0.d?]BY#b&=V@S\a8u_PheK[&=h(gT#C&VnZg'@%MHK;PC1M'nZC:cS6T)dt.AuS@HsLoVDJ8HlkE^ncSpdf&HJ.j]R$Zqn<C6P%egXnWkIXe]T3[&LVIIn5M7lq!cfF<!@f$Oo;1%Z:%m_%:l[bp=*rgc0^WqQahfL&??Eo2Lm^YWb5hOF2JA`V^[e\CBom[#HR)YG^Fl/`7XGap:uen^7WZ^TXL^(1#4ghFONXOVB)$nR^V%ju'.QUe4h6<F6^$f>6'CZi89UeUaFeX/,8eep*b8N90?3C0dcAk>`J.q$)Oe#VZ\tdj!&WEbu0<VQan<[`r78'U8\&*Dk+6!uf>l%3,G_nra,'UC4K^*SpLWekBd)Q[u$mDeR.jr3;51A2XC<HVqOQHF?X_Aj/^n6]ek:4?'kVn;6T(fgRZ*kNVAK_Y2?A4l?FMFUH%c2%ZE8;b<e&:-p2XfZB!q@Fj$fO$T_HuM%3-Map[<DYpGMFUa+iO)hfcL&<emOjXZCq2WqKa(:&Mg-W_dU-r]R4SE0.L$5?bVo5@9o1%0CfjfX79A163U]]XkAHN*Cf(;!)m2'CA44j\%_Hl;PN#a2EEhg?DmX'cP>YS'PqBfs6Sk$a<Rf*TTlL,O["M]J]+?]p4KeFIQ?Ms%Yh&TMJIKDP`bBnB^V+cjF@Q!/h)<*68.*D,r$'D)Ec2C(Yg"69F05WDZtm`*A?Hq5H`?`(*'s,t5l2Yj5n@'CQ7E4l\gMkY:sR_R%aR)jQ*746YO^/JWciF;2UHiHYHYhJM']PQJ>`6j3dml9cWEucj'5H!Qpo;&OOl*cn$<DR$!^T8D8ouWY0ke7%]7[;!FjL@RCq&]%%\^r=\MuD9QTb%"Yo8hbdX1f?6KnhK3KW(l`enZ47I+I<'6U<Uo@5e_-@BeO+72gUEj.:Ds\rh+K0@\]/ocJ[-lELTIODPkrbGL^1%>1L@meL(2JEfJWha@cJN5m!04"99-L]o"V+5@SY>7R7/Gcu2mQ[Dps*%L2c0,s9`B[VLLs:_O:OZ&]5&Ra53KZ`j4P2'.r54U5-k%Kdn]ZB!0j=$NIK<Yk#>&^"KU/'j7k')'n^dlE0f,>gXf"D?=`@?iBrrdV_83k[-FDKFV:c1k#XtT>Q=j*(]G'K2;'akKO#iWc[!J%c9^cu*D7$f`.)k`0]tTJp@8GF>q2GYJNk:;4Ye/TD$+#P)Z=ujg?>>!Rk)BmeDp0E<$ji_hpJi)os],=bGfple:]]\r_K29X%qh5%^=W4^hJ@BsfWP1d*X=EXs/^B*U\d#h<a3?oUjT\1o/_tM!(3^`h5Yo]5VpDqbG6>t*]III4g+oTKPmggO8*T+oN?+BQdVWQ)o*FN%r#;iij#HCO0.qE9l]1Dsl4l[:](+VET_B&ud;Cmq#`"OX0HB$'5nA=ICQaQWmm!kVF&J]SetSCfg1*8Ub>.(,TF0NSIr9H1*MG";%$#1A\T90p-KDYsu<ij/Q:J@S(CP;[n*H88Zg<)CV8[Mp$pP$i2^,t_Qj1&EborGjD:AYB6%d=+35n2J:kWI@$'[ubWVqj^s'q=T?%PR6goDc=^L7o[=*X5UYCU/*HUZMukb3jII;$d:9p,JFpd4ok0DgAh*F)_AG4;XrOV'sPfuE`\5R=:lC;'L.LIp1j('h_&Ci..J_*%_BPiOmGIEn&AJ'nU4:+hpdtDBQP?Vhl0W$j6Pj[W?6M?^^)i3MMY%+&$'Htl#K;hc4Kj@I$s#T9HN"QK%9u>LH80UplhP>_I$Ze<%=rE*Ea2#GrU(**4!)54OZ:#d3*lDUh5J%aNne;9bDWAo,AEd^p3QHTd>iMpkYu7XY^Zk4APN1,8XmZ(*4eDT7(RXHpqC60`DW:o%%5$2q_#[6G8X8d+,QpLTNeE[?AUYU6S_C4s0!DnM8`K1#UBEI,@jAN&Qr)^;\>6jE&lD(?D#5tUV*&(JGmfgMCP&H!+R.OXurg-N\%"Vu=c_DL#NTClA%atUo\^NWp9%?`:c7i31!a&Tg&8d7"rHm83AVLM31aJ"iS2#]u;V-/krp`jGEJ!6P/r=rJb&bOu)d5\ej6*K2F%qY+a1IiTW6or;]4i0jlp(6op?j`1C3r!/qdrs("?^&?tUGW#IZMa=Q"Gl?O&McEd%C0!Ni]<#)'_*e1"UFS4E$o>tSY7B+l,:a_%%0kstnB[ll#;2/Ward./SOsrm0lCX1an_ZJHQ4Z/e0RlS1bhrHg_14#gD7;len^?iX4`FYUldMrO.&.]`o,k41';]p'*ctcT,glAD%^A,SYp$YB/X5:&2^_W@S%r4d"(2C;L+UWE"^_sm5ai-nSp#^_2?Y[=s[pQ11gf*meF$ID!YQoEgG#/ep`Q(3i:;U?9&^YB(]XF;8%O-'#qD7btQ`3Rs.A8.1ETW67+cVsI9m=!^BLMP:4[8u>/'b95W6,+GTXPuNbj1jlN"ptT9]Mn4I]CB4fCXBFa=%")rLhaF!d]Rb/%nQ3qVk"Us#R,D96euJrklsKE/qB_R$:Q!=uR^s6#fG?UU>_;Y&:(0)QH9=WrfeC^qgEY_V3KkR)C0p#c15Al7gA7l(]Ad<qb$#Qa%'j0_,E)7T4S#jJ$^"\1u_c+1a_r^pr2p9O-J$o<Z[p%u:b[%[rYJ>RfRDOM+a17[u"?aWi$tu="H+2Y2pZ'Q->urj/+%Y1s'(7S'%L8!q5*XjL<n^+Kt1o#R1'8?3oX8VnJ*qTJt*%Zeo2INK6IQd[^-Tj(:S$ooH(^j2#WV8S91D+M]4#uXc-VCN[B7kX<q@Bd)#c$a1%X0#^+$;0CPDa:p3"4mCRW3gp1b$u^e*70hM$?R?B/>#)Y7:sC@h7r7F+8(-Wj*S1'^\ZAl2YqoM#r'Rra48c<T__uUT=6mu%`QGa%p`&D)f4LdFNWbgDJ&X5BUWp4p5rC\3Z1_PtD?i>A?7"X2!8N5>)t?*#,T:3shedkK2-lLnB<3;!QZ1%2?f[k=r_dT6>H_;D"%0c1%]<us%=LH.iVsV4aYq-N/n,+Yajr'UY$RH9Do$#,G9#O[9K)3;R4ou<Sd[Xh"jSlMnZG7t=C>NOK$eBl##@Vk\]/B-j(lk]OCkb=M%4r^%/T]p)='K(iQkk=:$L2OA9R0;/A9+EICDbX8"(u%(f'0P87Cqno-=56qPKdiis&]1XCS.A>[/1u7N[_qV)7a!tbCTpA2h2b'@%IbJ.*qZN/q<BnE7724(B/Y8<'Gac3VKN)CBB\Yt&<tkn+:8ZAQN8HmcJIr,d8Va9V>3Qmg;s;Y%6n`g973_m\GXOShi*\k[_tj_<%81t;c6Egd7[+"8OWR!A&$4s(8J#a'J2M^O_c=lQu'DC1+9aQCaSIN]hs84fFs+#M%>.W*t,B&<n(,k)Q`0+ILY9$YpJOE30kX0mA%;B8p,?+:>&f^*4bTQV/]h-.8CIF!WlDo;K!X>^&S4YZg"XK@V(It_9*J3(s,^Oo[C_S!='@3c#DI\Y"Z042/8s8't5n>LR7$s7Mn%&.+#8"]IH!jgS8T>ALgI`##:0G[[@FrHda?S$8bH6ZD:$?Q(>^TcgK6He$eX"9?-D>CCOn(]r0N;:enH6Yb!NfDDMt0XQs@a;53N%QWCf_eOh%85<E#72<.2CJ3hX9(i]OhG@'#K!.#eU-NLQjG^CB*"5tF4.ln5Pd!C\I&dWTeeRD`iIliHONDd]u?\7Q6(>E5$e`,\s%b%3jnj,_<7X0]=;(n/"8X=9=.4f6(NKB>5Np03.URH!*ML/Kps]4!*--EMVLs(M>=CPa%rUXsFionD$IbT[ul=KH,P47a2`:8`hG%CpkN4eYtuTS5(62+m4KD^]qMl/rO_qd3/<[LZtZR%bYu*[(PHQcQ&7^.S$Y;mC0Q2]fukj_ZT%::=ndE`d=aI]I3E\]3fAUAQXin%:gi<[\8(K/dJp5$BHRGS0O9a)(pofc2?ji,O5?uM<"Y:_i\1(e7!niDcm%02U8_?;JH,\aJP,lSGQ5iuO8p\<pPWkl=;??rZe?:6%IFrK^('@]flRh`F7["t+>S@]ijtfUMR'_=;cT*,Kp`$.;$:9_a[bEk87iaOc%G7>5!2K?;h%:;ha+iH7QYNuG6<qR6!I5;76j-o#%,U1$I?&%erBMhVDJ`,SuQu8uM!->4d^^=16J/5E`h:]<X39\mcmFPYA)'[,N?L2dkg9!&K-W\q;lB#=3>CZlXn%6gp<=1Er\mCXi%[`EoZmno;c>%:NUogS=8#TRu,NA->s'(<F4;%(P'8G@GH4VJK_3pp=hrXSJ_#_;=A#I>Q.mZmnV(E>&FG6-N.O7jC"4VP3RB\.pq%]Xb'A<BgN5U=!]+$Z=#5qXDM\#m#3>X^^0ERME)<cXJmc(JE*m:q.tr*9?cj*VChhRblJBS*B=0Q^j:5T;9rj++4m=.GDe\R`Z^W%n8IC(]"7j8^KZ#j.\HSGQ^cORRrl-YT.9*M9B0M7V=&9IXlbp&@u7bgf&t%XlL`r%bBu/)dI4R2>^EVt24$>6/^:Ci-]4/C]M"FU%osnPs6L-)6'0r_mWGS:+hGSRhC>QHZ^@!p\J!\pP:K=DT:Sn$QH81`LG.0A:$CT3(iQdS9gWJu'r61J]pY*kup[MQ>h3[SZPW&u>%YOY<%CtZM#M\kX;lH1FFGAIBkQOYFE*a=OfYp#e#?FRQ'qZ36u%]#V<7>Ki0f#sEW2p,(rF%NA`ae\)UVqLJkWODnFk6L7Rb1mUI%316,]B/\Ab=1%o"qB,K8BgV4!P.T2`m]Vhp$i`sPk**N&n<EV5oP*jf30s&UlZ?kuN[bA8:,h<uh4C/#qKI6<5AKf4g5=?n/E(^*%>L&b?#'?kp,cf+4HiBRNGILIQ=ul-?FM;!9@YmPF13Mk@<iQ#WB.9KP@j,i@<@@umqHKsNgg<.6_H;J//#tbT#;=b7?NNIkW>]rX%kKD$inuD$SArUm>]_JeqT$odZjBp'g.<_1!T%31[[WtbE6`4+7Lm=Pib(6,Kc*R5[e#C7,[+f?iBdn$8ctW=+BIt1'Dl::c0/]]W%I@s^>iNDQ4erBK9DqSC\qK:L4r0A"qjS$JE^J:W2[C>7>$GEr^Fn+ao]C+RUG5"WZs4Y6[*U.s^\"<B=h-Bbu)G<Vdbht<cXN&+t%rI*i[@&.kSDQe,qLn1[WOnYT_Z>K$RSNs)b-^O7^p"8'5ZTGj)9mSiXY)Y_bBW$3<T4QVFmrtSfLHXIsdo`>'^]3+G58Pp\d]L"-%PEg#1Yg]/hk@,U-dta00[8uaY:6ERZ"?p";4K?pfIG[f'T"!;R4$A#I5MYqt'K*Z!:m>j`DtC[GSj-Nu>eRo%o"L[O*6[`b:9Q1Y%8s=?89DFJ=8@n&a3rtmiVf&)Tr\!thqK)OF`NN4eak6"PF.rUiJA@57o]tj6b.lESZhH\nV2Z5I:4MrC(Sju7?\ZVtFe2pN%I1;O%4^WSTpih%mPNk=GH::W-cjT)]n'A!G5iDS>gs8p`R!)Z(moS:2ZeZZ"I*f+HoT7Fi/ZbkA#%,\!Q*mI5Y'6t^="Y<V:-YiqcUtMh%SXeu@;e:5)\aSrCg[2Zr/mtTX:8cHsXWWY1F,p\u)*6U<%B74b[RE:6:@;[UjIIfcc^&:C^\V`$0(PmBe*Hn#LX6ENRi>C^fCGqe%]^uFi/J#LbFrT0b]@40GXF$c?f=Qm9%FV5eI=6K:3lPFh=;N$)qTHc:Ft*q5ps`K9^[5AJ5c;bdG4$,P>1`"l]&E[22\.tFmeZ_K%d.d@/3k$7Q4JquV:RAQOC@?PdmjZIG3A[#S>qFr557Ot!dPB&;U5[ERfOfU4UViBQ^Se3:H1l#\pH7QD^YeMCjfNmY^\5Llgs4U!%]o.E=rUlq<_hF]^dj+*Y/9.1Tl[s`N`q/H?emLMrl-\8]RX)7)q_WeK0=-pCanS^!=Bad,\N9Z<=LtY!ltlngh+6B:2h(1>SoT]/%n#lRnlo'"hC@>f,MoLfJs/.5unt40kRdtrSH3l+mTAK0G3oKi$T.dU=;Z`P>ICE9BlZrN.GJDF_bN^RZlU.pa.hA/^LMK,(h_9KB%o<`hECsH\;EY-4T\#8?er)qjjp7(^?A,4He]^O=fc\pLOEpe&(mqK8Cq0WcIW&kg;,X0Na5?E"=c7X:TnEH#Il5#u+H?6ie9>41,%^XnW!M2f('jQR5pi;$u"A`r5KeZ$748SrSENitg7e<[MWpkNN9C&dpQO`/K<^TEp6Z^=rW>*nD-V9>KPR@>SV=$G5bbU"?/"8m>&%qp49WlHqE?6FWR6XgYXjrWI&?G"@*Xcaf6eCDjRU[f`qh+hOPZ%GpJ=Y-Iec!Xipq&%4P[\)-Js/'FFFX7g.<Yq7TE>72p\s2-M$%fm-`5r"Rb2Z!/gQ(u4A'q.V^j;lREFS-="L/ANm;V63$Eh7>Y\HOB#E18bA$>,cW4Gc*#p(IGV,rIo0"nAmYm1u/<6-$H:o/W/W&%fXV\WXXu+V31WAhlcn`oVcs[_OkVqrSSE@m_4Al<h^+Ug]"988LO`-.2[OhdQ_7*SJXrMm?BNe?a%@nG^eW8u\IKg%`p&^k([eOL%/9ti-c@E#_\gQD%M)ZO*,/Kg%e31)Z!',P;3>V_!4*^`u#hf@#bdHR$_ekIu6L@H%^"_tG;XT<Y7C<()#[nQ]\\qRp/qM"i)>doJ%'&5Fa5D8o+/TWA`e+jWTa5r)NNHb&9(D'kfDfq5N+'u,_FMF=BW0\.lZ+rG'n[Q,GD\(dt:m+n's-+*dV+ipaDej,A+aefPFR3l!%OX1""07>VfHaqjT!@UTrH6PX=O;V:B%3)W05(Z[YlUBVG#Un'5Ed\E^QZ2%)XH<F;]EBJ0o-!-\.G%[(bE*6,:[5,,XZ3B`^p"VZ%.3&jf':jMUML0B9nSQH>a+!',-,^CYO6UT(D[)d.;n$[oS;`oOb_aRt\0"$Y)]g/1]=nnQXQ]7W\SAr_`ZeGS@lM6J*_Sn/GDB;K%g[b)U<6fOZMGm40XL;A>>i$Q\nj.BD3Li2hj^3>mFH;+fbG0CO1+f]pfm>8n`")S+h5Vig(c`O2Hh-$s?A1>3q@g)RZt(+e^/DN9%Gh*DELZnF?IQWE]f-/l8i=>_*:Mg>0AL_Y4lJhZfnQ8/"Y@<aGNsh^S]gQE[#SF%BID0ko-1[F=<2h0!.Xs=%Qg)#HM%KgscnKg-%V6!>-E%uJ)\Ptf>0"GhAELO<cO5GUAgn-\H@G]RupHbkP"_X9_^rbi&`erH)#`\X="]FOS_/?q7D6M_pkE!A&aBc=*&PfKp3DdLr%B(e"P_k&Bhjj+\qlFc"rU8?qB;#IQ*+E:lfn4%R"6k8:;gdaH>l+r9so%J9fB$.TgHZ'r$%l1J\oWc9G;rTi2gA9$;4Au<hYIgL>%2QH&ATKRJ4>Rjl'7bN_Q?E@/^>#e[j@Yli&pG5#Nhg4j[I6ddC/t?$'^>)8DXSIscd_R;_8I,3B/-MZRA'9>N)%8@dCaJs@=:Vb7%>r+I_Ul.Ed?+s:;N0C/RXL;Bi$cac`Lt^L[I7G,\Xtt(G=:if>5=ihpRfUL`RW_;\\M`*n'XKr,2PV_5[s+n@NU&ccb22pEZ%FRs%o-6HtXV%!h0PLFXf_^,jGo]Nd);+qs_S14A5(utMmjl-W]16@IPj)oMn4`Pb'+SmGSbW!0M8&?Zg=Wjq&9TJc?W#Vb!FsgJ3D(Gc%?6W'AfG;ec#donE;&Q26U*/I'/LR:7.'[E@YWXaD;CUKLCA7F))fJMIO#4D*gD**HH]9#.?])#RA>qe"#6@SZ"+%gg)+/fT#RG7a%jo\J<-,r8d63Y/M9G"a!#;]6X0YXB'p\TO%gKqKO#q(!L,10&3a&\#WcZ!%XU9@AgebbG@_c.b?GCmGXXtSbJcCd>rT*+=PT"g3!%T<Zd"=R&Bkn\B"&]h:\$ku/.o,H?^[Rsg?JUE5U0#8).8UV0<U?3(T-OG*EB^eS2Ea!T/^+7bMlMehN)(ptfQi0$6Fm!$Ikj1@mU%M.BT[#&8Ve7He](=e<FBnT?81H_3N4M#a/9e,^R",5CA2,J8-`U@kWW,toFa82&<FEI8lprYhG)OMAf[ab&AkGoGJ81km>MDH$DQ%CJ)3q+%o!UVX6BG]3(G^G0D#&p]R3\NO"4C[-J^BQU008(E7-5>e?AS]Gu4K^^9d`m:))<V<=,-HDB$Xl\$0b5d>9'5Op@O'.JIW%&bP'cmj98Q\?dkI][R,;Z:H!W]QK%bZIBq:06O7)g)[p/UUn,GQb.49F)s)biMk-Nd.tE@)=u4SBN0Hr2O97F09jMorN4_>1p'M*%&j<ZZR$(OmXG&3N_AV7pG2+%Y0sGZC`(<$h9-@s1dHe+TFRhEYN4J?_qgG*Vga@bb/Y]E>6*_\A[Cf^9/=Y/r"$&mF/3";)?4b_]%6_E9m^*"Z[p.%MK$KbtPiO;&7)K!G`UKrqad=OJ++<*,`BY@41Bm"M*hP[X:6Q`a;7Q`uR`g#^>V'9^fY3)XIrG+WW2M(4%O0?t/%Hl&TLkr%2fCsH?Y43rIJB00#)J"7hN'+=GKS[g(`>mf@Q]8dC"D%pklg8HR?#'aq&'@[aSn0(-Bea6)h7QUC.4A;ZFP3!b[n^K*H%2NEqHZ6-#WmlKK!5BqnXD>@Co-)NRs0]X>s9uDp+a(rbUKaiup[52q2"DPj,&fa)\+5'Dnj91q4^8D:5Yq`q@@;B;kp0G10_k5E1%pF[e@r$H4<F?;\A@?"C)\/lU&)F@q2[Z>uTTke9AND8e].DcMD(T1WZIZEmFnm04`:1N1n>-Z\rWE-9rIeLH^/$[%6Fs=&CiG0Uc%0\,t4AX_/rZPI"@GfEkom9YNV?R?+M_U79;XbG&(.0`R.@2OR(!9!Ma\/f^SP"9/o`r\1-,:ptCQ7gY.cr_QEN*tm:;u.oG6E%&0%;ll7?3g3NI#4@:b,Kb;akp_DiqT!oS56J:jk\rR99)_.L3B;\9Go!9Yca%X/\1@g[P62VuQX7`[/Kf'cGe\akNMR.0AH^tDSbVX?%BDC=3C<0TkRel_1/],/ZFaA\"ocl9_8;]k+-O61N\7ZF7fbJrTg/rl^;9\/hJo?2b0LF=PM-L1Z_VE!O_SoSegBZdV$oBBfVa'_-%/BQ((F"[(Sk6a$*NosI7X3Z54FKrc#Ep1@rk_:jI-Hr.kc_.&FfBIA?_DCDmZ3A:jTaT2>F(YkUSjO<c5o32<-AO39K?fZ43,oF6%GQqG)0q0/on-h>jh(aO%\o9WlrA9-H]'p+hd0hm-%UF;`SSaFIcCo:a,R7tLFo8?.ckuQ99V@sFYtteuoU[^Y7g3dK^*Fra9*nYV%P``B:9-YWIUO.<<:?UZUOp@WLSM(4<RZ0b6i@LJW8@+S;a^F?=:)*F??V"[pWQ.L[f[6+.dDqRo,qkC;mQ&K/NDa`Xis7SG#YMu`%F6FVb1MJJ1Y.;^]@dT'?))$PUN)1'8qa&%@:OBE.S"m6`^<&e'%5$(Ok>=/_PMP#VOQ/>*g%mJ+a-\0bq&e@9G=a$Ch'NI4EGJ2i%9ZXcI\2>;;%Deod2?R7Za)&s?Jd$MP9%n]&;tfS"I52lhlE':KD0UkhYj%.XhI/B#U#j'8e$2eEm6&+].?(%rp1;"FCr%1a]$<c,%%b&=5P$5gXJS;>&X3Z04@_Z7c(l;5ubQE4ULRSt;jRIr=\fc$`?*+_V@4]E'3DQX5e?l@Wp0dqn+f;W=#9Js6Ne-@l(MWlM`DJAZ%A*!0f_V[5T0Ld,@aIJW*AoQl$g5TCGB#@csa[^;^auGBk=-Y3`p,HO51)@i\O$^i-Uoi#kV3p$-CNbI7SbcPRO$,D[#3(&\A-/MX%l@FE-OF0'l[KpW`;)j,pO$@1O0g`JKgPZY%0sN-r]cl!FaC[*`*>-H^h>G\X9jem*n#f+7]fIqi5SGkPDSd804rF[`o)tu$NL'Oj%j9RqYoWW`d0nf9NN$:cZjg$!-aqOc_PA#-8nuMMJFk`#`UU"?C`_^?O&'OTZNT7Gag+"gM.5X?98*^:j7/>*C7.qIjP_eV5i:^7q%SbgI,iYnD#[i??<<)bo(:N>/@^bY7#Z,!<^\3Q9@q8erK2O6i["=83'<@f]=/t,:B<-3G>Uppu#]^P:@Q4J<`O,UY`F[k`^U3L4W%jeMY9UXTbuG\$RehhZ-efASP-)>@D=o$R%#6hBih37/boe'Q,/aS99R>2PMJ#`Ea]P`\"0Ibm%*R/fH9&nY+=IDk1dTT'P?PG:Q<%ljSU]c.=T17`UKY0pXmkZcG_n^6ZY]#,5ojW#+l82GP8J1r%+7pPKq:%;dmYIZU(4IH__?$=+L:53</W#g*o&PufnN/>I-:l;?&U%^$rZqB8m;D'HS8;6B^Yd?W&1jEjSY+k]pUi'=JB^amb*;]$SDc^>EuIq/A/3AqXB9l?p*5hENoI5+I*:oW7ZCVM\30S.@P&6?Pcn%E'u'L/V0\fiI'Mg)AjPUBg/%G)N#R8br-ZhkImYCfSoF\,.o40#5N5T]SI_Z1X:dIfo$"Rl_#V:dK;O+^0!CcJKi-&H<r<GCg0Ac%M&_D9Qq[4WVbaKd,nr'HEb%7?Ohm/UGd/:8k'7q_\33=8R5W*W[PGL6p5abHXjO:=*FdlMB3Y's`R*cr%o_,t'6.8DaD_+Kch*Yt%7atR*2SDE&)S6<AS,b\f.#*)0G8$d9HE;+ZpC,"0Xtu9N!L%]D`%]p5Q*`?$(lGGG&5N&()qn'VH+O%1Zi\.HYqbu'Ak'HC9l+S.%D2gNl[)[rUAKsq6YRS"%Ons,7)6&\S1X&CD`b(R"qY34+N)Y(/T1)4aFoEX"hFb/6<+ono]d`$#7=)#U88N[_:ZH&_7XklS\0^j0%lQZHDo$Z$-K8f;Z3buj]O;P,H7nc<-^QtDt(T>AdRL4iDfZ8jipE1hSKaX?9fquV\jgU2=$9-hUEmdoHcT?rS]Dn$n3+&l+bZ!JP%r*p?5B<ZhS;$EQc-\is2\H=+sHR$2T*kRop$e6riN4G"eh`VgmJW,T!?UR)3%J/"h^LVT%_Zb6BH81nIFG(;?\q!q46U!Q9QO(^X%*g@jhK]!mD=WVAiciq*?cBk)iksmAI1uBA2bgLq8k%Z9qh`]i^5&EK%r[<3;Ys`RjGPJMO:d;TBD5XRdCpnhk%JWsa#KZ"9q=_'u%;jOoT9@P:6mU!`%I,gFWG.K9f@U[+`3D!c'D@8CIkG%jrPleD%<d_Cb8p7fUbW<Y2q;dVG4*%HH5c;U'?E3rS.+rH*L0[:YmM)kT%%dXl_eUA%O`CdZslo`C-kIMjZl:q@)=&&9]]ub/:6"Vo$_bNjYAD#.nX4b9`V=N$RGsJ9P+(%>r/c?/OG'a]lG$?eT40;a=gcM&:%h8bjACRe@V3kYqFn*/4o@&K[<p@bZ4mTEhk0.^Mgm+^k2/"=(?E,&8@^eoCI6;#!oed<!m9Wtl$Hd:%GA%pF)L8_FO>4u)qMd\@7%,=?@^(+bPI:V"f-8eD,pU8@R"HJYYVc)"e+Y7_q7\I(g+3$OqN4O/TJ?>"GFSDQJM^@,$hl6a%r]l6=l4e"DMZ5lS/,Mj[5Np@(d%6uGCthi'1M$QNNh]l+KmF[r/_nudPb7#qmOl$A]MjS-\`Q^@EEpZ;:+]10D_DNq&Cr+rr9r@m8Ce+rA5*&$*KZK_:-l29EL1JKcu%T23g(?DbrDo?3u",4ff5A*h!%qh_ZD4Cn!E<mN1`cEF40D[74BS'GqN+)OFf-_&EMS46U2B9Z-RQV6L%)4<cKSY)OnrEd!:ACLAM%g7@'cXKq(WhK(QlCc]=93d9rS/@+O<(2Yi(1X2fg6co4;j6<o7r8oYu(s>%$OA4msJ%j<,;e=De2`:/$i<cgSJo/\6B%)`.Z&,gO%L7?&(WQdJnDGl@OQVHYP_hu]$S'J2<P$:)uCc]<8@Pc?-o/eNAMLhB\S'E[RcF\Fo5+BhNIE[*p15fs0^K`hgqD*IWSKBRk[q3f0%Rk@#Sf*ntLr,V$gmc0dc"1XmQFiaj7F2-B)#SSFlK%QTKmQPi96q_obX=^An1$e`%r(ma./ge050%@Ig7]2A-gU`c:;otLVILs?"%LrKLm^6>3$R.]g,e1aLW<'d>7ji6:-5Eoi'a$GB+qP\N,$`"'W0HkP<8!RC^-C9'LjE(%mFm*-EI);sP4EJ@h(4=Nc(ccC2fA*po%EtuqF+9.eA?k%/oiI!WM20U43>gX2K,/"XP4?hH4k\eND*=dU/djDOl\E5E$8+CQrl[AmuMBNel7EJOZL0\l@Eo4ln!tOr1WS?%h%"hudQoq&50dEM/4[b!,U-,5HM;1bLD-)]&Mko<-L`;onuZ(q;TF<dq=(sS[CG!,d5''Vm*rl--n(^:4b7*S=k_AG'8,!--RrHUC`%aphQC7h4\qSUUeqFT1``$9IXlFLCH<(Fj[)TrquD%<XPOBW.tfd82%hS'SjD$K$Z`a4/U/+f(C=f7CsTj0^\rP3:OFO`mUe5gkN[%G6_[dO,iQNNK$]7%Cq&GRomj@;(P75D.teRQ&biE5]!OS+3VM/[e[0_,uS9`Y]^25nkX\Q6co]/]nR@9BW\,D&_'Y>]qfA\:-:4b%qKa^A4liKQRGD8,CZWbq2K.<#M%&FcId])@773h++4jSk2(+:!D^h:A[$n?X?9W#;4]XqR.%YN[hKomU]SOTQ+Q8.cA"N1amBn^6%aKYS*1,C5N(f#4kSWdFFJ&gA5@Q8JIh;n<2O)r3ELc%rq\=5qL@jsR9S+9%):ZS#9As/JpFN<4iU[ii@pJ>0oP`$m/^>WtJIBT&I%+4fWpm\7GG*.q4&P1X?$CBX*4UF4VnkFY9*_T&;telLs@HsHpg2PI:t`u-/R5(<B?[u^EX/)&:YhCQEc6pNgi8?Bd2=J/Uf?>O^F%_=*'k6Yh@!63a;Ar>[?&h++2$mShNjWDt#p]Udc[-/AA5r*gP1)%[sJl+--5CUmNOO_IKV).Cq$mD?L=DVT0.%`T-WnhuZ#3_C%6%F4[aBT6t"&M4RS.R/!5h_hngMH5!BIa"e';7VXhr)H.p!YaA_h(l$[90frhrM.da_"WE+@mUFrkfA52B^c+.G^9aEFTfk(SCrEb1%lA5tHR.lW\#p%+>Pco.K&fYF2IUhHt6Km6WdpMkEdN_CkUo`b,)XT0L%9&k"kHGq-7s_":q0CMo5F,n^06Xt^Ee:1PrRa$s@YrN]%q<gc;I]p@^fJe7!(3d*g`Ste'#fAX*3c*bH1u7BKhBgK2CtG6?K3pfI/:koW%j;bF?*'TTXQ7NZ9<Z+%"XW-l+"N2-\[JH#h$I<%%\UV<gE\/*[WDrl%Hf<Rj/4&`5'=5WiSc0,2k&/]^3d#(lFaIogT&@6M??E+$IN5NrjSmCO"&m[[KAWtQ&fsl.&9q^`9=T&gPD882%?-b[^LTo";0?*%*p#c7]J,BT=FQp=7;%)Zrmaio"pFUl@E>qGVC%(\f'$t?AhfX4<\'k`5WN[R"&CIis+Q)N2bdF.tpP2r`KX50j%=l5:\O]p74k7l3J-BATXUQZ"%H-dPBq^L#j]]6KTKnW6ul.b;^\!SbTUW/@KXj%A&pUPkg_*\j*P4Tb0-(4iHK%*nr0L:OiW5iKa%>4k]!%'4LH?mBoZcBl3fBG%,emq.l@dWhHc+UMQ52c!2?Pr:*YduK'?`(t4\F&!Y.;]7#oEth5af(>)ka@)(1V+(=(@B"dnIc<*D%,pZ6$LZ1*0)s^O+g%NeOoj(%s0@N.L/"4%qg5C9))<-8pmu<gY>N>Erp1KVLoX$Q0;]Ze0j7N>UVnEt\[h7cXn&Th!pKCAV=n]jq%m`j`;[$Uq42.(1\Xp#aPNm`gE+7fVp]I7W8enfL.3./qI29^t6R+36<Jibrd1UnDA1Ik4SU0M'g,1]?TbHCbJG(a=5f?0166b!1'%.\kn4i3c&VGN-#&aPo0c,$DWEqTb>HM.BE=pDc0!4*HY7.-&S6NFaLIkJ&QdecXfN&A]8$;&Y<jRN`KnXm^[:3BciA$;LbpCAqI`%(<`1+X#"7?S#g8YT;o/$"MEOC[3:Nh]_lsnMN,:+-i+sN=].qa-,m7,`eMoqLTNp6?7*bqN1'k4NTcrV5qKn(PJ's@W/6XNa,tBB%EV:d+!qacF:_'-0TfPIT@!E1%d(.e^=b%Po$/Ar!a2%u)cnm]H;2S):"mDD<O;u'0*32>F9QQu#YXb9-$SWDD\$*_k?:jZ))O8?h%)Z*FHZ#4*Apej<MD-?n=9DSLu$F@L3DtK$*Zac6\mZEiK6`7^mq8c.eGW4PTE%.EO(N/r5nqGq]4L7]VU>B6;`MIr7Y6#njX??b1%F`ncS2)sMp^KJ2g$LdYW8LE'5h@2?u]mfCCGnZYoLpluif.Yo0jHF(2dCjuMY4UN72sIrJ]_D8VH\DNFia^j2(GJ5MXaWS)L)Tem%^IXkWot>h5OWf>>C8uXZ,%P`=i*JX:aVEm^jm1*Sp\KRSD>=+QamSg0^X[7s)aJf=oa;k'It[+^p\O\\;tsSA-b.b]4Q7pM?-mKS%6qolQ9Kj)j^8^Pn$X`,=.F/FjoaAObDp1.:"lAP]^=<[KJfaeq5JO-Gk>o?sn)Km'c?o21rPDb^ZTj(hrPB(EKS]&qme$r`SFsup%S`jBErrX!ZX.SQuL5GBl)\.K6DtRU[8e\,#f_>5r/$kUUm@*ZR5MpN#DF2]Ude*;1Ka1kp1K#U8f?]_s20>nVd!MoB][ng,JF#b6%C%(^&Q*kDgjB::((OeD-`dN55]Z%d:+5c^9&,s'7NM"JSJ$35S&TMcsm<JC%Kj4+)kC*2RrPELGRnZr;W;)<R@Q*uWKqC;NUBi3[%f.[&&^FAU2)^@lulor._?`(_Zopa'OHmAC6&`2@uI';Ee=7LPmb]NUU%4,5gDY<$-6W;k-a4\Z1<kh53d`+4e!dSV+Hi:h*SB#R#%n'C'$^KKX2NkX*u>2JSPp\OD\,2S;CftDjp`E`5olSj)E4MTFmF[*0VW\enE;qS4$+`B@[lX%=+4_C/a6`\jmp\KRK3XtnL-G7q`%-p:<E7Bu&::M\'c;E=E`IcKfG-b\-XV7;7top[:S:qYC5S0MJTS\1`coa<\eq+9S1p\KRk`&]F>FSGWchs0B7O%j`"?^MEnD4"J]%lPJ*+RI4BGpIomOoaB$I*TLJ@nASg((2)]TrPB?UgJYn`b3[LGE3+bd9\5!WL_%gYV:7s"1Ip&F_6lp20a#BT4Rh3u[cl+K>3=7]%HF)ZFqrF+-nfisZ?O0!H"BZ"1??C@;,D\#uCbGOF)U,>GQ;=gOZ*hZ'NdKTbdOWPD]QZ#LX,451p#h0<d#E/9iulqp<1!@FH#%!g%@I\eqm\$2@/!M].o64!Mg>^Z/Ki6p:F`k?%s6-Q('#rJlpTsZu4+?)_r-eE]<55`?e&VFURk)$joQKnId:cifE[QL/k=R6"r*2pn%rnQafcG%TQlYi?drD(+s\4SAt]B\D2I(S7\-)AM@p!is1lV6)*T-Un[(Vbu-p(OQ+\%B=s5.C*`E\aQZSi,!_YM,"9QF=8unrKDS%WNsl7Pq$FE+5LgEHaPs1fNR\pB22fQi,a(=jjs04H8C'IJ5\3ndb^e5)tUVpHTtb#WB@6Y.O9@I8:Kf(Y@"jo(QQ\.L!<]^$:oK(%i:?=1V*D5RZ?Gn\]a/e%GGf#BcM]jg9)FU5NcabP]=>/2\343CY;^Y=k?!qdjkj,ES!pa,@\e9i-qr+MhPtk6oEX"m?1,t(%p%l)%NF0KCR)!tR9?UJi/Pef4I"!H30&J.I'=PYuf,:$`qM97G2O@p1p&!e#<i((_qcMKP5;!;2NjP"YoWPTl>^tdQ-eGE$Q`]=?C@C?R%h<A8?@H3d2V?oK%DZF=E7)l=phPKtFJ<TSiXies8IS6P2RD^56-n"a"%ck=$[>eXjRZh`[>'mHFhj0M=rEN?opM1Wq=8cIEeUA*?%,?D'-/=i9t:NcP\5"h>U>(0nJCl>*ZY,038T\U+7Q'TnNd\HjGqsk\Tm]=j/^O#P]q5,c^D#>nMV]Lko\#5ekSb;$R0&V.G&Z'/Q%Ut0J`?q#H>9YA:Vr)#q2F=l,>K<4k+IIiF_OG!k>M[(?j_.edc<3@4e=%O:WQD\Et]^h;8jl!3!K?fp=AN>*Wcqbr]?2B`YNFNEI%.^\T0VaQe-E02Ii?mi^2A:.n-`@=qQMnh5B]IDte9A=_LM@0?Ia:%(jfDRMrdr+mPr]qkM(+FH/:?PBT5#lk(,=A%P.:]LB;!^]<%p*-=Ko9.P79'g,jeC2^SFL*AN-VM[ZHVMgMf!GC07WWB7So(fsJ?,2Ek\[-!f3r!EX_[=2@/d/PWJm\AYNBXr^3`Z`?gZl[iTTIN%h[ZD1WBop8Ol3.Q1eMJ3'<T0EPg>WCrIIWF+I5hrY@fm2L/RVHZ+g_hSqmGEp/9FRqj[/Z@hUn?iq\$.>J/:F]G9P=$/9`'pN^^L%gK&d$DEf*^]2o,_I]qB&0LYB;o\Rj[5*"`YO6'\QI;qsrnoZlQ#sn6'I=UMX!QrGiobcGE9_EM96-Yo>Q3Pn21BQR:H;Md>l[gT.%.L1`9FFs](7>_KoFQjsr(MO(oo*pR&PJu3N_U$7D50`VK5MAub\st$II?G$,bmkGT.obt:kH?_j2X[iaD*@s%6P@,\Y.4f'ihf?P%Ujd3!:^-iA^%UCMTE1VU(pgd#q7oL@B)*[,3[?"$(TWUGkG'k(q%o]G!#TSgM<7H?\EE$mF1tY?1J_W=d6uWFH*^lUrE6(M"l%_<%'m!q<L!t-1/mnnKj=/j)Q0Vs%B);H7<D(83=77&JgM,61rF+PjV`\kb:`%_A/%uCTBS_0:P$]$+L%MgZAB=#]btW=p:=[jjNSO[^%Y9G"/eL`e&N7ifUmlsP2n7?Z^(u3d8J56H0f!r#]WJ-VJX8mOus+<hq>7,:'(k`EUK<VV"&E'h@5Z%j*pW[q1l!o:e#]P16p5cc?%oYeF,&"Q>59'Z'b7]gG03O;abE'f,>.ugXD/CSP#7IL`)044'BY'd>;+l55%l#`]%(:k;pJ:,YHa#CJIS87>TqpJ?hbfc:2of<^k%Es!q576XrK"/`CH)4U[W.s"b="fIsMkZ7jP@L3X&%>Y,VYtP5YTMBaUQS?2@N<m;i(gi@IYO'h4<4TNPLUkl+H!N!YIW'`;nd^lY%4h!ot%'Zj-)F^ldnSELKV@N"lW#K'uL*:o7&\Os8[EbrQqQPI*De!.0Dpg9/U8]EqT.3HIB@S-;:H]t\#FnGD(OQ9lPQu5@&P;bP%6.g\j\['98"[W1@8>$6ATj(,oS",H^cKQ(eXnGjB>725tTOpb`jf]E`YTiPg:AW<4XI=D4>*X.,A<)'/nW,-U*BPsA"WA`dBeBL7%)5k#7`nX$.@T2.0/f,qRmVV;k^nC'8]*-%Ulps\Z0[>,Xn57%=#X[Xl@KU()c<+11j+%Q#L%:U%R,JjKd'pBTGNhGQAL+0>ceUFb%\6/gjHcuIGr$d3QrLWUo<O2$_d]:i1<RbMg.*;k(.e)'n;`h-_ok;M[]fM-RNOe\]^:#3"R]6["olYC9[p"QD^[$JC=50Gr,l&5>%JoFpR9'UH""N[E]/sRB&a&I&lXZ^N!`UtQ"Y7Vl]@TBAD)&n6*/>WDE3?nSO0A!1s_qGD$i@&aYN\CQd'mVWt1N`YJgIJ1`b9]5:%?5t'Dma0o04'S"5DkJIa[`,p-*@1!WO)D?5kB084dn?6KX&,6,;"1=5r/i+oUhm3+m-uFJ?#N-J#.0Xf<nf9Tfq,Fmp51qdKPZQ)%<bV[=3f!EoUiiRr$q/r624)s$/?pO.>u!o<^hun\5VCqpAB4*b*r%9hE,`F1d`OGUY&TqSh?NqcLAZDK@:_CTXR**ZCRhf\cAi\6%$`?LT"3M[kQ?jg:3q8bHbY+;>\"$S/[L]QeI4@:[5ie<YCf>=Y@k0W*=/s1h7UH[\BMopXEr2OZSgBND)4^l[4SuMC2Pggmlu_*0%72rh/jq4(EpZnhW%`N>Kg:9BC:9s<U*PH7HUd_jh^+<SS_Y-U&G[FO\s'+o1,!61gapmJ2Js5,!,_>98ETDO?q$nXdNgb.)4RP-Q%JsLJ6JCo5VBmmV&GH9[J+AlmG/OkDYKUW7JS-X;9p5@VFPXHY1AtP.bhk[.Yjr>ShBt]:u."&84G2B\GHT-)c8[/4F49+K4OW_8.%83l$OB6/ZL+%#XGR8Iru%U^Tp$3(5/e<<W0Z,@n^O?4?"^`f$52F64J5H[B_Ku1?=YUL?5)"\Yp>Z-GWBtsUgRUM;aU1#$NM<Mje%?HYcK.Sg0E`9M&,R]m*uSMJA1a["P!bkdIMN@sJF2!P)d,-:dd1ejY;471c&T*pbZ&X57MB>U/-i%WZr[CjZ.Oof9k\oI!lTft<p%]\(/dl-!$IQ6NXWKZ3h#DAkAWB0&K(;M8M1PR*B\4?eiu'>=4arbe1>QZD2]X*tFqQ/1nn9sNQ&q2al--FD7MD\;PbIPc\1N!aG$%l_IVNN(98X;q@R,3"CUN@;K+mf2ed^f1K[-bBRj?@I,Z8j<D[6aCF(8m&u_QdlRBGYoLPh;'g[@qbe;_6[(%.$S1e^f$@Z@#Yhro%-)T-P0CS/4K7gBPqdSNF6Ur36<$!#g#qm'tMrs;(*:^VORIuZiVH@BJokG0gcoO9i6'meXm[[#REr=6o[Q6Q_>Q8-3)q+8&>'RZ"%olAZrLEa>_Cl02Ko!\ZMa1;?UQ=;.M+&1N_$hdo]mk)d0re-r$^+eN-n9k3FO,27q6fOU^rQ_=M$mc"Nb2OR<A]=&so!fGfH-_hO%KC,M)Kq7Fu-?oW3biG!YGM\IeNd#VPfOPY)N>)].Wu7b@qS$l0pQDqrW7CBr:TSe6%U54SHZbsB>2@H(H#*Ft5b*k88h.H)7kaa)%M1ppWmc,n4.36Op<H9Ae4b=RZT&*YiSN'[2PJ[Lgk,%p4AcQ1ePo1kh=7,dXlM"(o%N9tJm)?9n$?dma+L?dn_G@3]J__(&bLI%7%X$C/&:ThE3l1":j>PZhH"JWXnPgm[[H-,LHp@ALBrp6AMObF:RA/6HbfH\*CoYW?nY4B6_6'(:d*d\HJcK7#A-C`0LrL\\38J]p7%]:8.d?-_A36%1uLfZ.'4=KpT9U5*Xj>+)_>Yk'Ga?n\uB2b<50EtAWPjHad&(21'>$98+i*np_DDeVcm%$\d*?<`@2np0/Nl#fGe%o]ItOJ*uKM'W&@Z;LX,';-PV&$gf%%[(!H6R@>iFk)icC=,,LM8G5.5gp'<^M'e'A$kpl&4\>;]c+V0"e0LbK:fR#&2"$0J+h_-'%U5<Jga6?@:KOrc"eAL-H1ssP5oZY0NETWuerQ2+&7$CLmU1e"*L$dY]4_@2/i;=)0OM31W?,TrI'=Hp(YiTU4@<"m@HqPQYkl@J-%3f-:-"$(i!e$fGs5bc:/Rcc[n@ENj`(Bo"M?#&/%$qp'g+nVjQj5*%VmN4?OPjrCEB#I?am(MFT4t`g-lFqtbEs*,*>XiN=GsAP@%%iVWQG_qRJ;#n,$s'k0^>0<[p?Eu8X6P;);,`XE1^G8W-`<SbC/[d#\q5*Q+/cBD7>p4PB@dL$;*fT.Go/2Uj0C./$k)t0jg@@l+%iEh>UE1bB8!A5'\C0e?HqtuKD"HGA"Q33YSrFNk*/iKQ4-6/DXZR\md@Y"o\YL'B>?JZ[3A%PZ3o"CKE?!4R#4n[m#dTnGjLg4qF%o<pS',qDIhP.D,1I]#SOh?I"0Ug3bD1IHBq2>Y\SQr`U32a:&Rca*#6p2(uo<a!G38)Wed],/k-aCKEK8^.:X3u.#IH,X_qC7/c7%Op6!sd^<HJekb/5orfc2Q0[0^OP\\T4edeCLuM^1\;Y%&6#'%'dP2&"^p&A!l*+XFpM3=-jQ.DA\?#?fQUT`-n#sP'ne4TFnMap9%L`gKg[e(0LTd+=k`jrjuS_H5ip,:c/EL2"a&d`7W:f?3GB%Q9t/7@nVC(`tPNcdU!LI69PGQ>sq>KkBOMu)EKY$r6GjlULQ[(<qb%]@'.147o,5%BgLG'^,SJ>I(mo^KsO@2'*kK^Y9KYJ&qqO^mP?Eq`a*ENC9]\$`J=I\N7sQ-&'\ZQ^/g51\rLuDJ$sDB(1(Q+0YGt%A2&fPU!Nfp@IPiDQa@Pe=)"BW8O++hN($b&,(\A$(!E?*HgW4#blIp]0&c#:cWUY1Ur_W)n*#Cgm9C]TEII:0fH/:Z^5A^@`u\gC%k]>XVP?j+1p3s0LTG>NL%8o4*)AmT#FMA(;B+7Q5Y+NrjV2JiOX;R^E>aC$OL_V[LjZV]Nmrue7#W>C[-8BRdOR%_U>4$e9cAi<V%EB!BSI'C7Ym^i+rhbYF%4-oN]d&Z[?qr..dWZ;(+E^F$*5V-"]$oduqHVoh47B.,>-Qg`iITmjAY[eSd,[/p>%(</2HXY$cH,?Ve%faj;Q8dU_mT;?r6f@TVfUQ4TX2aerED]`n[(dpH9'WTi%-.S--QM7ld:#totZs#HF3u'e^hHm00WDtO.0hs&1_k:QPD15n:m-MkJ%SZ`-fV<lU1P>em>4luFXp(=`h$D>%gJ[UlrN()Vs/4!DTjrcOg:K[VAdO<;_njb1@q.W('&:Lc8Inm,:ch,DGW,!MOhWaP.I,7Y2%W<MTYD9?c;FqEo_rE:gn\K`]/!ss,am\BYbSt=1"aHJ3ll0p"OZN,VQ(7/FrHY<^LV?%C8)7mQ;%UObQkF62MmHIEgDscZ6l$f]%%q__3Od`b-cG_^#f2<1t;,HeTU7bXX0_H5OFd$fk[O1=>T3,<F,MAr9u@)n0sA'`Sc8)c6^_/RT.._crFUsu4U[?taBr&J4ahCC)%%[>ctO-f:mgNqZ7f_2Md#;N]uT]#Z]sfUBJAWk1p=f*GO3rKTYN!]0hTTTh'127F/pP1Y]7*c,.nGZ1[o:U_W?s1l4<I/e6fQK$4b%(pIu_1R'RVp4L#hfW.j&Om&<mr34M+Lg@5E.M#&?lc&NXYf_;Y3kX4SQjU/GdE["RF"5K#):AQ/d:#Lt4ktf*?dBsDe7+:)I;7'a%f+j`pPpGlgW'$YRq"mX@Cq*p\7-0g]oc)JFAsVkIC%ruDG1#B:IPOP$8TP5h*:0/b,QU?B:K0jo^c6_Ij.eV*]=/<<92Nj<MWGgb%'#_^2=9G.?SA$B)T4dX5M7Gp?j7KC6QR$/J\Usg%ie("RaaTDlI%oG8'[fo7nYpQ"HkGq4`5JRr]>bMV0G+<FkOo^9W8@tYZ1,Qj%<45_g[P.16L"Q+BHQ">[@HS?;/t-Q<CER]HVD2J^X.+@nEKRS+P-tm_C_sB_kMhpeMq@'-/.go0,`F(_J/Nn&nV9@F-+1Fm:4&[,%C:BUZ?R_M[^)`Q#%d'p!k8a,:JOQ1Id-N6]rUNF&/$@*\i-$`52gIKsHN/At?MS`9IkP%9()qVp[<#%3qB7qjWr*btmFWj,G>G5K%?2W'f"J]gt-]S)3mB"`)&WaMPjqs$VKXP6:U#GlIAr/6,M&pHm2jJmAf^<m#r<lO@n*Lm_?caSNo*i!QM1:`.oHNCr_:+<AnNlD\%dGCLCrmBD$=Q6I.4Cr@dm;koWYL)^qUh*3J=ac!!p[[IsMCl]\M^4W#NFBrS-2b;T--ce/]sRX+V-8^8^Hh$rCfQO%iJm<!QljaE%Lq0=a'!<L#N%Z!Wj_6b)qo+U=ej8bYdgm]>+H0aFlqK3&j'_ph<iRI0C\FiIXc[$;jh7SG"$mgdI$G$u@=&DM-lm34-+&oFb#t<`%p'Yr8Rl'HOP@fX:0GUS0nU/n/?Y(VPjSY*E8gl3RI6`\BD:IEWs.?E\REt2%<O]&S?F@/AChicjmW-[UGL*j[pI6[)M64g=K`bJl%DUmJ&DS?%Erm-%mrAs_R\,,X&Gcl!c4?1FJV>=u><f^nWY/p6;DuRT=i\$Ee9'OU#I-rXmDH9DKdbWL$*`UtQ`74%p=9;8t2Wdo8%pXWU3UOh1K\*R@GY]_mj3Op`dX\'rJFiOYSmLfoM\2V.i2cbEpgZD:3Wd,"YN.'I7HmrSeVh[?(<c9M'^[X*aDVo4gHel_hM;2W7%ZB!%90q9S?C^"F'dfHTKWW5i>XVTD)ik:CC7-AXUf@>eioYp_hNqEsuS^(Bg]k)GM4[Y<X4B/n_bM55I@C7+t9.,D[2gNkR]t]aY%bGVR&4pd+X](kqh',k<"BdY:rhEI.9g/Y"D=:1TNT)1Vh&#B[:4[I4k*%Ae;S`T[+D2An1.qXW7ApHfg+&>R0".=-GhBP#*"-R^F%9<^oJ)<[-gj7Gm'W*?`k,seWfH#c;:S=WRb6'=5&PF1eIioE3%!a^L.:cZhSb,]P0ToM`tgj\qTkI#nYKD\gJQJDNX6O8huVpf<m%S0+gfc5Wk;6?@UG,s_1lj8;fl?+gXg2>h_mRg$oJAaQmF0q2Y*]*DjnTpMLdc7*p\Q5)=Hor$;Dn\ZcIm5FPDH1;`(`:2b=`KQ6K%hbN4E8)`kkkORrbTZ(\<OO*7;[:8*@C&N8G_`[2uIM>sM8PJ-KV<gCI4P:%OYIAm&qOos.W]7aH`t#.LmBGiA955H@D`pP(<Te:V%Sg:eeZ'C+20$.E*=D?fGI']aEj]s8)@U#b&f3(4mQ!r87jOM2LcupR(^Ju).Rl30s<CN"l([0e'Rlu)Lf]%"VHVSZO4.Nq'"N).e%>s8UNfjA"GpaVfXGA#f63.nV[e?AajRFFt\8Du+G'Fr<e5cm\]75jcQ-Mpjb)l3>Db)C<lknrH.<F3]2;81H*RC570\>$_iJ()k\%4IWs!e!C=gb<'d[lo+nYZPdeQ*1<[/j0kSVela6(Q6qA'`*_j)Z6aN<_U<b:9/6.gY%6qR:)_tE;h>p^1:sr^AgebSp29#]7/;CN%cI6dPf`h=!kq>Q]`(CiYeAP*@GXCg*+('of92O<?'Jm+TDFQ)\6eN)9]]&GJqRi7mbZkffJ3q-iG/P@,]j:?o85NYIM\GR8$tW!Y%]p./;VQo;u,$eI/VQW`%aH=jDkNB=_.kLD=SS1;0;Y0!j_J)?:cg*Se'=YI6KaLJZBI$l$Bilmb$&\>`pUEt=6e<DjTQ2JK65[gk%AOm]?O>g<Gp8dqhOqj.b!,fm^b/=3D8/e]cbl6^]h[`@h=ACsJq]mB0-[m-^_L;[,mut4*9G>1UFdHf:(Vc$20PqJse@X^.GSKa/%"qP@:"Li7]U]hAnFO_3)`cW%Ma,!R)Y<=Ta!'VS=a;o"@JL?N^.uOH8[Ys$[G:ZOqe=@p_OM&QR097?DLmZDL9*ZcLUdsTfco6J%%e'k.FUf-.\fWu[R`6,GHUgo61,pJV2J-1cG%E)`0X;_!/EN\YfEJK[7M?CCXf!bs")Q(@UA>au\@\P2).?AS+b;RO4E&FmU<YIY+%9Wqk[R/e3n35YWkakrN:#YhgJn<,Qm2k?oC?*g6m>U5MV'@lJ+G8$+,b(G<[s,rMAP`:VA8-^kf02+8Z$>[L\E.k8N?TBUIi,U=X%ggWo^5IW'GQGf-LL@hd-++o6+.d,>C%Za%)9J2,e6C?9?@l[m3)+.YM^'m?(1@d,p$,tHRZ(*rD0U+gB>W`cGnMt_K%f=uB$#K*&%"5PP7orQ5,'W)5T6-4f?^p5nNYeVS4?n-@&=kANnM8UoAN#T"@6PPkBWRe>,fp6f-G.a3(R-sRk]@jjecFNP_s.+A?H/foW#DTq`%DDlFGK3gn%H'b,A)t0`f%sd?oCu0DLn+QqAGrP.1n(:t#rG"Ce4rBpDh+cOr:O<_4Z#[VDDV"9e,P*\_VRp!Gk72"ZL>R*>T&;bU%b-C2ROE5?*rViUBM8(Ob]iFFSpg<!`EkGDJQ[b.4asHr6q5\iAB.LD39AmY7o3SIE*\,,A#q3?apBR)VE1fGaf&%FKj6GOpDG6)>%s!7@M5><X\/,?]LlgR9^dc6ZrZ<1sm&*e-p'gIG<n2XS6p.LCsI\Y`!G5mT+@F=Janb#0s^)"2/T)j1"ScjG:B)m^".6Pe""rs7F%;S3#0hu4iYLoh*DgElc)M+KTHnDnN_E<oqN`20OVs$p=Fc]e.A0.C5FMO-'@b$'t"NuLPh2:_J'9NRI[A6CZ<Bu[<1JQRK&ACWdN%P5n0W7@($bDIt3>YRjFLjt0`U&llCtJ?n6P5-Lu+4V&j%+dU2P9epC+EkE*mb\UTC1_'ho);2[".9IdnJ6rs_A4t<pO&2Q`o==ud%l@>fc(2++R?:i8-C0m__Zsbt1C'JC>Fj?,Tnl]6V%'danl;Bf!e<2+,.iX#>dkhj)P1VoN@2M&5S5HMfSWU5G*P-O[K63<-DR-'K%2'l&>Uf]*AK.Oj#AP.)C6te,E=\7#K\05EX6S\t<RC.,R$7fkS,#^EleU64/lllM->L9CDO<Qs9KVqYBar2:cPuT)0p(Wo1O@?)R%819?f`ar8XAf#0=CluP<]'1\"Z\Bo3Y)8`_:@gs+cm?qjKTXfH$UdsJ+uUR;+r`GG7\1&nf.Fk`MQ(?TLaL??ABKp?n.JSRA-3*U%@WPd2YR!^r$aLop+B4e@$<-4(H)(PSYp;aQ`'ZGjX9Gp`E"*R3W^n@5"dlqTE$$`Q37P+m0JRM!@<LEk7nbfM+HU3HML]:WPp9TI%8>-$3`9(K#<$8K&!\8<\AG(VlYh"L/1E7AIH7;9RR$U+1FBN/R4Af,`(?qhk\.a`V9-\7iWHm;P;CpNLP6[f&Q7f'Zk7ujd^gmi[%JJFm"Oqi0QW,,IX=&cJk5rC64?HpX(V7;V+ME%W;U+d_%H#_Ip&qV%kdYhfY7@1;L*X]CWn.JRu'MSbQ79m>&-lU=<l<5/A%;&gA%'k+,4,*)^P:nUFL+p\2BXQ3A[i!2]WZA'jl"g5Zc`KCB:E(W+i3V>@u3j!I0G&ZB\@1h$964jc7b:B`Q5RpAK?-S!AC,!=&'"j$1%b3M(*iN51oju>>2oMWl#^O0'_6-D<@TE(`YQ=^JF%7X#LDra>fi_YXja!)aH=b=dtE,qY#:Q^@K&M!o`W[97u=JDjR.4bNq&RPZc%4b4NQE@rdP$='AH6sW6'3'p%lBYF[YO^V@\CCO)TW1!tbi?H'16kN7,^f$Ie&\oU.TSo0h!l/l-ROZUR;reMk<RH=g%8d6n<3h6*%C.)&fOk2uF@?I8DEm"1".H/M6eDi+&)s;V8@),W<'ck4<Dn(Z5.$F/(M?YOSGO%du`JjsMEY)gTK[I$TKeYA'*$T]C`<8G+5ggB7%k:.("W.JTV9.C:!X;]0-=Cc*"+;1co@3Ktq<'Xg:>Co,>WX=AHl^=eU/5g%N()/J=agbi"A5"P[Q+BnVF!,DX@9nnHK,k_qYV`qK%J?4#fF&g_rVJ0/8k$e3FWA`^+3(4fe<`']qh7P^`)[VXe*dY)Jd3N+m4S6\5MO1ikaoZWc((<L%\#![_6aoIgZ8@rs]M#>NO[lK0%YfA'3&kskk%!"otAWb$K,$,5k'KHb_,Zm&0G3("[:\/lBkO[98HoO*)jKQ_0E:"EuA?Hep7A,Wtg5\+Q7>@eB!YS6?_pk[+LZ>be%#OUHbaZ)[?BDuui]>,"cUe"E`;6XFRcsL)oVOnZ]U8<FSDrh.rd_LluXek!VR*V5,,2-WKb#rO;fG!Hu?+B5I#of4RdouqXd_q$K%S<Zf`:YEo*(9&W1&&(^t7=:MD.QXruc#_9ROPn$":_el?J=MLEfR07,,$e4af/faZD4K2e;4q$J-r??5>G&PO$BtaA'b(p.6(m-:%TTn%s:>eQIJH?3a,<0aqdU5S=ad0G5Bs81(%@;X,72d]W!h8`nLR39LLZ<[GNa-NC*9i%%9<LFl"rdmuYNi9:VQF*WecBF9*4g)s%71Q&nShM)6\hI_8"c%n?>&eQ)URY291hE(KMbmsM>V&c<l;/s,RV<'V(e`5m=Hlm/dD45H^,ImtEYU$R\Ycne.TtPY$&sT.20!+S%@,M_"$^sC>6'S%S]OhdRdOa+\Bk?n!Tnp>kofuI@6Yichf0On"Wi-Eu)KZ58Q&)OHrD>lDaJkgM%+1(MMsTQMWQ:ok2_Tt-6UF1C%LX)a/X2k:?FtM!AV!EotC>OKk1S8k7i=p92=[caaG4X^tD'['!o[&NnMIbAlk=*.W;Z`uG1i6;+)FOf!W<:.56nm8oadO@i_G5pn%Ak7"kmssp@&^1;/bF?AodO>dD'O4QF;](*b,(_7/+L9:30O>rTJ^$M>=:Q0$&]"mH'%-g@,pF05)Ajh'(bZK;/24!K^#ae7&ciF7%arp,TI0M>:_),82$sXW0(bZK;J0A?&/e#QF&]%-YpYR/30+l$N%lHonB#,o.^bcog=QC]5+9JMtfk*3/X?Zp:5b9Mokg1aj_$la#%V%+=q&]$"9[uCG'.hI5QaeWO;j!j.;,+-E!/iqM$8V]k\Siq17=GBR5,'K*;7l/9\S>`q^d<-7q#)WKg_MW#RTPmP1M/-MsRL8!t%<[>+DHm]mL&Bb/o,:oc2$VVWOf/\P2@mCpJ@`quo,#DFRUq;Ll"td&?`/6Tu.C/)MO`#cU%7?BNVWB:jZC7fZ@RV+iX?<ZJ@19#!%Q4o:31G"Qd]8-kdXN9VAS%g0H'*Yb782jQPE3NPT?5=QI1U/fC7GkBop'DLcD!@st-uZ]DB5RmNFlnRd+,H:<=RQZmgW%TN&Jc3F%YCPIG@7e)tJ_7,2h8O(T51^L2dob!oruBVK+;<'AJ,odB0N$EVlsc^JlR@oH;!LA)1aKo#'_qukA?^dkp0f6WpTSB6pTVX@nl#[E%).H-o7J9QrC5`cLn"?lAK"W[%$`O+]DLc:C?n)kYYg9V5,[DdM#"+YBTbS*N,E`QG7722r$dD8n<<?pTP$IP_BS!;NU*%?RF.pR1%*"'!/A<<f<2D:5FiZQ[m7at^3L*P9Ul/8pd1FOdhQDM).T,"&(+`GNsEm!;[VTYI=1q;%9*\:sN&L*5*\??"*mk042+tm!(d%b)b%,2&WFpr`iHnKNa)XJ3LTXEe7L$jhJU$rsRR*fsKdd6_5(,(p`CIZ\1]p9Oa";dAoF'J]<6,"%M&Oo:pY'ST0g/[TmV9r+5SAH>>A%'rf^C.TQ\sQku'TjtNfEO[)ILU;28[H%@"F$%Zh"<O'UdOBBo-`"3#S<`[&]S\TcWaJC%?S3V&:?H)\A<=,a0<>$a47H=HnTpmOR%oN96bZ5n`6foV#E!AAJZ$rta&A/=E]7<p[B1)OC"HN@7i=qak,Z'Tf$@Y@bBI,5)OPO9lj;6.X1+cC.`(>3N$b$aS9Z7`@!(87@'%,Rs,;<#:n;k(W45h*nQAcatZqoLMTM]E_B?LiXH;kcb)+?DOHXKLefV<M@JTO&1nb6"D`N!JE!=-6"jc$?\,Ap-[;*Nt?4GD%*9X%h:=:OP&;+[OY#UNjtaagMUUSc'9=)dEUtAVgU+Uq:W:(ZYKg?R9q[/5S`2O;.bO$d731_QVP<'=5J1O,VP&1]l`OFN@ZO9.;j0Y`%Mb\IpZZJtTXN6:"U'g6qMWQ)uaXBI#4L,T4)Hepf/b6o8l!PnFF2eb+Ms+imHM3FhV9@-l<6MX:a^IW4PW<]k4OA-Q=A*4Fm'*m[%1rVm,(!*&Zeh8R0ntrIZ8tE#7[':ek(1+L(ic(7>+p]KLQ$;u$;b+#n">nP+eQ("i*b#]h]?#s8/q$bAiP8&5B-P.OjCj;`dB+pR%8KbI%lGKr%$oE"u3\$NeYW6msSrWYI2-`R*ln!9P<'IrHLXFJuf6!A!i'e-VZ&4.QJ0G.;\,sk3!O3f[1^9O&];C5l;5gCT1J:SE%TgZ@`pD/=Y@ba]=@6,7l(Fdd@p0<D-.&U;%819@ipd4M"D%8L$K2G:+8\5"lge_8@<sN;MU>>'Q#eI$X=`tOJ:m?0DRr1`5LpOmi%3&@ME*<79W%%\@KDW=o\UZG/a6XEkEKd*BB=@J>lp39!"g#E[&CeVg*p38u"Tc0So/5$d>T")i*ioG&@lnf!cCZl!Mo8+N+%>@[&%C(eK$h:Z><E+FJ6\\nnmDC@<[<<bB#L*A6*:dW^>ZcE[oYpQV.:h#%+MK?^o3;)ZR!oL;lKdF`.5ZhG3QJr7h_?j3E[el5*M-^j%%('*P4@F1!B#PbMW/-/Qq'-MS5M?#)i$'>'e?[rj5"A!u>.6n5O+s]7%&L!]#ECA#,.uq\";b9fZb?HIu3b8@8o?N5D:72+'r3IT?%;^MK"&$6-$PW=9L7k55..2)]LQW=62aojulV\K6'1'*J^C.1Cc9E8V;=qT+1'*+H0<WmNe*'iqq'cG(A'*+H@<WmNe"@2+U'`jj\%!K_SD76mbE!+^O_&^VtJ!1E.RA6`FdJD&4P&W@M4@*EsJ_Du0/+S4KJJ52L4BY/4P3*tZrE?D?^HCQ_kE(D(]FHckE(b>!SaIL]g%#uCI5>n"?jbNL9Nn9e9RZa;A:0k'/j-aj@B9?Y3[Jf?uh"%2XJ:a.`L`^:fbLqlPkJC'[O73;]E[O><U+Mi*?qh#M:"_ufq+kG_e%:kHu/NLWYH>'P!;kqXj,L&h<R<_1,Oh]*qaL)<hF.6oInO5@$LTjVQ"cn(E[RUun4ZP!L+<m)?^CKVLOh75d+%rKArg!29R2/HJ)%8s&\V4k1<;`Ib*XYF._0c1.%FEg=Gc*ADX$W-C?1#\uEu.P1ZgR%Td9i=S[iO00+KGqEZ*G.TMPKa:u%.O4+.>%3)s,aRXN&l,CE%`oo7\'+ocs0Q5_M$lN(NO>=aTSH5sd2*C@DOlHU'qVmn,#[*oi1n_i;',sT@d1q8gYTcq`/.;Y;A3k1];l#e4Pb9['-E$C8"PCUG%"_Tc(%L1#Y#@1"M)%RA]et406Lm=hS@YqrsJpAqN&3t%K]n^l=A5!4U`k5%Q@rS=]'*>(?-7DXP]S%NNC[j]pQA'nD]aIg2:l!@2%&Jg:,B_LLjQ8#Y2M;^(E0_Z>PQftjtO^Lj2d2<#uNcGJCVA&7ICl(nN`i$nfn='V4YhqK'4QeSD(A5RL7ENi5rG!nELSO!r0_BW:%2F<tR4';48!RcXYRBln7@*Oc]?\+JfRE3Q,/2fQ>gGU]pM5:bnSFNb`?oYnEQH8:_AGHQ64#9^Yc<-a/FA];'PP+0ZYCINEOt@T(%/C]l'S#^<79?XVtiR<\"0`ksGXb7n<HU:0@TL.t'MZk)FOb5*daG7Z;(WO[<E(K2dPeAQ.fFSq<:+aq,D_ep1#.P=D1,,_3'oTS$%$ruIZ@%H@1GJ]W(rW8.3^rp!<Tu$^c&,[fZ#OGo19,1/&=U-0,:ZR3GiG#SE/&V;TJ(sk;Sm?4Xb?pA2n:$2sZTCb5mC(i/p-[K'%=Wq@`,@IlLBJk[g*JhX.:^G86n&OUUm5ied%4!4j@3q"%EpHd#j*"MY<MrTWQ`_:K\7'<eEp[3KCV]/D%(g&__,Pck%a!TaMg^Om%>Wq>/+sYk2`^Tb6qM"f(qq\_9p_[8C#3sh-VqH:g7p\QE.=BFjI`le(8Ct'uKO&Nj@^AM;.jji[e(g!_](/5,GF;KNmWV8F>hSOU%9,e)YS3i<2QZHL\%lot<Ls"L5k(3icg'$PqVkWj3EoC9q+KGCAZKbj0'1EJMVFsm80^L(nL>B(2Up07rdI?8JqaGeW#RQ-c%l`Z4%maq@2eoekOP#P2!B(sW/*W,>2KQgPXKu7IN\Vk0_JTTrCq%38P[U$FW)kUKI:"8XGmF]J;U-2DhE'KE@hOf*)_Pcoa>@QC]VSUn8%B=AW&6sq:+;_8-;:^6j5dC;\k%oFXOYq6>\FY.[0VbaFhAYjjHI1gSdA_[4]9/6]SbAn/-42ZsIdFQ@Xg$0YaGAV*#X<Y?qrtUA0%ECLl6-r#\GbLD@>!PIjG@`/gP1>]<=+<^'WJ8#nkh8e>TI:^?$G8i:,PEL$5hEU<AMrBXt\HL:sdP.\?iRg36;8n@31QN8,=GDlR%gQ.9$Q2--W(?Ou-@V#s#g*?7up[bK@lVl+qkVPJ998o7X3%SM9g;,Ik=sHFgSp`K?a:FkT%jJqE'/nbA!145hU\:p&_&gm4[h3sP%hWO1h\n,Dj:l$<iiA[QBDDf6OQEJu[\7&#Rd+CQ50AhPo7JS"jFYJU+%("dPJ8m:?-?JN@gMaqtqgJ9oqlT_NpUf<MfFf:h^<W?_%hd)h!NBno]3ELTP"dIaX@"lP#hn!Y5;*Ie3h(hl>a'E5T^s0%=miXsa</Brsf"7/!lQAT.:34sl0ap8jCV1mT\I.V%F,eXqgL?u]%=:u_;^<E3\hqXiKO5O2Drc=s.0f^cO)Q1raJ'"?W=9Rc.U#>$a@]Mu4LZlre36"EV?;_!P4E3aDU>\3P^O@+$p`gD.>P0R3'UBCu%F<$9%lnFX.cJ#I*E1X-8LSI43;ahGqXEn12^OPSD*lB,2l*ij.4gI8;&Pt)JJjPj2KZc!thfQPU[40M\h]a0(^<W?^h-D(H%Dc]H%eP**32nio/>kj4^:Fof3ql72bLnDepg59-KbIV*4]YF#K2&5H-*CSi^k8D`dP8Q`i-)G!)9,:3u=/,tVa^Dg)r7Pp/=Ig(5.i/Yu%U#kk!AsTUP9Q*t/n*b`(X;Ha(cUGWGpi5]e&h;tB)GN^*;^qPuCi$Sp1(gW).i5A?0=P:X,%K7L+6gMdT4d'<+*nH,:ZJM/H=]#U%]4DIqZUE8[C]PN60C7l(8;:X$C):e#+qi@8Q0bFW3DOQ18Zo]&-17LbeljC:ddtqWY9d#"YXNtb*I!jn@$_6BU;MclCtF+#P)gLK%\):"*OgJ[d"sUjK9;L-&*e65:)`o;jCq4,L8H,G.5pM;NS1h,'hGSJpLP/prD6iIdh5iWBFOVEoN1oX*TuBJO74]J/WSI=KpAfSO%bK*X>9i3R6#-55*B!#Rq+s6'\clZoV>on9N@8Gj'VOhB0Gs=lT=D#99e'*`p@^BYX*q=028,R!<UV,0lcA4]BY!PFb:,Q+/Quh(Q%L,#o.6'10&?K&3]JXSogJqn]MiA'uUjYKi_I_'s`r.lLVHdPW?VL%#T)ZC'.A.:NLQ3G_jLGeE1gILDtjq>B[]o4P@(NgNhqCZu=%D>[%.XM6%Hpu>u!ITC8*_`N1+%/W_bp_9A_?0/`KqStQt.Nh4B6ednSU1Ks;iA+lQrA&L5_\VWjY3Y._f%oGMf,/lJ?d7+Oq_-08%<jhrR=qeW9`tO86]o#(Mq"8f@KgnKFTi&LNMhWU"9jm0*'G*2P9sJT"Wo,^=C/I>REN<q?j3#eR=AD`1Gij3PeC#(iWd(VB(,^SA%b\&;[?';>;P?`64>:2-R0U(Xg>6FAWm?]8roucC5AJfIbAN_f'/_U<_fBn>r2jXbU6guOP2,g^F$&RP$#CBXK$+"+NXC,H/+uuGN%Ou92HjUAa:i8117)i,h;YSTG7Xd)a9>g):I=&2P0<^-D/lDb3na^+@SfpK'gL1RiGN7tHhKOO6/%dU9Rp>bq%qk;&"eZP\UDaj>=%I]sC',;sSY7T_c^aaS/*:`E_:^1pK6,#rE6m8fsi6pWD-DGo#J-WRVoPJ*tQZbN4im%D[CHmqce:d[BEGfV=2V=BD%%5k-9&d:.3%jl0&gOfI@L[TZXIM1Sp=mmYd(.&`+_VoKZZU7g*)o22p`l+IP/+"2/EiHAE@(%_3hXt(ts=]E$bOVJQ`:N!`&0UjR]4VIuVp^P$D%<H#ugH8I^Z[M5&Z.\;;@Jt@gng@1JUM@["';6a<).4A6CQ+8*-HpgW[ZClH:_aBGO>dC:ffs3n`1MBc#VKBc.[q%4Q35Wi1pus)_%MW!&R6enu?Ls4:q7)^I1MDLM4'R+jr'i.JQ"NAi23.LZUk],kPkR@/=N$XDVD:Uj(-r*oA,_?YI3(6\]'<";pM*kLP=k-;ES?eLi%X!:G*U.m7C<!<0pN^(3f;/s+!,sLl6"Z9gn!8":.P"!@K,hrp:=L+l]NU:U\EQY""U8%Xsj-0_dHPi$5*P(0m77D%&O.TaaR'eq]%]pC=/MO/<^K&X1_/#kSacI>clS?f)L7Nq/m3+YtW[W[3fEQWlBR]HNi9^c@%A;%]TRdHD0`F2UAHJEM_Jmq3MO2o-h=\O`!"t6K1%78XM*\+QFRAPmG8Qmlq#>8@sU+%stm2MCF3brW'5]d\ks9S#DBV^s5?g8[#6cB:UbQrAj*]jt"1*mR4PUphm'!bZA2LL.9bGT3J%%.,Kko+Gpmk)"E>Z'\+sQ]g9n2;6<riTV+5T;%X\t`uH^7<4o?%4Xa'.:deTu@106JA5TU7n!ft0AJ)\k?GDaOMi&qB4^1mUZDcEX%X&)XZdUd\ShM.X+`S1F/X`u5:*NJ+^7E(\C%#XLGF5EkXLn=7)77C276o@S'*'aF_jBYX;Z3[%nYMREf7E&^F4bMaY7E*I84G)RW%7E&kX9i,X934\$c?'U'%PQf$r(9POjQRjV\]jHYC-AlPtAUQkh6kP1VpG[g!B$5d83F9IcEkLG7'GT9?nP)k[bLYGokY52Z/;?Xt%`Nh0)<<S".IX>97'q'>n-r*oA]T?9Vmduf6`F?7Q6#k&AieYm?4%I7=K-InFOVH8@NCO5S(*hmXdF[TmBKLb./;@JY@'k#K,,1,8%\FOV=-A[Q7+Y$50\dkSYcr%qf/mD9c$eXRXH<@S;gqG,96]aUD8B8Jo!1gk[4f/+I9*Dr5@2qPr<,_a#n2F;5F)8oq6ddbh4FVcF%-A93?<*#2;KCSju-><!O6t:MB=*QJ4XXWN/JdqEEDX4O05DuCa.Eq5LDbHq?n*B6DXku\t(G3>%3T@)j;H0ikKBP-a[pD$fn]3`G%Ia>H`@>jhMrPJLqIeu8=#3G4Q%j.:>lJ)8:6ZO$aEBcM2/IU6;FA@k:^'rPH%/0VUW9ds\@_<5U^JnoAc^h1j$UnQ.^A2grEVnWL%k(B\?L[#qk4Jdkb>f_V7`r'OU[%Cr;k9Jf,hiIB8rJ[C5bsmV4,/B6p<e/L2])IiOi?I3$=cMZ8cU"%U4b(`1\&eKXd[n5@?EEt?%#`brBR6MeCR_Cq(Im=anBoqZS<:,H\O[%']4s0![^ATn^-*JU+d2O7m[sJF7BS)qX26!QkAD,,WC%5NQcI[_f?!k2(ni<AF]4kjR%SY?/CqY'*1YD]Zj?3R(H>'lY1/_P43QgHg,S+!&q&Z?!&ZL\e`m#,*+\%fro1'I)$gl$(."*N"?*5?GUo=hh4bT=[&\U$-lBisD8%kao:Qr.*o:Xa9SodfTOH?K^<=\Ysm`hY4bL>'3\klcW%;OBH\QI-:0TZX1Y$@fmH`c)`#2q-$b7D3qe80,G+Oh@rBR/@Wo9hWb%<%8W%1Db72%9>W@I%HlB\HXfQW-0d*sQ-@(XsI5U&q>J<sHI#5_!Mr'u9I+p@W1;A>tHOI%R9FHk`f*r%5`5nI0OFKs\X`Np)T=rhI%6(hSn"b$B.)]!Bi=ZN^7*R]LSQ^KeIi.'61Lb3Xs/>E3[Q=-I\'GbuA><g8RW%Etp?CUd,U"k)Y#eUZG"3M4W"^0TM_Y8nq(D`%u%Y?43Y>F,`LMBKB8%jYZ;caZKV0D+G\\(@&;-gJ,tbD\%#p<`Mc\aFe?Ao.fqMV?j2>uJY(Yfj1<1%fm[Pn3CV.uTn^PNJT&Bn#$4%1r'!<-6L,@[>0Y_:ZHYc\Hq(>!YH[PmMdd@HHrP"*YkS;9J9f!a-EdqN(hq:eN9pq,V6+m\!FSjRXsU-j_u]dc%'E0ElMQ^]#m>;%3&Q^-@cLeV7'ouT\T"ZkIf$Oqq&&fT2[@LAIsk8@5T+g%?97Ie"KA9T>$cooe[,[+lUd)n<X^j7Y3GUcY,V)#Y3?*HY,MR]>>qO9%[UuI9E)#N!];G/N?.6?uY,PZ5f5unJCF[<Pho$k^D+,bk\Xml!>Z&%"mk!#HRdY^_4&(/)l>C+(eMOi&m6%rF8Y1=qH(o]PBqjDU%G,F'f,ZF,W1KEjH4&t]04'1iROt1aiPq7,::R5oNc^&K,c'Guu:7&SaUs&^@g%k3@VtkAbgBhrQPD$L4m>SUA8]KQYG08V5,\?E$%PNU0!@`Xsqk"_A'VBjDTF(``d;mPP[\^KW7k\5+io=VUaC>N4HSF#/(daZ4GBWfRi.!k#\oQKM)'I@lSRQG^GRZ]`Kc(-s59hCqg%VJ"4\;mYY]\^T`9.Htp$h"c$=Pl/(nb<(:CR[QJXc(.-::!''?VPhdH;cDnS\T?u/.62LtgduV8PU*hRmejV/9)`'PG62&,-%YKQ%4+lsYP!KntSO+,]8YM()cCp/njNqI&gduV>e0MV=mOYq_8et\h<uP?Y4cSlUSk!unc(g3Z:8EfF,go,&B@94I1?kOD;sC#*WH?ba%>e4]c/mU;X10l^_R4d@8q<AECCq=<JFLl-X3aFRd5$]ukT.ZQoTe;ds:`%BI;&;sKW4Sq)e6Q!OlCth1lCo^fFj\u9FjZGL\ncUm%h).'j0&G;SX1P+%eO=E>eO<@+lCtg&l_5hbFjXH^F]%eT]'/P2\gU0c>r6bC>r3k:m[B_PG>1f7Mrr<fMl(%:7<>BY78qY#iq`$?%\nc&0>r6bW>r3kDm[?5TmY[09(VQ)C(HkR!Mr)aaMk]:b7<9j078oB9U:IVsU+'5gfCUo3CMK;D1j>Ns1aUI#;8i/(rFhp21j>g&%1aUU'RQK%PRZ_D%c(/Vd:!'fTVC1,(;j6UC\[1[t.G8mlh!'"0P]XNNc@!7fm<lN97@nJUH6M6"&_[!FrIg-AB^V+sBM-EQ1j@5N%1aV<;RQKadRZ_b/c(/tn:!'uYVPi6U;q(0/\ao0_k]qC">D[ROCTij*ah56[B&6hB;t$lgWHZ`p\T^pCgq2e;jLZg4nm+(rp0BL$%q_"=!r@XP%IM^8"Ihti$^DjH,ofWcQqO3-Tc(0V+:!(;2k"`jQVBk0A(d('Tc-LnQ-$5&Q#JSrIHR1L.+]mKC]A]!%0ER@\h97K0%66%%j_cRDt.`5O6$i^bq_o`P!TaG<5l!mX9<]7UL&b7YomtLZ6Q$??d(]j+RQ4o:&JbCH#U)?1&_`;K+pn<GK;&HNDn>pT)(JZ0T%Q@h//bNoi0T1:b9ZDU!tF$%/Ig]`pj[<iWYPS#T^e2sD<`bFV1NV2JWBN9e1Ya:2CUbEQe^]]'lGbUoX]c_HIgZ_f6m#R0e"uan]%;LQ?SW#FoDA6tlkg0%XccaBdgQ[p1=Am-Peh_.&!g^Y*8keZ%OQ]Y!!:IuLP5e$0l33Fj.qP%o+^U2\RZ>XI[:6DTpO%*Kai;f8]%;7$1@Dr88cJ=5FR6>sua`;p5&Z/IC/h@ATc+Ua?4]KlVXXm3mNnS#@CL!lf<Fh)/*1-T)?G0oBbPP,/cOO48S]T[)IG7-AO`&2^m%^0K^ko^QHW0Q-27>fMQ8'H"'3A3G=`F]oaP"OjT"Y+Vsp9@-%e1ZFFkbjNP;06h46A?ZEJ<'cRnIe<!Z=Up'?Y09ULC_]3)??eSZ%Yub(I1,Xk%.-8)PPDrp4Oe>0%DnZ7:IDMq7E:cijX:1G7+sDbB)%R.N)ic`f`8eJq#?T$!7c`c@c=UL]R3",4B4A?Sl^E-0#0r(G%:':e28hY:7!a`_g["g1WiL+>FYK@4>P.Pj?"U_P1#L(_Y?3K,)=BhAKU`?tc-6-]7=!CRspOc.C2<,Tjc'V72H*=EdTP6V#2b`E&%K0=C/amp<5r+S<7d!:n3i26$(F%7Yb6uZC96Ggo<VTP:]#.G3na6[KVUGX^sl8b>6dFlX*WT(%N0XH&QB<ucdl,<A@V>t5%WHCP"%m^nhp4jO+4kI"m+pG!GuKQFp\`JRSi\UpK*f57BD2YIY2cG1Fk2AV6`Vk]uZM@I3FYm9I(2KWU;0Kp;g'0auu?U3)HK+E<PSB]G2%TousNS`>psU78<u9]\Z:RfOO@:!/=!#AHBRGf'>]/[//b(U^iA9de5ZVlAT![*80p(6G12A*-pRZgDqEF!q[4Oe5lmd1JL7^MU!_%gEt;3UOfU+h"Ad469-)#/ID4`ld^gF55YJF*Cc2WgKu#7QiKZ]]'d4-YFE>H3^/oqJ4$PS($PI-3#B$jaW!Ut]f!;Q4;65U?Cdu7%E!p16k7&Nh-o%Z(4j%3hUmcF4KNg6a*5b4b:16XRFKTguEQpG3OYrmBWU4pC2$crY4%sRaN(Qnkbl]T0AK)<Kokhe1,FHsmA@_%4%&ca8tQo?hL5=l>MO0e^gfb2dqgU%(C0OKp4R;kL]GXqN7mFoI<EWomJUh$B`N9q!#8/c4)>,R-4<+1Cj1\3nonM"@D,9p[YmiK`N%!1f,3#!@'@oK5"*a7SmFbEuOD)tU2*VbsXPCs9b)aMnF4'!JNE,<YiBc1+)`(otG0A_/pCN2,!IU.dlX%0VI7m%pu/&R%5'@D0u5%,?o!NTZal+adKtAY[6!Ca%'ahH%pB'Il,ob!'i>0G\Jq7qWOQ%UH>P9/.]o)jTWk^=TK$NM)M"ZoUB&C6Q:FO?mD3'b#=VYAI/*G%4*dca/LFWDV5r-)Ac/u-(c[u?X]eeqfbVVg.(\cWbZHG+8&XXZX`m,jk/YP1MVq#\#@>tY7`Ul3-I6IA-Hi`H"k)gMr^=W4NTBT>%2K)!L%G2]Mb57t_^1(W3a-pi-68^jT'.MtrnhP#BEAH:+1LB8?;';q$c4'0/J()RF8@&=k-/shH,K"i0"V'4#gG*#E0<R]&AhsE.%$!-R;CGH.1N^rDF7ijE*,*;0(YOQ9`)4keZ(5h:[2B>jT1gtd3G&A6lMSZM=ho\MDdCRP`M*GH?NYnZHUB([MIP,Q[n8`m<d:0SU%Y*\MQ/@7s9+$A[um&>\Qa)'"#OMp=+$##u:2X^g`&oNIo;:>Yu<?8:l^neD9Zb$iRi8B=78mU'lo?]EoqckYmcG9fd0Va*NTi^:O%(qp8.h4uEGK*fT%A2I(t>Z:-[F17q':YQrJO&`B):#TiIjbb-.5-EY1DQJXV%#$EaU5K:<D8Vft"i<6&=P"(""B\mJrf<Zg0$-4G%M[(GGPti`N`eqi[mc<lI3Urc[F=_;]2DHu(Y\mX&AaFR;=L#O4;GHP_jTnNNr8O+hkQV.93elk0Xc3K"FmJCVGW>,>&d.&X+HXFC%B"*_:DB*3INFj0!3$s")4Qck>!1^F?]nB$32LD#,,2kaA-'M&qf=D5*HaY*o5H_o,`GRl:&[K#)mEBaD(L@uL60fY'%68E%8&k#\%1hG;Cm*$XLRn+'p!?luGe8LOnCMe]`o17*s5\:dnO`Rs42AQG&d`-Q"j/LcI%A*j\.?7E'%u7/D9`',%=&H!bm+AKp@saqml9/CY%Q]pd9Su7MJ!G$8TjZ*p/+`P<F\-JW7Sj!\^(p_m]ai%[_DTLaqEY3iG:1]+IE-Jp;X;d_T/?j`V2J%'),F76,TE?tCRY%W+Cu`DV%.QGf@CutnjN4n(C0%5$4ZE*PA].LT@)aU7@\;QjC`-G";2/>>`g%\)oM$>aB!h]4)aZ>.*j-h1;&F^U@s!D78!j]Ad5fP]em*oGu%04\\c-*7rJk#UYJARXsHOES:kD0k$P;;;=*%(s#bmIQa:XB'Rc?1T5Z)O<$T)r#Y/1,`GXgVN1R#2-)@5^-c,,&mDIPFYTH4%7J+%9WA.;RZ2Y:A#]U9R^kXLAgb%(e[O0;J]/)5)CIh1eZ2C^c]Ng\VQsaMf=r^YJ7>emkCRrB`EeS%#sjR'n!]uG*X5WpC6(I#iGSF2%nNg.Ns,corL+"0Xom=iKBnL6!DB\%CIls@FHrJ+r!((:E-Gud:<K@AH/^`2S%15bjLdO)[7YAQi]T9"-(n$Yecn@/BX](%!C0InN%q0C'D[L=&"Xl?$Qjs?)-+7ibdRfEM#A=>g(IZGg#V42+5?-2`c?iht`&_1+mi#?gON!nB<Y>[p2$*l'u)6kR1C:/a&MZSq+Jo%P5%LfQ5NOS.Ir*YEXJr#cr`F"s(?DF*p<]G+o35>>afQ%JO<+Z(BUJce+Im'N#b9bc>j:nr=!TG$mW&,b-UG9O<c(:j.LTHQ:u*&?;P%>==4)9NRf+f'HCKf^3*nV4$.O(_o-=A7/Pfgg$t$3Fid7K8_6/aJQF.]NTqB&CVZM[MO0**UQ>sj-Tp:jp%:J6$CtNRBuQCJS<'/%BJs`5":eSBGT!Fc3FS#o1'O<u4OjeEgWiY`7s6t.mOC?S$)23QIL)Y1;OpSKNH2iGZEIj7!An"g[-#m=![;V$Z=9amd3D%h4PVL@%MMY^h?Zp;2p5pP0l)$B$eO8=/S(=YIdA!b7B+jn+r]m4B00u`G?ZB>(;ibls#(!_Z5QBX$j\tEPOK<m2`E]mW3t6g&chW<?aHg3f%=SWg!#R4e[_f7.1PF.ku(eir*,OFWErku6fp0r,X_-dm)L[<j$0c5Y9/.Q_4L2?bm#_Q5t\:/"@0`2OpZ/pW:f/EtfY`"FH^b?l8%P)q:M%!'/7DVAM9Y^kC4:LG#-5ZW6k0FV4WiGqqP@1_k2iNL'ObVWL,(A09i_nb[.M7f&^_dlq/cjIWD(;&KE]YrY8)hpYg1Z%&h%0FXn=pG(6`$,aDX!('a_:`*_a3Qlq]%)kZa9HN%:0FXZn&j-SWYs8Sm%*j%T1SAC0bg(sm)hpX@2%c>f_a&D,F=@V#=[0&O@@1MM%Cs:BCL4Kc+Nh\;P$c?ru'F(jh?)ODNOEJ"f"pf;(%pWf7?58-EN-i6j0G#tj,9RD*gu&<gJW**T#REe#@3]T=0Qg[U%_t^I_GCG<%6n4PsWEoYCM!SB7'$C'A'SI(O#%8Wa,:ES$-u27+(l6guh_>t*Xug#FLl.Tj'at:%Mc>PL=B&J)XknZG:khe;0Gm:4keq*N9Ns9$%EK7n4"A_9Z(m1(`=sUD5_T;*aL"S[`'P:,<)BN=S4]1iN'Sk?pK/cP108NR7Bho-Tj-Y\@/44#Q95tg<lI/`ILV\1c`/EV/os?9H%i\70*jG:\RKG]WFi\4Im!!F_\_`#')9cRau$p<B6E>ZWtBXFd!bZJN1K&:O7WHVJn5B.Oc!&qT$j"TY$h\^qo%RV<C?*=]ma_ST.%)E)T&1tP`C#\uC.7@+a)&;J:b.lbYWA+fo?*4EX+Ld6/c"_-CAGJG:1`*gL#`i)/H3MW>U`:.rcKsAKg+GRAC:'q59!\n9R8n\7(%5R`/CCsra0Uj99=6t-q#_BT=$M&G4N"l*:C(p#*q!o%cA-LoYiJJ_A:R[7_R$tVC,JanKq0g)MqkQ-Lu\jBe;"#8DE<_+@Q1@bDc%BFY6be-.1XX',L4J-^[!X?[1<(2SO'`9^$e5g6V[II_ptLbZp`0cQ;#L;[%!&C:/_BfC*g="uu\!#BiKdK\\BM6T$\7C7ff]Zb=.%bCosOm936t33S4Xn:4O6G(RXTFt851*/W?G'Tnbu77-.C$5/!?7L9b@M+Mj4-F2Z.bV36B2fD72bD]<dEX!Wj%HJHug_V+ISfjA9%7:LH,+\3"iH9C8[8;t6?nXnAB:lq(90VC^oR#DYNKU.5.m,3LeN;YBU8/S3I1$8m7&t>7$Lp8(1`?PLpbaV"XncCRT5g5*_>&+M%%.4[k2<EOg>%,(cC'K.(GH,]D0%>_8<*AZ%D'SslsoQgOIEj=%]"(KK=F*S55TJZ41?%Eh6]QC"N`8m>_Qp?U)!IR)h;[11).@ZET%"#2p.WLX'Ga_A.e"V>0N_2oNW.7ajsI15D^(+#@Whr[=9dM.i1W(7>W[DIP6&<j#JhOag'(,4^WpFGt<`8FI:_[QmiUa[6p<u2EX%566uME3TBt6Uo)A"CfY*Z`cfJQrL1]:4X6miDR8i&qcY+ee\m]VPr(%__@imo>4pPFR+Ta_-t^_(h^E.%PqYY=XFPe+9^\"#,%!o%YR'GT(ClY,bdqj&%YN?QTLpUB"4rO"#&tKdMNiBKK>K<V7U?a_.9"6b6Xc?=cVmj]-66><-ORau4k>b<K#40.2Et&+@5sfK3:[^t%'F*s3mjk+d8&K'_5T&STO)ok+#/)2cR59tdq8Wdu3<"O%,FC]Q^Q<MYQ\E3DTl=U:]lUtrNmh5<_-`4D!>:F-*.W+uHf?\?^o%K5%r5EPtb`13D(Bj-4C4fmAb5q`?'p87`rkEpWd?e5=cd.(5eRr6:rlLLVHMMJHoV:pelS!aU(l[%%$!cgVS?u+SoS=*nU*@ug."d,j%f!\ud*1MOK,0^Z.-!(%tNWZMlma1WYZ[j6^0dJtrE3LroCt@/')&+WtooQMZBechQQHg(SAh1G8!t1G)d0pE)^`%CLG#rMlYQu9?%#c_qXYkSql<1/j!dB@h1C0nq5JU^\PIW`!W5en;]Bl\N)JP4Vt4g(Hq16)igH<_U"/iBQIQ$+'CN.5?5Zc;DG7He`fG%4''4g*]K%fc(I3h<0BU]("^L*`l0XMDa/QEMQVE5=4RR"m<R#*&-^V32D]mNdZ&!*2,8%d@;<!%qRktnDd-ME="k4<#_1nj,b8>L!G_ugC$"R%_N+enNdRGfj00&H%5%K;^p#6O'nY5_lG?I+Eq!/7(C3;:h@D8]Jm8LF1fd9naDpYgUDAI:fY`Hid$5^YV?WH+:66D&I>8Ia"?ER-%E)2uHQ`u.uG,D9:>W+*((iha=Gq>5tO@'_C%oF0a8#EUE"M"ViLL!IXE[O%*nogNGGCgTLK59NN\W^n.J]Tl;DV4m6COmUP,#Y]*%^.",F&^\=lKcl0"[4fsTS0<*NB2R\TR[YHj8eT6bRilnb;_eEC'BI/7J@a`E$$,2_?i"e0O99Rg"IDskEaUNI@2FONM=6O*0IOs#%jDZ@53C1sD9MU[ZB5UTRSKPtmeYF?L5n6'!HYM.>EbJG/>45(F"(0[$CJKt4erpd.#WS#`jTIU3(8)C&2N(k,A6Zl^l",t>kh%Ha%SYM_VRt]TT^9tb;A!;5UGE0qbl0W:XjOc"'CR[H,B&V(&:;#-aEaTl]WIPWBE)[Tnqaus&kKIEJKd)<H1<_UPjM3oD!_+VZ+=`T8%,S[f-N5-G^E^8js3)`/+K2n!"-;`c*p_=ZepsOsO$8dZ.HBCQ/L)_$dKL-BAm0dMBBGM.=.Xcsna&@%s9U0"lXn&5#MB%]eAcMlj%M`2-0h\8(Y6%fU[RiNHaAVW9,2EU&VBaVgknIC@t$9!h:g]BhQJ4[ckW6d*T[kh@lS4+Q55cfUEpm0>1SBZg@r^)_L3b%lnTX/U$%0i&;)VIZ:&K!Rt:#Ak*D2*C@VL0c;gMm`.eqkhW"9D9Vu3]N%@=^r)51?@qG_pt[mc=6;AkXcY4/9rdS+?;F)k&=FZ-9,d_Q9K##%%aLgH'<bWU=hMHi$$&":Zh,JmZQR,h=BWFB(_TL(KHOq$L@^NIS4+T:cSu]__-,DD&8UILJb-`<etH5q+9nZ[BU30EUq_U+LMr:-%?\)hZXV01rBGTJc3sc0YNp?_DF#2kW"H@Ps-o-]lLm'4q3Kaf,X>rXc__f5l@r`J^#7R$.3<?2_GLqs[/C)/?WZncSfJ/j*b[O*#%&g4t@Fqa3ENlrX5[aV;tQXp_dXGcT.CnG6RPE!apgDt'";I%e)Ro5LnLWIB+g.dW4&Og:hFLPGBPuF4Q@^o7mPXu[R[oU*@B@Fa%%ps(g5&3O2_nH'Ae*\O+1@5q)MKF927@/DS`(E1&S/E&o?,;I+EfZ(t1-![CX=c.k?4=$\FN>I\hTc`^m!rCO<?9;IY_mt,1jq9>/%ZlJ*02Gu#1ie=Y,n-DO@(Qcb>0j[sN$6CiC[RO4DnNrXZ]>P'[3I6Jt@-`$[)D;X1WZb]!V&qEu!6tjNJA_i=j-FojV__X6?H?/6%,iM(-[PpjhOJeQjiPJ\53%P@P`kp'2,N6M>&!1`Rbs57FKeu^\&h[RUB/JW,!Z"_->nSb0BS2S]L'tfFH(g!$7l"_u_ZdR%XH`6o%iFE4`[@Utlf,cQ[\#,MXi<#tV<Z&0["VCRq*.#*p?N10F^r(j>EruBe_Zfh^0O0YSi'AI*(ncWl_i!fS2-ag:6s9j4!;U,?Q=us4%X)u@V"Wh,Omgq'McnOG7HF/5#.R%!p(>p[k?]f#QVtsf9Q=p;U+rI54$i&@>4HO4WSWlZ7OD"ZK6B$18>2Ub6mnBGZI"Pqb$./gQ%N-)ZW=o_7:GY+V5E!fbH+jgAdIOFeN=o_E[;2RaLkN%ADZp9rF4Ek:($c',">]5H7^_oIPW6rJ=I+"-D["&UlNUK<R"d!a;95H^q%?pSH3(321c=b?mNZ\uo0Jd!9pFO2=9!"g'H]`ninc+0$GiTN($P$e:r*BZ"b(4`]Q-m?FDJQ9@9H5^>+kYEUh"'%9Fn<M(7B/<R7%EqHnf.Zjh`f&0%KOeXRmM?aOYg5T&U6k4TX@!-1jJA$MP9qm?!IY0&JP%\:#N\t!*DA6<L7LMbuU(^I5Ef<ZV'qtl]\$:*EU'3S$%713iqD]'3'$>SKVZ14Y[$b=Te8tlJ70$oJPUBTTLG:]\D(M]di&h`\Nmibjo&?2ND/`;>T7jt<eO$65_CUCmC[\+j9["'Quj*!Lf%^]bN:1l3"+Ted9*d/q>0oWppnGXdUu,[+l>U*A"%Qs,X]2-PMDda&Q#"]/?H[^l\O0S]HQ+]qjRE=E[kKLa?3=Fg.$\^5$K>+Is'%Y^ftF-Hj8YKlU<79nNU[:%-?fY[@K</Xe/)YeUmlaQ+K*'d1+V$`IZJ\Um<Z=GG1_;POCr-;_s^"Y=e0pT;gENn<EuV%PB@Pt[NX%!MmWONhJO<aCu8s,[(2RJE4%+$OMN1jD9(JOKKI$8[O"k!nXTQR9o_uT7B<;a"Do4BE;o*'mUeOGgX)hUP34.[Hqj@qsAWLWuj.k%X-Z&bHm;6k-l"tJPu+@Fh9Su=puSb]r(-'T.o(csYG`2^k3maP[Gpi8^It^(n`OZ+@=`p/('!T8`=&mHMoFZ]"o_GY`JHMQIp+D[%^-f1#nZ@_g9>:G4MoG;^>:c@#ikH4dJ(J0"nf<V,gY[n-?[hl8(5iirqQ@fs#h6UTXZ.Qu8$+a@pQo[78_3`%CW/#]Dc/*7^+'k1%@I'[f4<<h8P_pDH!b)7,6[tDZ_rH33MBbZ:P_t+cp'kcUdCApR.t73X<NS5rRif&tl#+gNnH2dXO(*+U.A+T=V#85AnHii`@W@RC%T#K^I69^:G3u1RC(8$0NZWR.8HRor)q3FOUGf>sdMoGMiYu[C&.?@[&K)IOUMP$*2*c&`MBsqZVGY,)2`GJ@ZWAsdm4\E\->G5$o%0L%[aMDt,B6`G=8$CjVcpiQYPf2?T4eY,sTb`=<>MHg%lQARUW[n!Fm1#1)fWAjuIXV@tY*dCYAP;i05'W7!09#Zo$5Wl'CinZN<%:b$p_*u@PgdEW*,EEXi`Qq)F$MR+2TUJdU6=!*^eA'mlA;B3YI/b"ri]-/b%$cN/2JV'bQio_j5NeQIT!'\nhPIC._'0"(%e;967%bXe:..,GD[ejAn=FX3YW]UIr86Lfs>8uNDYHVl"Nq3pdP;(+V%1;uTM4K64r-_APg%<^ZcO[U@7iZst-SN-=LoFVOdik$U$'T2(r%>')2-+5]ftdkqnuO.i@O.:+A.0ij/f640";f-1QW8o^^;6`#$q4TMie*(qQ%PJU*"9f3r8X;!l8GuuQ8:Fg(&</M?Q#aODU,=ACD%7p"Ls&sP])`A7(a'Hc3)rN$\\;Y-h$5B8tuV0F3?+V]g38W/O]ilmb.6?,m^+,/]'VamF?6F)!Z6Le@K/VW2>obDlhMH:qOYu'5s%R'BJX"dlPkS;!65:AdXaA1,j8^Y6"hS6OX@:;#ZJ<LnA$FuIj,GO,1$oOP'1QTFZbd6f).M0##0e;87G%<^ZI19.0G]NNKm//)[#%n0et5knB+5nO^_1A`C?$>KXl?\::bWSF1PO'5,HSl,b=[^\D8*R<V5kRn&l+ZgNl0EUj_aA`@E)InQ%dO3r;RM,+>#W"L0[s7NH+%-OT[J&gpi\;'hh&B8u\22sj`mc6`!X,Aq:1X:ZOl6"gYJRZ(5:ZUUHVgII5_M(F]+nI^eoWY&m[dA'2/3+(3lO,`*uNOT`!4DMg^%8ENboc8/HA2<%<[5&/%#TKHu-O*\R@&\#?/=<l*=J(BF^/go/)1MhBeLpJh^UILc#Ah4NYYIh^cnS5H<Ys`uLL](@"5&9b"NVHX`%'o?-VJQO/BKe_/7do1SDM!)B4Mo>#KrX2`c_cVHqK8Bp>G[PWd%m7R>B69eJ&n"ICF>RNsEaX!J#asYS1-19nI`glA"UN978-XVN%UB>@Sd\Vn_3f0G#ks2SUZ)T7Lj"_`Y(`gS9?-;@r#F.)67L*"raQR"7Y)Ej4h'bnZi.3D@cnX*qK$-LER%5Xrd",4m0M*R4!,ipr%;aNu5Y<iO9=N>E*+`nF$Z,5\^2?rC!q&DBjWWtH&4X"uWF#7]1Vm8>HF,V7MiXNIt,_)GM.k#rBGt^E3YW;Ob&+2C16Qg.mGW3?W%Pe7=Z]b!NH]A]i7T]-H+_p?S5na=nc9-eb+Ra$9amnV)I$eh0"jInQe4haai%gD>iq$@gD6+cZ<U4%Tch(0'S:[_uk_2pnN^+k]/%VF'>DR04A>&390uV+-7\`662&+@M7e[)P1YpPnbA'RAS\1jkM0jQPDZ`'WN%'?<R=9&otr45D40^4Fr\l`RU5`;4/*+@H^T@\a_H%OTQJ@EY3uG!LSjBTtKi^&I?&<"XGSdqj8(>@<,c/!(BtF*2oSs*_2&,FagcMp'k!^N3)KT:ib`=i#&]q8:ee^:+ZMtkAabYUe<6(%HPT!Pep"Qu9ON8jQBb;g8*Q>*$+0/9H'pqp/nRh/p3k6D<SBA5eJahqkA>>K&)-b[R+dbtc&/2[qd(Yt$Ik'l2#2IE^>V>d*,4=*%%3Y@:qn=VlUL<h@0ufjuYT&K&I-s8smRCJ[f(Vkn.Fr@d_Im8)O7g;CVmLBPTh'#+epU5a72r"rm]3VAL1B$>7p5+"7#pg)G9#;9%6k4<&6(],CEnj\_VaQPOXgD&a*'>U["kr]Qdb@'M'005Rlq*$Rpo"0/KU*U!(CD`SL1>7V+"p"l4<t-76k7]`iFi@*EknXT01:U9%E'occ;qcH+mJKGMI3Ue(f;>qD1:I\NI=l@dfr%3aY@R#oK_CBBZB[uXAlG0?^hu&UiSD-m#@aX4'ZIX>)dJMai@R(:\E_4*Z#92r%i@^oX3KT=Q4Y)WsZ87g_>&kaAG[T@gf&J!:SfH[?_2$X6*'=r>5cjV=34";P_W5)L"1D0jSfEP&!![+4%Km3*kK#9[)kopphCU`i%k^`r/dZPj4<_"]K2ipC]_V1.t>MCsQ](9`0VH>eV)G*B6\cF[^/6K/p6;iBT@D@kE,mERg]?s8ZI:MVeXQcU%i!IFf*SPL`Y'Qu]%ODYgj[to-9%`+_KTGq9Fl</[Ue<0:c"mJL16TJUW<$X4Tg"_U0dh(//_i\gNf"re6V#+7V(4j%_Qf.HCe;XRgcp(3tmc1N0R0%ML%mZg&njBeZ$T^Ke4&u;#X.l\%Ykm$g<X3F&DNK+0u#;=;_mSsNY`(6P=XD$rl-VubE*a%hY:cJ6#,2Nm0)p:"-fa2d?qME:GZ41qd%gYecq!d.uh@RtB5[fr%t4b`Uh=BuTJ(WUE5-d=V9hh:YPet%_I+,Y3=%?i%!=Cp0]`X1.CTIFQg[41C$$itLSj5.MICA8%lO5PLP%I/38E?[_b'kJ)KA_2j*DdBA#lLUTMHii>kJqSS["3Y],uNlh4gVf+cpmE6#(qT8^,PIJ=(ileN3If./,56(9L0-@t)\$&JjcJs//%?`X%p07IQ&q(F/qpku>iqVpl^!0SUWFp(&.m+9"?6XVY@rUPR_^AR!jOS<Qn(->Lb9OkTm/]^*sPP!g(5=t,&DuT^90fR.rL]@/2%RlCB<q57SY>OkR^]RBC8cTcjLn+Pq:IJ(RGIp.?Ae;fH9n_`4s0-C.1r8/T'b0*#_r6dq#X3L`"F4tV17nGM(g9Qc.G$\r\IdOaX%IdQ=erSkT)pS4&cs2PqJs4_1YO8&FqT7$=$0sDb52o^0Vr8Q3"lC<k:"$Bn=3r\q^MaKD:J<tbKM#s^][\jeHAD_:!dPmUC7jh'd%^O)?B-.=;H5ha8!mCQnXm9`"FH\T6Pf8`;!r,#Cf/:5"l\<lR:9k40Gp,3/+ASg&S0aFpo+1mL"os1\Wpijg?g@&N,hq=q.ZZh[D%*MUm.D"'5_hm./ZHfa#,?EjN=mpZ-/ZZcQ*a"@J?U"c76[I9:#[GR`..`OtrNr9[->FsA6-;oqR]=C#<e_C2_pLiTMZ[c&Mlsl0o%U23YTmCQnXm5LZLDuPjMf01H696P9LZSr\t4IJN?p9D\87Q+iTg3:[:g2HsY+92,LpHSMrornDbq55<anu"ERrr(`hp\t'ir5l/"%r;=`655X`:0Al["mm$VtDdGX'r,Z]2DgjYEk2k3%^A7_P[PokSs32@0KOe>neDGcU+9)"!^@r^t<Fqs~>%AI9_PrivateDataEnd